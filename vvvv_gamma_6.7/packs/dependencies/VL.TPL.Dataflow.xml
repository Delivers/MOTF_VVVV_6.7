<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VL.TPL.Dataflow</name>
    </assembly>
    <members>
        <member name="T:VL.TPL.Dataflow.AsyncActionBlockNode`1">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Action`1"/> delegate for every data element received.</summary>
            <typeparam name="T">Specifies the type of data operated on by this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.ActionBlockNode`1">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Action`1"/> delegate for every data element received.</summary>
            <typeparam name="T">Specifies the type of data operated on by this <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1"/>.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.BatchBlockNode`1">
            <summary>Provides a dataflow block that batches inputs into arrays.</summary>
            <typeparam name="T">Specifies the type of data put into batches.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.BatchedJoinBlockNode`2">
            <summary>
            Provides a dataflow block that batches a specified number of inputs of potentially differing types
            provided to one or more of its targets.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.BatchedJoinBlockNode`3">
            <summary>
            Provides a dataflow block that batches a specified number of inputs of potentially differing types
            provided to one or more of its targets.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
            <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.CloningBroadcastBlockNode`1">
            <summary>
            Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.
            Messages are broadcast to all linked targets, all of which may consume a clone of the message.
            </summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
            <remarks>
            <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> exposes at most one element at a time.  However, unlike
            <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1"/>, that element will be overwritten as new elements are provided
            to the block.  <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> ensures that the current element is broadcast to any
            linked targets before allowing the element to be overwritten.
            </remarks>
        </member>
        <member name="T:VL.TPL.Dataflow.BroadcastBlockNode`1">
            <summary>
            Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.
            Messages are broadcast to all linked targets, all of which may consume a clone of the message.
            </summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
            <remarks>
            <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> exposes at most one element at a time.  However, unlike
            <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1"/>, that element will be overwritten as new elements are provided
            to the block.  <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1"/> ensures that the current element is broadcast to any
            linked targets before allowing the element to be overwritten.
            </remarks>
        </member>
        <member name="T:VL.TPL.Dataflow.BufferBlockNode`1">
            <summary>Provides a buffer for storing data.</summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
        </member>
        <member name="M:VL.TPL.Dataflow.DataflowBlockOptionsNode.Update(System.Threading.Tasks.TaskScheduler,System.Threading.CancellationToken,System.Int32,System.Int32,System.String,System.Boolean)">
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <param name="maxMessagesPerTask">The maximum number of messages that may be processed per task.</param>
            <param name="boundedCapacity">The maximum number of messages that may be buffered by the block.</param>
            <param name="nameFormat">The format string to use when a block is queried for its name.</param>
            <param name="ensureOrdered">Whether ordered processing should be enforced on a block's handling of messages.</param>
        </member>
        <member name="M:VL.TPL.Dataflow.ExecutionDataflowBlockOptionsNode.Update(System.Threading.Tasks.TaskScheduler,System.Threading.CancellationToken,System.Int32,System.Int32,System.String,System.Boolean,System.Int32,System.Boolean)">
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <param name="maxMessagesPerTask">The maximum number of messages that may be processed per task.</param>
            <param name="boundedCapacity">The maximum number of messages that may be buffered by the block.</param>
            <param name="nameFormat">The format string to use when a block is queried for its name.</param>
            <param name="ensureOrdered">Whether ordered processing should be enforced on a block's handling of messages.</param>
            <param name="maxDegreeOfParallelism">The maximum number of messages that may be processed by the block concurrently.</param>
            <param name="singleProducerConstrained">Whether code using the dataflow block is constrained to one producer at a time.</param>
        </member>
        <member name="M:VL.TPL.Dataflow.GroupingDataflowBlockOptionsNode.Update(System.Threading.Tasks.TaskScheduler,System.Threading.CancellationToken,System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Int64)">
            <param name="taskScheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to use for scheduling tasks.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <param name="maxMessagesPerTask">The maximum number of messages that may be processed per task.</param>
            <param name="boundedCapacity">The maximum number of messages that may be buffered by the block.</param>
            <param name="nameFormat">The format string to use when a block is queried for its name.</param>
            <param name="ensureOrdered">Whether ordered processing should be enforced on a block's handling of messages.</param>
            <param name="greedy">Whether to greedily consume offered messages.</param>
            <param name="maxNumberOfGroups">The maximum number of groups that should be generated by the block.</param>
        </member>
        <member name="T:VL.TPL.Dataflow.JoinBlockNode`2">
            <summary>
            Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type,
            waiting for one item to arrive for each type before they?re all released together as a tuple of one item per type.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.JoinBlockNode`3">
            <summary>
            Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type,
            waiting for one item to arrive for each type before they?re all released together as a tuple of one item per type.
            </summary>
            <typeparam name="T1">Specifies the type of data accepted by the block's first target.</typeparam>
            <typeparam name="T2">Specifies the type of data accepted by the block's second target.</typeparam>
            <typeparam name="T3">Specifies the type of data accepted by the block's third target.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.AsyncTransformBlockNode`2">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.TransformBlockNode`2">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2"/>.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.AsyncTransformManyBlockNode`2">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.TransformManyBlockNode`2">
            <summary>Provides a dataflow block that invokes a provided <see cref="T:System.Func`2"/> delegate for every data element received.</summary>
            <typeparam name="TInput">Specifies the type of data received and operated on by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</typeparam>
            <typeparam name="TOutput">Specifies the type of data output by this <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2"/>.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.CloningWriteOnceBlockNode`1">
            <summary>Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.</summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
        </member>
        <member name="T:VL.TPL.Dataflow.WriteOnceBlockNode`1">
            <summary>Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.</summary>
            <typeparam name="T">Specifies the type of the data buffered by this dataflow block.</typeparam>
        </member>
    </members>
</doc>
