/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin Halftone_Internal_TextureFX [{Brightness = InputFloat<ShaderFX.InputValueFloat.i3,PerUpdate>}, {Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {DotSize = InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>}, {NumberOfTiles = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}, {Softness = InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>}]
@P NumberOfTiles: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P DotSize: InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>
@P Softness: InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>
@P Brightness: InputFloat<ShaderFX.InputValueFloat.i3,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 32]
@C    InputValue_id94 => ShaderFX.InputValueFloat4
@C    InputValue_id95 => ShaderFX.InputValueFloat.i3
@C    InputValue_id96 => ShaderFX.InputValueFloat.i1
@C    InputValue_id97 => ShaderFX.InputValueFloat
@C    InputValue_id98 => ShaderFX.InputValueFloat.i2
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Type_id88 => Halftone_Internal_TextureFX.Type
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearRepeatSampler_id50 => Texturing.LinearRepeatSampler [Stage: Pixel, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    Halftone_Internal_TextureFX => 088c8dad7610f17bf272addaea21109a
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 278 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_b8e2d97f5b2a190683051d5acb09f154.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 282
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 5e887265dafa952872eedcd4f8b819d2
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id94;            // Offset:    0 Size:    16
//   float InputValue_id95;             // Offset:   16 Size:     4
//   float InputValue_id96;             // Offset:   20 Size:     4
//   float InputValue_id97;             // Offset:   24 Size:     4
//   float InputValue_id98;             // Offset:   28 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   int Type_id88;                     // Offset:   80 Size:     4
//      = 0x00000000 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearRepeatSampler_id50          sampler      NA          NA             s0      1 
// Sampler0_id52                     sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 257 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_b8e2d97f5b2a190683051d5acb09f154.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s1, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 225
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].z  // r1.x <- stride

#line 228
div r1.yz, v1.xxyx, r1.xxxx
ge r2.xy, r1.yzyy, -r1.yzyy
frc r1.yz, |r1.yyzy|
movc r1.yz, r2.xxyx, r1.yyzy, -r1.yyzy
mad r1.yz, -r1.yyzy, r1.xxxx, v1.xxyx  // r1.y <- pBase.x; r1.z <- pBase.y

#line 229
mad r2.xy, r1.xxxx, l(0.500000, 0.500000, 0.000000, 0.000000), r1.yzyy  // r2.x <- pCenter.x; r2.y <- pCenter.y

#line 231
switch cb1[5].x

#line 234
  case l(0)

#line 214
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t0.xyzw, s0  // r3.x <- tileColor.x; r3.y <- tileColor.y; r3.z <- tileColor.z; r3.w <- tileColor.w

#line 215
  add r2.zw, -r2.xxxy, v1.xxxy
  dp2 r1.w, r2.zwzz, r2.zwzz
  sqrt r1.w, r1.w
  mul r2.z, cb0[1].y, l(0.500000)
  lt r1.w, r1.w, r2.z
  and r1.w, r1.w, l(0x3f800000)  // r1.w <- isInDot

#line 216
  mul r4.xyz, r1.wwww, r3.xyzx
  mul r3.xyz, r4.xyzx, cb0[1].xxxx  // r3.x <- col.x; r3.y <- col.y; r3.z <- col.z

#line 236
  break 

#line 237
  case l(1)

#line 206
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t0.xyzw, s0  // r3.x <- tileColor.x; r3.y <- tileColor.y; r3.z <- tileColor.z; r3.w <- tileColor.w

#line 207
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  mul r1.w, r1.w, cb0[1].y

#line 208
  add r2.zw, -r2.xxxy, v1.xxxy
  dp2 r2.z, r2.zwzz, r2.zwzz
  sqrt r2.z, r2.z
  mul r1.w, r1.w, l(0.577350)
  lt r1.w, r2.z, r1.w
  and r1.w, r1.w, l(0x3f800000)  // r1.w <- isInDot

#line 209
  mul r4.xyz, r1.wwww, r3.xyzx
  mul r3.xyz, r4.xyzx, cb0[1].xxxx  // r3.x <- col.x; r3.y <- col.y; r3.z <- col.z

#line 239
  break 

#line 240
  case l(2)

#line 197
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r2.xyxx, t0.xyzw, s0  // r3.x <- tileColor.x; r3.y <- tileColor.y; r3.z <- tileColor.z; r3.w <- tileColor.w

#line 198
  dp3 r1.w, r3.xyzx, r3.xyzx
  sqrt r1.w, r1.w
  mul r1.w, r1.w, cb0[1].y

#line 199
  add r2.zw, -r2.xxxy, v1.xxxy
  dp2 r2.z, r2.zwzz, r2.zwzz
  sqrt r2.z, r2.z  // r2.z <- rad

#line 200
  mul r1.w, r1.w, l(0.577350)  // r1.w <- s

#line 201
  div r1.w, r2.z, r1.w
  add r1.w, r1.w, l(-1.000000)
  div r1.w, r1.w, cb0[1].w
  add r1.w, -r1.w, l(0.500000)
  mul r4.xyz, r3.xyzx, r1.wwww
  mul r3.xyz, r4.xyzx, cb0[1].xxxx  // r3.x <- col.x; r3.y <- col.y; r3.z <- col.z

#line 242
  break 

#line 243
  case l(3)

#line 186
  mov r4.y, l(0)

#line 184
  mov r3.w, l(0)  // r3.w <- currentColor.w
  mov r1.w, l(0)  // r1.w <- tileColor
  mov r2.z, l(-1)  // r2.z <- x
  loop 
    ilt r2.w, l(1), r2.z
    breakc_nz r2.w

#line 186
    itof r4.x, r2.z
    mad r4.xz, r4.xxyx, r1.xxxx, r2.xxyx  // r4.x <- currentCircle.x; r4.z <- currentCircle.y

#line 187
    sample_indexable(texture2d)(float,float,float,float) r3.xw, r4.xzxx, t0.xyzw, s0  // r3.x <- currentColor.x

#line 189
    add r4.xz, -r4.xxzx, v1.xxyx
    dp2 r2.w, r4.xzxx, r4.xzxx
    sqrt r2.w, r2.w
    mul r4.x, r3.x, cb0[1].y
    lt r2.w, r2.w, r4.x
    and r2.w, r2.w, l(0x3f800000)  // r2.w <- isInDot

#line 190
    add r1.w, r1.w, r2.w

#line 191
    iadd r2.z, r2.z, l(1)
  endloop 

#line 192
  mul r3.xyz, r1.wwww, cb0[1].xxxx  // r3.z <- col.x

#line 245
  break 

#line 246
  case l(4)

#line 169
  sample_indexable(texture2d)(float,float,float,float) r3.xw, r1.yzyy, t0.xyzw, s0  // r3.x <- tileColor.x; r3.w <- tileColor.w

#line 170
  mul r1.x, r3.x, cb0[1].y

#line 171
  add r1.w, -r1.y, v1.x
  mul r1.x, r1.x, l(0.577350)
  lt r1.x, r1.w, r1.x
  and r1.x, r1.x, l(0x3f800000)  // r1.x <- isInDot

#line 172
  mul r3.xyz, r1.xxxx, cb0[1].xxxx  // r3.z <- col.x

#line 248
  break   // r1.x <- stride

#line 249
  case l(5)

#line 162
  mul r1.xw, v1.xxxy, cb0[1].zzzz
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r1.xwxx, t1.xyzw, s0  // r2.x <- tile.x; r2.y <- tile.y; r2.z <- tile.z

#line 163
  sample_indexable(texture2d)(float,float,float,float) r3.xyzw, r1.yzyy, t0.xyzw, s0  // r3.x <- tileColor.x; r3.y <- tileColor.y; r3.z <- tileColor.z; r3.w <- tileColor.w

#line 164
  mul r1.xyz, r2.xyzx, r3.xyzx
  mul r1.xyz, r1.xyzx, cb0[1].xxxx
  add r3.xyz, r1.xyzx, r1.xyzx  // r3.x <- col.x; r3.y <- col.y; r3.z <- col.z

#line 251
  break   // r1.x <- stride; r1.y <- pBase.x; r1.z <- pBase.y; r2.x <- pCenter.x; r2.y <- pCenter.y

#line 252
  default 
  mov r3.xyzw, l(1.000000,1.000000,1.000000,1.000000)  // r3.x <- col.x; r3.y <- col.y; r3.z <- col.z; r3.w <- col.w
  break 
endswitch   // r3.x <- col.x; r3.y <- col.y; r3.z <- col.z; r3.w <- col.w

#line 262
add r1.xyzw, -r0.xyzw, r3.xyzw
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 271
ret 
// Approximately 96 instruction slots used
***************************
*************************/
static const float ht_id93 = 1.732051;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id94;
    float InputValue_id95;
    float InputValue_id96;
    float InputValue_id97;
    float InputValue_id98;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    int Type_id88 = 0;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float Compute_id38()
{
    return InputValue_id95;
}
float Compute_id40()
{
    return InputValue_id97;
}
float Compute_id37()
{
    return InputValue_id96;
}
float Compute_id39()
{
    return InputValue_id98;
}
float4 TexturedHalftone_id34(float2 uv, float2 pBase)
{
    float4 tile = Texture1_id16.Sample(LinearRepeatSampler_id50, uv * Compute_id40());
    float4 tileColor = Texture0_id14.Sample(LinearRepeatSampler_id50, pBase);
    float3 col = tile.rgb * tileColor.rgb * 2 * Compute_id38();
    return float4(col, tileColor.a);
}
float4 LineHalftone_id33(float2 uv, float2 pBase)
{
    float4 tileColor = Texture0_id14.Sample(LinearRepeatSampler_id50, pBase);
    float bright = tileColor.rgb / ht_id93;
    float isInDot = uv - pBase < bright * Compute_id37();
    float3 col = isInDot * Compute_id38();
    return float4(col, tileColor.a);
}
float4 BWHalftone_id32(float2 uv, float2 pCenter, float stride)
{
    float dotSize = Compute_id37();
    float2 currentCircle;
    float4 currentColor;
    float bright;
    float isInDot;
    float tileColor;

    for (int x = -1; x <= 1; x++)
    {
        currentCircle = pCenter + float2(x, 0) * stride;
        currentColor = Texture0_id14.Sample(LinearRepeatSampler_id50, currentCircle);
        bright = currentColor.r;
        isInDot = length(uv - currentCircle) < bright * dotSize;
        tileColor = tileColor + isInDot;
    }
    float3 col = tileColor * Compute_id38();
    return float4(col, currentColor.a);
}
float4 SoftHalftone_id31(float2 uv, float2 pCenter)
{
    float4 tileColor = Texture0_id14.Sample(LinearRepeatSampler_id50, pCenter);
    float bright = length(tileColor.rgb) / ht_id93;
    float rad = length(uv - pCenter);
    float s = bright * Compute_id37();
    float3 col = (0.5 - (rad / s - 1) / Compute_id39()) * tileColor.rgb * Compute_id38();
    return float4(col, tileColor.a);
}
float4 Halftone_id30(float2 uv, float2 pCenter)
{
    float4 tileColor = Texture0_id14.Sample(LinearRepeatSampler_id50, pCenter);
    float bright = length(tileColor.rgb) / ht_id93;
    float isInDot = length(uv - pCenter) < bright * Compute_id37();
    float3 col = tileColor.rgb * isInDot * Compute_id38();
    return float4(col, tileColor.a);
}
float4 Pixels_id29(float2 uv, float2 pCenter)
{
    float4 tileColor = Texture0_id14.Sample(LinearRepeatSampler_id50, pCenter);
    float isInDot = length(uv - pCenter) < Compute_id37() / 2;
    float3 col = tileColor.rgb * isInDot * Compute_id38();
    return float4(col, tileColor.a);
}
float4 Compute_id36()
{
    return InputValue_id94;
}
float4 Filter_id35(inout PS_STREAMS streams, float4 tex0col)
{
    float stride = 1.0f / Compute_id40();
    float halfstride = stride / 2.0f;
    float2 uv = streams.TexCoord_id62;
    float2 pBase = uv - fmod(uv, stride);
    float2 pCenter = pBase + halfstride;
    float4 col = (0.0f, 0.0f, 0.0f, 1.0f);
    switch (Type_id88)

    {
        case 0:
            col = Pixels_id29(uv, pCenter);
            break;
        case 1:
            col = Halftone_id30(uv, pCenter);
            break;
        case 2:
            col = SoftHalftone_id31(uv, pCenter);
            break;
        case 3:
            col = BWHalftone_id32(uv, pCenter, stride);
            break;
        case 4:
            col = LineHalftone_id33(uv, pBase);
            break;
        case 5:
            col = TexturedHalftone_id34(uv, pBase);
            break;
    }
    return col;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id35(streams, col), Compute_id36());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
