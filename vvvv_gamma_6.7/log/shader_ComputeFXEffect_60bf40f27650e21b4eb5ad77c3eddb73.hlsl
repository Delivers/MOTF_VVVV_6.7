/**************************
***** Compiler Parameters *****
***************************
@P EffectName: ComputeFXEffect
@P   - ComputeEffectShader.ThreadNumbers: X:1 Y:1 Z:1
@P EffectNodeBase.EffectNodeBaseShader: mixin SpatialHash_BuildGrid_ComputeFX
***************************
****  ConstantBuffers  ****
***************************
cbuffer Globals [Size: 16]
@C    _NumParticles_id13 => SpatialHash_BuildGrid_ComputeFX._NumParticles
***************************
******  Resources    ******
***************************
@R    _GridBufferRead_id11 => SpatialHash_BuildGrid_ComputeFX._GridBufferRead [Stage: Compute, Slot: (0-0)]
@R    _GridIndicesBufferWrite_id12 => SpatialHash_BuildGrid_ComputeFX._GridIndicesBufferWrite [Stage: Compute, Slot: (0-0)]
@R    Globals => Globals [Stage: Compute, Slot: (0-0)]
***************************
*****     Sources     *****
***************************
@S    ComputeShaderBase => 8f045851eaa4513eb38a704d53889e6d
@S    SpatialHash_BuildGrid_ComputeFX => 957fa594ee437909664c507544eda89a
***************************
*****     Stages      *****
***************************
@G    Compute => 3c65ce8451ffe1db7ef1495e2595cc91
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer Globals
// {
//
//   int _NumParticles_id13;            // Offset:    0 Size:     4
//
// }
//
// Resource bind info for _GridBufferRead_id11
// {
//
//   uint2 $Element;                    // Offset:    0 Size:     8
//
// }
//
// Resource bind info for _GridIndicesBufferWrite_id12
// {
//
//   uint2 $Element;                    // Offset:    0 Size:     8
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// _GridBufferRead_id11              texture  struct         r/o             t0      1 
// _GridIndicesBufferWrite_id12          UAV  struct         r/w             u0      1 
// Globals                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Input
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// no Output
cs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_resource_structured t0, 8
dcl_uav_structured u0, 8
dcl_input vThreadID.x
dcl_temps 1
dcl_thread_group 1, 1, 1
//
// Initial variable locations:
//   vThreadGroupID.x <- __input__.GroupId_id0.x; vThreadGroupID.y <- __input__.GroupId_id0.y; vThreadGroupID.z <- __input__.GroupId_id0.z; 
//   vThreadID.x <- __input__.DispatchThreadId_id1.x; vThreadID.y <- __input__.DispatchThreadId_id1.y; vThreadID.z <- __input__.DispatchThreadId_id1.z
//
#line 31 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_ComputeFXEffect_60bf40f27650e21b4eb5ad77c3eddb73.hlsl"
movc r0.x, vThreadID.x, vThreadID.x, cb0[0].x  // r0.x <- p_id_prev

#line 32
iadd r0.x, r0.x, l(-1)

#line 33
iadd r0.y, vThreadID.x, l(1)  // r0.y <- p_id_next

#line 34
ieq r0.z, r0.y, cb0[0].x

#line 37
movc r0.z, r0.z, l(0), r0.y  // r0.z <- p_id_next

#line 38
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.w, vThreadID.x, l(0), t0.xxxx  // r0.w <- cell

#line 39
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.x, r0.x, l(0), t0.xxxx  // r0.x <- cell_prev

#line 40
ld_structured_indexable(structured_buffer, stride=8)(mixed,mixed,mixed,mixed) r0.z, r0.z, l(0), t0.xxxx  // r0.z <- cell_next

#line 41
ine r0.x, r0.x, r0.w
if_nz r0.x

#line 43
  store_structured u0.x, r0.w, l(0), vThreadID.x

#line 44
endif 

#line 45
ine r0.x, r0.z, r0.w
if_nz r0.x

#line 47
  store_structured u0.x, r0.w, l(4), r0.y

#line 48
endif 

#line 63
ret 
// Approximately 17 instruction slots used
***************************
*************************/
struct CS_STREAMS 
{
    uint3 GroupId_id0;
    uint3 DispatchThreadId_id1;
    int ThreadCountX_id7;
    int ThreadCountY_id8;
    int ThreadCountZ_id9;
    uint ThreadCountPerGroup_id5;
    uint3 ThreadGroupCount_id4;
    uint ThreadGroupIndex_id6;
};
struct CS_INPUT 
{
    uint3 GroupId_id0 : SV_GroupID;
    uint3 DispatchThreadId_id1 : SV_DispatchThreadID;
};
cbuffer PerDispatch 
{
    int3 ThreadGroupCountGlobal_id10;
};
cbuffer Globals 
{
    int _NumParticles_id13;
};
StructuredBuffer<uint2> _GridBufferRead_id11;
RWStructuredBuffer<uint2> _GridIndicesBufferWrite_id12;
void Compute_id2(inout CS_STREAMS streams)
{
    uint3 DTid = streams.DispatchThreadId_id1;
    const unsigned int p_id = DTid.x;
    uint p_id_prev = (p_id == 0) ? (uint)_NumParticles_id13 : p_id;
    p_id_prev--;
    uint p_id_next = p_id + 1;
    if (p_id_next == (uint)_NumParticles_id13)
    {
        p_id_next = 0;
    }
    const uint cell = _GridBufferRead_id11[p_id].x;
    const uint cell_prev = _GridBufferRead_id11[p_id_prev].x;
    const uint cell_next = _GridBufferRead_id11[p_id_next].x;
    if (cell != cell_prev)
    {
        _GridIndicesBufferWrite_id12[cell].x = p_id;
    }
    if (cell != cell_next)
    {
        _GridIndicesBufferWrite_id12[cell].y = p_id + 1;
    }
}
[numthreads(1, 1, 1)]
void CSMain(CS_INPUT __input__)
{
    CS_STREAMS streams = (CS_STREAMS)0;
    streams.GroupId_id0 = __input__.GroupId_id0;
    streams.DispatchThreadId_id1 = __input__.DispatchThreadId_id1;
    streams.ThreadCountX_id7 = 1;
    streams.ThreadCountY_id8 = 1;
    streams.ThreadCountZ_id9 = 1;
    streams.ThreadCountPerGroup_id5 = 1 * 1 * 1;
    streams.ThreadGroupCount_id4 = ThreadGroupCountGlobal_id10;
    streams.ThreadGroupIndex_id6 = (streams.GroupId_id0.z * streams.ThreadGroupCount_id4.y + streams.GroupId_id0.y) * streams.ThreadGroupCount_id4.x + streams.GroupId_id0.x;
    Compute_id2(streams);
}
