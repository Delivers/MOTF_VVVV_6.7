/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin Invert_Internal_TextureFX [{Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {Factor = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}]
@P Factor: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 32]
@C    InputValue_id97 => ShaderFX.InputValueFloat4
@C    InputValue_id98 => ShaderFX.InputValueFloat
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    InvertAlpha_id95 => Invert_Internal_TextureFX.InvertAlpha
@C    InvertType_id96 => Invert_Internal_TextureFX.InvertType
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    Invert_Internal_TextureFX => 853649fcda3393e018ef53fb25969d48
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    InvertOperations => 2e7e2938c8a11912043b830f91ce9ea8
@S    AddonShaderUtils => 0d3496ddd24bfcbde4abd1deae724f64
@S    AddonColorUtility => 9a804e072dbcc5302c99c79218edc161
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 373 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_46b8c2d01e42ff9129b049cf156045a9.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 377
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => f16c3cdfcc1c00360f8ba80ed5f8500e
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id97;            // Offset:    0 Size:    16
//   float InputValue_id98;             // Offset:   16 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   bool InvertAlpha_id95;             // Offset:   80 Size:     4 [unused]
//      = 0x00000000 
//   int InvertType_id96;               // Offset:   84 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Sampler0_id52                     sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 352 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_46b8c2d01e42ff9129b049cf156045a9.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 281
switch cb1[5].y

#line 284
  case l(0)

#line 174
  add r1.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- c.x; r1.y <- c.y; r1.z <- c.z

#line 286
  break 

#line 287
  case l(1)

#line 289
  mad r1.xyz, r0.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000), l(1.000000, 0.000000, 0.000000, 0.000000)
  break 

#line 290
  case l(2)

#line 292
  mad r1.xyz, r0.xyzx, l(1.000000, -1.000000, 1.000000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
  break 

#line 293
  case l(3)

#line 295
  mad r1.xyz, r0.xyzx, l(1.000000, 1.000000, -1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
  break 

#line 296
  case l(4)

#line 298
  mad r1.xyz, r0.xyzx, l(-1.000000, -1.000000, 1.000000, 0.000000), l(1.000000, 1.000000, 0.000000, 0.000000)
  break 

#line 299
  case l(5)

#line 301
  mad r1.xyz, r0.xyzx, l(-1.000000, 1.000000, -1.000000, 0.000000), l(1.000000, 0.000000, 1.000000, 0.000000)
  break 

#line 302
  case l(6)

#line 304
  mad r1.xyz, r0.xyzx, l(1.000000, -1.000000, -1.000000, 0.000000), l(0.000000, 1.000000, 1.000000, 0.000000)
  break 

#line 305
  case l(7)

#line 152
  lt r1.w, r0.y, r0.z
  mov r2.xy, r0.zyzz
  mov r2.zw, l(0,0,-1.000000,0.666667)
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,0,-0.333333)
  movc r2.xyzw, r1.wwww, r2.xyzw, r3.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 153
  lt r1.w, r0.x, r2.x
  mov r3.xyz, r2.xywx
  mov r3.w, r0.x
  mov r2.xyw, r3.wywx
  movc r2.xyzw, r1.wwww, r3.xyzw, r2.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 154
  min r1.w, r2.y, r2.w
  add r1.w, -r1.w, r2.x  // r1.w <- C

#line 155
  add r2.y, -r2.y, r2.w
  mad r2.w, r1.w, l(6.000000), l(0.000000)
  div r2.y, r2.y, r2.w
  add r2.y, r2.z, r2.y

#line 191
  add r2.z, r2.x, l(0.000000)
  div r1.w, r1.w, r2.z  // r1.w <- S

#line 244
  add r2.x, -r2.x, l(1.000000)  // r2.x <- hsv.z

#line 144
  frc r2.y, |r2.y|  // r2.y <- H

#line 147
  mad r2.yzw, r2.yyyy, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 148
  mad_sat r2.yzw, |r2.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r2.y <- <HUEtoRGB_id36 return value>.x; r2.z <- <HUEtoRGB_id36 return value>.y; r2.w <- <HUEtoRGB_id36 return value>.z

#line 186
  add r2.yzw, r2.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
  mad r2.yzw, r2.yyzw, r1.wwww, l(0.000000, 1.000000, 1.000000, 1.000000)
  mul r1.xyz, r2.xxxx, r2.yzwy  // r1.x <- <HSVtoRGB_id37 return value>.x; r1.y <- <HSVtoRGB_id37 return value>.y; r1.z <- <HSVtoRGB_id37 return value>.z

#line 307
  break 

#line 308
  case l(8)

#line 152
  lt r1.w, r0.y, r0.z
  mov r2.xy, r0.zyzz
  mov r2.zw, l(0,0,-1.000000,0.666667)
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,0,-0.333333)
  movc r2.xyzw, r1.wwww, r2.xyzw, r3.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 153
  lt r1.w, r0.x, r2.x
  mov r3.xyz, r2.xywx
  mov r3.w, r0.x
  mov r2.xyw, r3.wywx
  movc r2.xyzw, r1.wwww, r3.xyzw, r2.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 154
  min r1.w, r2.y, r2.w
  add r1.w, -r1.w, r2.x  // r1.w <- C

#line 155
  add r2.y, -r2.y, r2.w
  mad r2.w, r1.w, l(6.000000), l(0.000000)
  div r2.y, r2.y, r2.w
  add r2.y, r2.z, r2.y

#line 238
  add r2.x, -r2.x, l(1.000000)  // r2.x <- hsv.z

#line 144
  frc r2.y, |r2.y|  // r2.y <- H

#line 147
  mad r2.yzw, r2.yyyy, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 148
  mad_sat r2.yzw, |r2.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r2.y <- <HUEtoRGB_id36 return value>.x; r2.z <- <HUEtoRGB_id36 return value>.y; r2.w <- <HUEtoRGB_id36 return value>.z

#line 180
  mad r3.x, r2.x, l(2.000000), l(-1.000000)
  add r3.x, -|r3.x|, l(1.000000)
  mul r1.w, r1.w, r3.x  // r1.w <- C

#line 181
  add r2.yzw, r2.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
  mad r1.xyz, r2.yzwy, r1.wwww, r2.xxxx  // r1.x <- <HSLtoRGB_id38 return value>.x; r1.y <- <HSLtoRGB_id38 return value>.y; r1.z <- <HSLtoRGB_id38 return value>.z

#line 310
  break 

#line 311
  case l(9)

#line 152
  lt r1.w, r0.y, r0.z
  mov r2.xy, r0.zyzz
  mov r2.zw, l(0,0,-1.000000,0.666667)
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,0,-0.333333)
  movc r2.xyzw, r1.wwww, r2.xyzw, r3.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 153
  lt r1.w, r0.x, r2.x
  mov r3.xyz, r2.xywx
  mov r3.w, r0.x
  mov r2.xyw, r3.wywx
  movc r2.xyzw, r1.wwww, r3.xyzw, r2.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 154
  min r1.w, r2.y, r2.w
  add r1.w, -r1.w, r2.x  // r1.w <- C

#line 155
  add r2.y, -r2.y, r2.w
  mad r2.w, r1.w, l(6.000000), l(0.000000)
  div r2.y, r2.y, r2.w
  add r2.y, r2.z, r2.y

#line 232
  add r1.w, -r1.w, l(1.000000)  // r1.w <- hsv.y

#line 144
  frc r2.y, |r2.y|  // r2.y <- H

#line 147
  mad r2.yzw, r2.yyyy, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 148
  mad_sat r2.yzw, |r2.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r2.y <- <HUEtoRGB_id36 return value>.x; r2.z <- <HUEtoRGB_id36 return value>.y; r2.w <- <HUEtoRGB_id36 return value>.z

#line 180
  mad r3.x, r2.x, l(2.000000), l(-1.000000)
  add r3.x, -|r3.x|, l(1.000000)
  mul r1.w, r1.w, r3.x  // r1.w <- C

#line 181
  add r2.yzw, r2.yyzw, l(0.000000, -0.500000, -0.500000, -0.500000)
  mad r1.xyz, r2.yzwy, r1.wwww, r2.xxxx  // r1.x <- <HSLtoRGB_id38 return value>.x; r1.y <- <HSLtoRGB_id38 return value>.y; r1.z <- <HSLtoRGB_id38 return value>.z

#line 313
  break 

#line 314
  case l(10)

#line 169
  dp3 r1.w, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r2.xyz, -r1.wwww, l(0.333333, 0.333333, 0.333333, 0.000000), r0.xyzx
  mad r1.xyz, -r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r0.xyzx  // r1.x <- c.x; r1.y <- c.y; r1.z <- c.z

#line 316
  break 

#line 317
  case l(11)

#line 174
  add r2.xyz, -r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r2.x <- c.x; r2.y <- c.y; r2.z <- c.z

#line 169
  dp3 r1.w, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  mad r3.xyz, -r1.wwww, l(0.333333, 0.333333, 0.333333, 0.000000), r2.xyzx
  mad r1.xyz, -r3.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r2.xyzx  // r1.x <- c.x; r1.y <- c.y; r1.z <- c.z

#line 319
  break 

#line 320
  case l(12)

#line 164
  max r1.w, r0.y, r0.x
  max r1.w, r0.z, r1.w  // r1.w <- w

#line 165
  add r2.xyz, -r0.xyzx, r1.wwww
  div r2.xyz, r2.xyzx, r1.wwww
  add r2.w, -r1.w, l(1.000000)
  max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r2.x <- <RGBToCMYK_id39 return value>.x; r2.y <- <RGBToCMYK_id39 return value>.y; r2.z <- <RGBToCMYK_id39 return value>.z; r2.w <- <RGBToCMYK_id39 return value>.w

#line 160
  add r1.w, -r2.w, l(1.000000)
  mad r2.xyz, r2.xyzx, l(-1.000000, 1.000000, 1.000000, 0.000000), l(1.000000, 0.000000, 0.000000, 0.000000)
  mad r2.xyz, r2.xyzx, r1.wwww, r2.wwww
  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- <CMYKToRGB_id40 return value>.x; r1.y <- <CMYKToRGB_id40 return value>.y; r1.z <- <CMYKToRGB_id40 return value>.z

#line 322
  break 

#line 323
  case l(13)

#line 164
  max r1.w, r0.y, r0.x
  max r1.w, r0.z, r1.w  // r1.w <- w

#line 165
  add r2.xyz, -r0.xyzx, r1.wwww
  div r2.xyz, r2.xyzx, r1.wwww
  add r2.w, -r1.w, l(1.000000)
  max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r2.x <- <RGBToCMYK_id39 return value>.x; r2.y <- <RGBToCMYK_id39 return value>.y; r2.z <- <RGBToCMYK_id39 return value>.z; r2.w <- <RGBToCMYK_id39 return value>.w

#line 160
  add r1.w, -r2.w, l(1.000000)
  mad r2.xyz, r2.xyzx, l(1.000000, -1.000000, 1.000000, 0.000000), l(0.000000, 1.000000, 0.000000, 0.000000)
  mad r2.xyz, r2.xyzx, r1.wwww, r2.wwww
  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- <CMYKToRGB_id40 return value>.x; r1.y <- <CMYKToRGB_id40 return value>.y; r1.z <- <CMYKToRGB_id40 return value>.z

#line 325
  break 

#line 326
  case l(14)

#line 164
  max r1.w, r0.y, r0.x
  max r1.w, r0.z, r1.w  // r1.w <- w

#line 165
  add r2.xyz, -r0.xyzx, r1.wwww
  div r2.xyz, r2.xyzx, r1.wwww
  add r2.w, -r1.w, l(1.000000)
  max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r2.x <- <RGBToCMYK_id39 return value>.x; r2.y <- <RGBToCMYK_id39 return value>.y; r2.z <- <RGBToCMYK_id39 return value>.z; r2.w <- <RGBToCMYK_id39 return value>.w

#line 160
  add r1.w, -r2.w, l(1.000000)
  mad r2.xyz, r2.xyzx, l(1.000000, 1.000000, -1.000000, 0.000000), l(0.000000, 0.000000, 1.000000, 0.000000)
  mad r2.xyz, r2.xyzx, r1.wwww, r2.wwww
  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- <CMYKToRGB_id40 return value>.x; r1.y <- <CMYKToRGB_id40 return value>.y; r1.z <- <CMYKToRGB_id40 return value>.z

#line 328
  break 

#line 329
  case l(15)

#line 164
  max r1.w, r0.y, r0.x
  max r1.w, r0.z, r1.w  // r1.w <- w

#line 165
  add r2.xyz, -r0.xyzx, r1.wwww
  div r2.xyz, r2.xyzx, r1.wwww
  add r2.w, -r1.w, l(1.000000)
  max r2.xyzw, r2.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  min r2.xyzw, r2.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r2.x <- <RGBToCMYK_id39 return value>.x; r2.y <- <RGBToCMYK_id39 return value>.y; r2.z <- <RGBToCMYK_id39 return value>.z; r2.w <- <RGBToCMYK_id39 return value>.w

#line 202
  add r1.w, -r2.w, l(1.000000)  // r1.w <- cmyk.w

#line 160
  add r2.w, -r1.w, l(1.000000)
  mad r2.xyz, r2.xyzx, r2.wwww, r1.wwww
  min r2.xyz, r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
  add r1.xyz, -r2.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r1.x <- <CMYKToRGB_id40 return value>.x; r1.y <- <CMYKToRGB_id40 return value>.y; r1.z <- <CMYKToRGB_id40 return value>.z

#line 331
  break 

#line 332
  default 
  mov r1.xyz, r0.xyzx  // r1.x <- c.x; r1.y <- c.y; r1.z <- c.z
  break 
endswitch   // r1.x <- c.x; r1.y <- c.y; r1.z <- c.z

#line 335
add r1.xyz, -r0.xyzx, r1.xyzx
mul r1.xyz, r1.xyzx, cb0[1].xxxx

#line 357
mov r1.w, l(0)
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 366
ret 
// Approximately 183 instruction slots used
***************************
*************************/
static const float Epsilon_id92 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id97;
    float InputValue_id98;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    bool InvertAlpha_id95 = false;
    int InvertType_id96;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id36(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 RGBtoHCV_id45(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id92) + Q.z);
    return float3(H, C, Q.x);
}
float3 CMYKToRGB_id40(float4 c)
{
    return 1 - min(1, c.rgb * (1 - c.w) + c.w);
}
float4 RGBToCMYK_id39(float3 c)
{
    float w = max(max(c.r, c.g), c.b);
    return clamp(float4((w - c.rgb) / w, 1.0 - w), 0.00000001, 1.0);
}
float4 InvertHue_id87(float4 c)
{
    c.rgb -= 2 * (c.rgb - dot(c.rgb, 1.0) / 3.0);
    return float4(c.rgb, c.a);
}
float4 InvertRGB_id77(float4 c)
{
    c.rgb = 1 - c.rgb;
    return c;
}
float3 HSLtoRGB_id38(in float3 HSL)
{
    float3 RGB = HUEtoRGB_id36(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
float3 HSVtoRGB_id37(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id36(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 RGBtoHSV_id46(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id45(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id92);
    return float3(HCV.x, S, HCV.z);
}
float4 InvertAlpha_id93(float4 c)
{
    c.a = 1 - c.a;
    return c;
}
float4 InvertBlack_id92(float4 c)
{
    float4 cmyk = RGBToCMYK_id39(c.rgb);
    cmyk.w = 1 - cmyk.w;
    return float4(CMYKToRGB_id40(cmyk), c.a);
}
float4 InvertYellow_id91(float4 c)
{
    float4 cmyk = RGBToCMYK_id39(c.rgb);
    cmyk.z = 1 - cmyk.z;
    return float4(CMYKToRGB_id40(cmyk), c.a);
}
float4 InvertMagenta_id90(float4 c)
{
    float4 cmyk = RGBToCMYK_id39(c.rgb);
    cmyk.y = 1 - cmyk.y;
    return float4(CMYKToRGB_id40(cmyk), c.a);
}
float4 InvertCyan_id89(float4 c)
{
    float4 cmyk = RGBToCMYK_id39(c.rgb);
    cmyk.x = 1 - cmyk.x;
    return float4(CMYKToRGB_id40(cmyk), c.a);
}
float4 RGBShift_id88(float4 c)
{
    c = InvertRGB_id77(c);
    c = InvertHue_id87(c);
    return c;
}
float4 InvertSaturation_id86(float4 c)
{
    float3 hsv = RGBtoHCV_id45(c.rgb);
    hsv.y = 1 - hsv.y;
    return float4(HSLtoRGB_id38(hsv), c.a);
}
float4 InvertLightness_id85(float4 c)
{
    float3 hsv = RGBtoHCV_id45(c.rgb);
    hsv.z = 1 - hsv.z;
    return float4(HSLtoRGB_id38(hsv), c.a);
}
float4 InvertValue_id84(float4 c)
{
    float3 hsv = RGBtoHSV_id46(c.rgb);
    hsv.z = 1 - hsv.z;
    return float4(HSVtoRGB_id37(hsv), c.a);
}
float4 InvertGreenBlue_id83(float4 c)
{
    c.gb = 1 - c.gb;
    return c;
}
float4 InvertRedBlue_id82(float4 c)
{
    c.rb = 1 - c.rb;
    return c;
}
float4 InvertRedGreen_id81(float4 c)
{
    c.rg = 1 - c.rg;
    return c;
}
float4 InvertBlue_id80(float4 c)
{
    c.b = 1 - c.b;
    return c;
}
float4 InvertGreen_id79(float4 c)
{
    c.g = 1 - c.g;
    return c;
}
float4 InvertRed_id78(float4 c)
{
    c.r = 1 - c.r;
    return c;
}
float4 Invert_id94(float4 color, float factor, bool invertAlpha, int type)
{
    float4 o = color;
    float4 c = o;
    switch (type)

    {
        case 0:
            c = InvertRGB_id77(c);
            break;
        case 1:
            c = InvertRed_id78(c);
            break;
        case 2:
            c = InvertGreen_id79(c);
            break;
        case 3:
            c = InvertBlue_id80(c);
            break;
        case 4:
            c = InvertRedGreen_id81(c);
            break;
        case 5:
            c = InvertRedBlue_id82(c);
            break;
        case 6:
            c = InvertGreenBlue_id83(c);
            break;
        case 7:
            c = InvertValue_id84(c);
            break;
        case 8:
            c = InvertLightness_id85(c);
            break;
        case 9:
            c = InvertSaturation_id86(c);
            break;
        case 10:
            c = InvertHue_id87(c);
            break;
        case 11:
            c = RGBShift_id88(c);
            break;
        case 12:
            c = InvertCyan_id89(c);
            break;
        case 13:
            c = InvertMagenta_id90(c);
            break;
        case 14:
            c = InvertYellow_id91(c);
            break;
        case 15:
            c = InvertBlack_id92(c);
            break;
    }
    if (invertAlpha)
        InvertAlpha_id93(c);
    c.rgb = lerp(o, c, factor);
    return c;
}
float Compute_id97()
{
    return InputValue_id98;
}
float4 Compute_id96()
{
    return InputValue_id97;
}
float4 Filter_id95(float4 tex0col)
{
    return Invert_id94(tex0col, Compute_id97(), InvertAlpha_id95, InvertType_id96);
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id95(col), Compute_id96());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
