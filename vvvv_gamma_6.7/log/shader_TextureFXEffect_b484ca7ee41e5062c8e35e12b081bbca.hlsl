/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin CircleSpreadSampling_Internal_TextureFX [{Center = InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>}, {Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {Factor = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}, {Phase = InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>}, {Width = InputFloat2<ShaderFX.InputValueFloat2.i1,PerUpdate>}]
@P Factor: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P Phase: InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>
@P Center: InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>
@P Width: InputFloat2<ShaderFX.InputValueFloat2.i1,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 48]
@C    InputValue_id94 => ShaderFX.InputValueFloat4
@C    InputValue_id95 => ShaderFX.InputValueFloat2
@C    InputValue_id96 => ShaderFX.InputValueFloat
@C    InputValue_id97 => ShaderFX.InputValueFloat.i1
@C    InputValue_id98 => ShaderFX.InputValueFloat2.i1
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Count_id88 => CircleSpreadSampling_Internal_TextureFX.Count
@C    type_id93 => CircleSpreadSampling_Internal_TextureFX.type
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearRepeatSampler_id50 => Texturing.LinearRepeatSampler [Stage: Pixel, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    CircleSpreadSampling_Internal_TextureFX => 3f4e78d2ebf80689d9f021d00b90c001
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    BlendOperations => 63b352c733fb868f9162fdac1eacd48b
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    ComputeFloat2 => 4826dbf2e774b7283c93b6121c851c5d
@S    InputFloat2 => d6238a7d677592382c8158617d803399
@S    DeclFloat2 => d5fe6f879293db53179d13cf4b1d1f3d
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 585 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_b484ca7ee41e5062c8e35e12b081bbca.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 589
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 98bc10dbd99f66be04381789846cdad2
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id94;            // Offset:    0 Size:    16
//   float2 InputValue_id95;            // Offset:   16 Size:     8
//   float InputValue_id96;             // Offset:   24 Size:     4
//   float InputValue_id97;             // Offset:   28 Size:     4
//   float2 InputValue_id98;            // Offset:   32 Size:     8
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   int Count_id88;                    // Offset:   80 Size:     4
//      = 0x00000001 
//   int type_id93;                     // Offset:   84 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearRepeatSampler_id50          sampler      NA          NA             s0      1 
// Sampler0_id52                     sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 19
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 564 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_b484ca7ee41e5062c8e35e12b081bbca.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s1, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 557
itof r1.x, cb1[5].x

#line 519
mul r1.y, cb0[1].w, l(6.283190)

#line 521
mul r1.zw, cb0[2].xxxy, l(0.000000, 0.000000, 0.500000, 0.500000)

#line 156
mov r2.zw, l(0,0,-1.000000,0.666667)
mov r3.zw, l(0,0,0,-0.333333)
mov r4.zw, l(0,0,-1.000000,0.666667)
mov r5.zw, l(0,0,0,-0.333333)
mov r6.zw, l(0,0,-1.000000,0.666667)
mov r7.zw, l(0,0,0,-0.333333)
mov r8.zw, l(0,0,-1.000000,0.666667)
mov r9.zw, l(0,0,0,-0.333333)
mov r10.zw, l(0,0,-1.000000,0.666667)
mov r11.zw, l(0,0,0,-0.333333)

#line 555
mov r12.xyzw, l(0,0,0,0)  // r12.x <- c.x; r12.y <- c.y; r12.z <- c.z; r12.w <- c.w
mov r13.x, l(0)  // r13.x <- i
loop 
  ige r13.y, r13.x, cb1[5].x
  breakc_nz r13.y

#line 557
  itof r13.y, r13.x  // r13.y <- index

#line 519
  div r13.y, r13.y, r1.x
  mul r13.y, r13.y, cb0[1].z
  mad r13.y, r13.y, l(6.283190), r1.y  // r13.y <- angle

#line 382
  sincos r14.x, r15.x, r13.y  // r14.x <- <FromPolar_id74 return value>.y; r15.x <- <FromPolar_id74 return value>.x

#line 521
  mov r15.y, r14.x

#line 522
  mad r13.yz, r15.xxyx, r1.zzwz, cb0[1].xxyx  // r13.y <- pos.x; r13.z <- pos.y

#line 558
  add r13.yz, r13.yyzy, v1.xxyx
  sample_l_indexable(texture2d)(float,float,float,float) r14.xyzw, r13.yzyy, t0.xyzw, s0, l(0.000000)  // r14.x <- c1.x; r14.y <- c1.y; r14.z <- c1.z; r14.w <- c1.w

#line 388
  switch cb1[5].y

#line 391
    case l(0)

#line 393
    mov r13.yzw, r14.xxyz  // r13.y <- col.x; r13.z <- col.y; r13.w <- col.z
    break 

#line 394
    case l(1)

#line 373
    add r15.xyz, r12.xyzx, r14.xyzx
    mul r13.yzw, r15.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)  // r13.y <- <Average_id32 return value>.x; r13.z <- <Average_id32 return value>.y; r13.w <- <Average_id32 return value>.z

#line 396
    break 

#line 397
    case l(2)

#line 369
    mul r15.xyz, r12.xyzx, r14.xyzx
    sqrt r13.yzw, r15.xxyz  // r13.y <- <GeometricMean_id33 return value>.x; r13.z <- <GeometricMean_id33 return value>.y; r13.w <- <GeometricMean_id33 return value>.z

#line 399
    break 

#line 400
    case l(3)

#line 212
    min r13.yzw, r12.xxyz, r14.xxyz  // r13.y <- <Darken_id34 return value>.x; r13.z <- <Darken_id34 return value>.y; r13.w <- <Darken_id34 return value>.z

#line 402
    break 

#line 403
    case l(4)

#line 365
    mul r13.yzw, r12.xxyz, r14.xxyz  // r13.y <- <Multiply_id35 return value>.x; r13.z <- <Multiply_id35 return value>.y; r13.w <- <Multiply_id35 return value>.z

#line 405
    break 

#line 406
    case l(5)

#line 204
    eq r15.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r16.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r14.xyzx
    add r16.xyz, -r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r13.yzw, r15.xxyz, l(0,0,0,0), r16.xxyz  // r13.y <- <ColorBurn_id36 return value>.x; r13.z <- <ColorBurn_id36 return value>.y; r13.w <- <ColorBurn_id36 return value>.z

#line 408
    break 

#line 409
    case l(6)

#line 361
    add r15.xyz, r12.xyzx, r14.xyzx
    add r13.yzw, r15.xxyz, l(0.000000, -1.000000, -1.000000, -1.000000)  // r13.y <- <LinearBurn_id37 return value>.x; r13.z <- <LinearBurn_id37 return value>.y; r13.w <- <LinearBurn_id37 return value>.z

#line 411
    break 

#line 412
    case l(7)

#line 357
    add r15.x, r12.y, r12.x
    add r15.x, r12.z, r15.x
    add r15.y, r14.y, r14.x
    add r15.y, r14.z, r15.y
    lt r15.x, r15.x, r15.y
    movc r13.yzw, r15.xxxx, r12.xxyz, r14.xxyz  // r13.y <- <DarkerColor_id38 return value>.x; r13.z <- <DarkerColor_id38 return value>.y; r13.w <- <DarkerColor_id38 return value>.z

#line 414
    break 

#line 415
    case l(8)

#line 208
    max r13.yzw, r12.xxyz, r14.xxyz  // r13.y <- <Lighten_id39 return value>.x; r13.z <- <Lighten_id39 return value>.y; r13.w <- <Lighten_id39 return value>.z

#line 417
    break 

#line 418
    case l(9)

#line 353
    add r15.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r16.xyz, -r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r13.yzw, -r15.xxyz, r16.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)  // r13.y <- <Screen_id40 return value>.x; r13.z <- <Screen_id40 return value>.y; r13.w <- <Screen_id40 return value>.z

#line 420
    break 

#line 421
    case l(10)

#line 349
    add r13.yzw, r12.xxyz, r14.xxyz  // r13.y <- <Add_id41 return value>.x; r13.z <- <Add_id41 return value>.y; r13.w <- <Add_id41 return value>.z

#line 423
    break 

#line 424
    case l(11)

#line 345
    add r15.x, r12.y, r12.x
    add r15.x, r12.z, r15.x
    add r15.y, r14.y, r14.x
    add r15.y, r14.z, r15.y
    lt r15.x, r15.y, r15.x
    movc r13.yzw, r15.xxxx, r12.xxyz, r14.xxyz  // r13.y <- <LighterColor_id42 return value>.x; r13.z <- <LighterColor_id42 return value>.y; r13.w <- <LighterColor_id42 return value>.z

#line 426
    break 

#line 427
    case l(12)

#line 164
    eq r15.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r14.xyzx, r14.xyzx
    add r17.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r17.xyzx
    min r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r13.yzw, r15.xxyz, r12.xxyz, r16.xxyz  // r13.y <- <Reflect_id47 return value>.x; r13.z <- <Reflect_id47 return value>.y; r13.w <- <Reflect_id47 return value>.z

#line 429
    break 

#line 430
    case l(13)

#line 341
    lt r15.xyz, r12.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r16.xyz, r12.xyzx, r14.xyzx
    add r16.xyz, r16.xyzx, r16.xyzx
    add r17.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r17.xyz, r17.xyzx, r17.xyzx
    add r18.xyz, -r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r17.xyz, -r17.xyzx, r18.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r13.yzw, r15.xxyz, r16.xxyz, r17.xxyz  // r13.y <- <Overlay_id44 return value>.x; r13.z <- <Overlay_id44 return value>.y; r13.w <- <Overlay_id44 return value>.z

#line 432
    break 

#line 433
    case l(14)

#line 337
    add r15.xyz, r12.xyzx, r12.xyzx
    mul r16.xyz, r12.xyzx, r12.xyzx
    mad r16.xyz, r15.xyzx, r14.xyzx, r16.xyzx
    mul r15.xyz, r12.xyzx, r15.xyzx
    mad r13.yzw, -r15.xxyz, r14.xxyz, r16.xxyz  // r13.y <- <Softlight_id45 return value>.x; r13.z <- <Softlight_id45 return value>.y; r13.w <- <Softlight_id45 return value>.z

#line 435
    break 

#line 436
    case l(15)

#line 200
    add r15.xyz, -r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r13.yzw, r12.xxyz, r15.xxyz  // r13.y <- <ColorDodge_id46 return value>.x; r13.z <- <ColorDodge_id46 return value>.y; r13.w <- <ColorDodge_id46 return value>.z

#line 438
    break 

#line 439
    case l(16)

#line 164
    eq r15.xyz, r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r12.xyzx, r12.xyzx
    add r17.xyz, -r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r17.xyzx
    min r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r13.yzw, r15.xxyz, l(0,1.000000,1.000000,1.000000), r16.xxyz  // r13.y <- <Reflect_id47 return value>.x; r13.z <- <Reflect_id47 return value>.y; r13.w <- <Reflect_id47 return value>.z

#line 441
    break 

#line 442
    case l(17)

#line 333
    add r15.xyz, r12.xyzx, r14.xyzx
    round_ni r13.yzw, r15.xxyz  // r13.y <- <HardMix_id48 return value>.x; r13.z <- <HardMix_id48 return value>.y; r13.w <- <HardMix_id48 return value>.z

#line 444
    break 

#line 445
    case l(18)

#line 329
    eq r15.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r16.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r16.xyzx, r16.xyzx
    div r16.xyz, r16.xyzx, r14.xyzx
    add r16.xyz, -r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r13.yzw, r15.xxyz, l(0,0,0,0), r16.xxyz  // r13.y <- <Freeze_id49 return value>.x; r13.z <- <Freeze_id49 return value>.y; r13.w <- <Freeze_id49 return value>.z

#line 447
    break 

#line 448
    case l(19)

#line 325
    lt r15.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    add r16.xyz, r14.xyzx, r14.xyzx

#line 212
    min r16.xyz, r12.xyzx, r16.xyzx  // r16.x <- <Darken_id34 return value>.x; r16.y <- <Darken_id34 return value>.y; r16.z <- <Darken_id34 return value>.z

#line 325
    add r17.xyz, r14.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    add r17.xyz, r17.xyzx, r17.xyzx

#line 208
    max r17.xyz, r12.xyzx, r17.xyzx  // r17.x <- <Lighten_id39 return value>.x; r17.y <- <Lighten_id39 return value>.y; r17.z <- <Lighten_id39 return value>.z

#line 325
    movc r13.yzw, r15.xxyz, r16.xxyz, r17.xxyz  // r13.y <- <Pinlight_id50 return value>.x; r13.z <- <Pinlight_id50 return value>.y; r13.w <- <Pinlight_id50 return value>.z

#line 450
    break 

#line 451
    case l(20)

#line 321
    lt r15.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r16.xyz, r12.xyzx, r14.xyzx
    add r16.xyz, r16.xyzx, r16.xyzx
    add r17.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r17.xyz, r17.xyzx, r17.xyzx
    add r18.xyz, -r14.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r17.xyz, -r17.xyzx, r18.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r13.yzw, r15.xxyz, r16.xxyz, r17.xxyz  // r13.y <- <Hardlight_id51 return value>.x; r13.z <- <Hardlight_id51 return value>.y; r13.w <- <Hardlight_id51 return value>.z

#line 453
    break 

#line 454
    case l(21)

#line 317
    lt r15.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    add r16.xyz, r14.xyzx, r14.xyzx

#line 204
    eq r17.xyz, r14.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r18.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r18.xyzx, r16.xyzx
    add r16.xyz, -r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r16.xyz, r17.xyzx, l(0,0,0,0), r16.xyzx  // r16.x <- <ColorBurn_id36 return value>.x; r16.y <- <ColorBurn_id36 return value>.y; r16.z <- <ColorBurn_id36 return value>.z

#line 317
    add r17.xyz, r14.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)

#line 200
    mad r17.xyz, -r17.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
    div r17.xyz, r12.xyzx, r17.xyzx  // r17.x <- <ColorDodge_id46 return value>.x; r17.y <- <ColorDodge_id46 return value>.y; r17.z <- <ColorDodge_id46 return value>.z

#line 317
    movc r13.yzw, r15.xxyz, r16.xxyz, r17.xxyz  // r13.y <- <VividLight_id52 return value>.x; r13.z <- <VividLight_id52 return value>.y; r13.w <- <VividLight_id52 return value>.z

#line 456
    break 

#line 457
    case l(22)

#line 313
    lt r15.xyz, r14.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mad r16.xyz, r14.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r12.xyzx
    add r16.xyz, r16.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r17.xyz, r14.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r17.xyz, r17.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r12.xyzx
    min r17.xyz, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r13.yzw, r15.xxyz, r16.xxyz, r17.xxyz  // r13.y <- <LinearLight_id53 return value>.x; r13.z <- <LinearLight_id53 return value>.y; r13.w <- <LinearLight_id53 return value>.z

#line 459
    break 

#line 460
    case l(23)

#line 309
    add r13.yzw, r12.xxyz, -r14.xxyz

#line 462
    mov r13.yzw, |r13.yyzw|  // r13.y <- col.x; r13.z <- col.y; r13.w <- col.z
    break 

#line 463
    case l(24)

#line 305
    add r15.xyz, r12.xyzx, r14.xyzx
    mul r16.xyz, r12.xyzx, r14.xyzx
    mad r13.yzw, -r16.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), r15.xxyz  // r13.y <- <Exclusion_id55 return value>.x; r13.z <- <Exclusion_id55 return value>.y; r13.w <- <Exclusion_id55 return value>.z

#line 465
    break 

#line 466
    case l(25)

#line 301
    add r13.yzw, r12.xxyz, -r14.xxyz  // r13.y <- <Subtract_id56 return value>.x; r13.z <- <Subtract_id56 return value>.y; r13.w <- <Subtract_id56 return value>.z

#line 468
    break 

#line 469
    case l(26)

#line 297
    div r13.yzw, r12.xxyz, r14.xxyz  // r13.y <- <Divide_id57 return value>.x; r13.z <- <Divide_id57 return value>.y; r13.w <- <Divide_id57 return value>.z

#line 471
    break 

#line 472
    case l(27)

#line 293
    add r15.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r15.xyz, -r14.xyzx, r15.xyzx
    add r13.yzw, -|r15.xxyz|, l(0.000000, 1.000000, 1.000000, 1.000000)  // r13.y <- <Negation_id58 return value>.x; r13.z <- <Negation_id58 return value>.y; r13.w <- <Negation_id58 return value>.z

#line 474
    break 

#line 475
    case l(28)

#line 289
    sqrt r15.xyz, r12.xyzx
    add r13.yzw, r14.xxyz, -r15.xxyz  // r13.y <- <AdditiveSubstractive_id59 return value>.x; r13.z <- <AdditiveSubstractive_id59 return value>.y; r13.w <- <AdditiveSubstractive_id59 return value>.z

#line 477
    break 

#line 478
    case l(29)

#line 164
    eq r15.xyz, r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r14.xyzx, r14.xyzx
    add r17.xyz, -r12.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r17.xyzx
    min r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r15.xyz, r15.xyzx, r12.xyzx, r16.xyzx  // r15.x <- <Reflect_id47 return value>.x; r15.y <- <Reflect_id47 return value>.y; r15.z <- <Reflect_id47 return value>.z

#line 285
    add r13.yzw, -r15.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)  // r13.y <- <Heat_id60 return value>.x; r13.z <- <Heat_id60 return value>.y; r13.w <- <Heat_id60 return value>.z

#line 480
    break 

#line 481
    case l(30)

#line 281
    min r15.xyz, r12.xyzx, r14.xyzx
    max r16.xyz, r12.xyzx, r14.xyzx
    add r15.xyz, r15.xyzx, -r16.xyzx
    add r13.yzw, r15.xxyz, l(0.000000, 1.000000, 1.000000, 1.000000)  // r13.y <- <Phoenix_id61 return value>.x; r13.z <- <Phoenix_id61 return value>.y; r13.w <- <Phoenix_id61 return value>.z

#line 483
    break 

#line 484
    case l(31)

#line 277
    add r15.xyz, r12.xyzx, -r14.xyzx
    add r13.yzw, r15.xxyz, l(0.000000, 0.500000, 0.500000, 0.500000)  // r13.y <- <GrainExtract_id62 return value>.x; r13.z <- <GrainExtract_id62 return value>.y; r13.w <- <GrainExtract_id62 return value>.z

#line 486
    break 

#line 487
    case l(32)

#line 273
    add r15.xyz, r12.xyzx, -r14.xyzx
    add r13.yzw, r15.xxyz, l(0.000000, -0.500000, -0.500000, -0.500000)  // r13.y <- <GrainMerge_id63 return value>.x; r13.z <- <GrainMerge_id63 return value>.y; r13.w <- <GrainMerge_id63 return value>.z

#line 489
    break 

#line 490
    case l(33)

#line 156
    lt r15.x, r12.y, r12.z
    movc r15.xy, r15.xxxx, r12.zyzz, r12.yzyy  // r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y

#line 157
    lt r15.w, r12.x, r15.x
    mov r15.z, r12.x
    movc r15.xyz, r15.wwww, r15.xyzx, r15.zyxz  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w

#line 158
    min r15.y, r15.y, r15.z
    add r15.y, -r15.y, r15.x  // r15.y <- C; r15.y <- C; r15.y <- C; r15.y <- C; r15.y <- C; r15.y <- C

#line 190
    mad r15.x, -r15.y, l(0.500000), r15.x  // r15.x <- L; r15.x <- L; r15.x <- L; r15.x <- L

#line 156
    lt r15.z, r14.y, r14.z
    mov r2.xy, r14.zyzz
    mov r3.xy, r2.yxyy
    movc r16.xyzw, r15.zzzz, r2.xyzw, r3.xyzw  // r16.x <- P.x; r16.y <- P.y; r16.z <- P.z; r16.w <- P.w; r16.x <- P.x; r16.y <- P.y; r16.z <- P.z; r16.w <- P.w; r16.x <- P.x; r16.y <- P.y; r16.z <- P.z; r16.w <- P.w; r16.x <- P.x; r16.y <- P.y; r16.z <- P.z; r16.w <- P.w; r16.x <- P.x; r16.y <- P.y; r16.z <- P.z; r16.w <- P.w

#line 157
    lt r2.x, r14.x, r16.x
    mov r17.xyz, r16.xywx
    mov r17.w, r14.x
    mov r16.xyw, r17.wywx
    movc r16.xyzw, r2.xxxx, r17.xyzw, r16.xyzw  // r16.x <- Q.x; r16.y <- Q.y; r16.z <- Q.z; r16.w <- Q.w; r16.x <- Q.x; r16.y <- Q.y; r16.z <- Q.z; r16.w <- Q.w; r16.x <- Q.x; r16.y <- Q.y; r16.z <- Q.z; r16.w <- Q.w; r16.x <- Q.x; r16.y <- Q.y; r16.z <- Q.z; r16.w <- Q.w; r16.x <- Q.x; r16.y <- Q.y; r16.z <- Q.z; r16.w <- Q.w

#line 158
    min r2.x, r16.y, r16.w
    add r2.x, -r2.x, r16.x  // r2.x <- C; r2.x <- C; r2.x <- C; r2.x <- C; r2.x <- C

#line 159
    add r2.y, -r16.y, r16.w
    mad r2.x, r2.x, l(6.000000), l(0.000000)
    div r2.x, r2.y, r2.x
    add r2.x, r16.z, r2.x

#line 148
    frc r2.x, |r2.x|  // r2.x <- H

#line 151
    mad r16.xyz, r2.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 152
    mad_sat r16.xyz, |r16.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r16.x <- <HUEtoRGB_id8 return value>.x; r16.y <- <HUEtoRGB_id8 return value>.y; r16.z <- <HUEtoRGB_id8 return value>.z

#line 185
    add r16.xyz, r16.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r13.yzw, r16.xxyz, r15.yyyy, r15.xxxx  // r13.y <- <HSLtoRGB_id10 return value>.x; r13.z <- <HSLtoRGB_id10 return value>.y; r13.w <- <HSLtoRGB_id10 return value>.z

#line 492
    break 

#line 493
    case l(34)

#line 156
    lt r2.x, r12.y, r12.z
    mov r4.xy, r12.zyzz
    mov r5.xy, r4.yxyy
    movc r15.xyzw, r2.xxxx, r4.xyzw, r5.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 157
    lt r2.x, r12.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r12.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r2.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 158
    min r2.x, r15.y, r15.w
    add r2.x, -r2.x, r15.x  // r2.x <- C; r2.x <- C; r2.x <- C; r2.x <- C

#line 159
    add r2.y, -r15.y, r15.w
    mad r2.x, r2.x, l(6.000000), l(0.000000)
    div r2.x, r2.y, r2.x
    add r2.x, r15.z, r2.x

#line 156
    lt r2.y, r14.y, r14.z
    movc r16.xy, r2.yyyy, r14.zyzz, r14.yzyy  // r16.x <- P.x; r16.y <- P.y; r16.x <- P.x; r16.y <- P.y; r16.x <- P.x; r16.y <- P.y; r16.x <- P.x; r16.y <- P.y

#line 157
    lt r2.y, r14.x, r16.x
    mov r16.z, r14.x
    movc r15.yzw, r2.yyyy, r16.xxyz, r16.zzyx  // r15.y <- Q.x; r15.z <- Q.y; r15.y <- Q.x; r15.z <- Q.y; r15.y <- Q.x; r15.z <- Q.y; r15.y <- Q.x; r15.z <- Q.y

#line 158
    min r2.y, r15.z, r15.w
    add r2.y, -r2.y, r15.y  // r2.y <- C; r2.y <- C; r2.y <- C; r2.y <- C

#line 178
    add r3.x, r15.y, l(0.000000)
    div r2.y, r2.y, r3.x  // r2.y <- S; r2.y <- S

#line 148
    frc r2.x, |r2.x|  // r2.x <- H

#line 151
    mad r15.yzw, r2.xxxx, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 152
    mad_sat r15.yzw, |r15.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r15.y <- <HUEtoRGB_id8 return value>.x; r15.z <- <HUEtoRGB_id8 return value>.y; r15.w <- <HUEtoRGB_id8 return value>.z

#line 173
    add r15.yzw, r15.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
    mad r15.yzw, r15.yyzw, r2.yyyy, l(0.000000, 1.000000, 1.000000, 1.000000)
    mul r13.yzw, r15.xxxx, r15.yyzw  // r13.y <- <HSVtoRGB_id9 return value>.x; r13.z <- <HSVtoRGB_id9 return value>.y; r13.w <- <HSVtoRGB_id9 return value>.z

#line 495
    break 

#line 496
    case l(35)

#line 156
    lt r2.x, r12.y, r12.z
    movc r15.xy, r2.xxxx, r12.zyzz, r12.yzyy  // r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y

#line 157
    lt r2.x, r12.x, r15.x
    mov r15.z, r12.x
    movc r15.xyz, r2.xxxx, r15.xyzx, r15.zyxz  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w

#line 158
    min r2.x, r15.y, r15.z
    add r2.x, -r2.x, r15.x  // r2.x <- C; r2.x <- C; r2.x <- C; r2.x <- C

#line 190
    mad r2.x, -r2.x, l(0.500000), r15.x  // r2.x <- L; r2.x <- L; r2.x <- L

#line 156
    lt r2.y, r14.y, r14.z
    mov r6.xy, r14.zyzz
    mov r7.xy, r6.yxyy
    movc r15.xyzw, r2.yyyy, r6.xyzw, r7.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 157
    lt r2.y, r14.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r14.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r2.yyyy, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 158
    min r2.y, r15.y, r15.w
    add r2.y, -r2.y, r15.x  // r2.y <- C; r2.y <- C; r2.y <- C

#line 159
    add r3.x, -r15.y, r15.w
    mad r3.y, r2.y, l(6.000000), l(0.000000)
    div r3.x, r3.x, r3.y
    add r3.x, r15.z, r3.x

#line 190
    mad r3.y, -r2.y, l(0.500000), r15.x  // r3.y <- L; r3.y <- L

#line 191
    mad r3.y, r3.y, l(2.000000), l(-1.000000)
    add r3.y, -|r3.y|, l(1.000000)
    div r2.y, r2.y, r3.y  // r2.y <- S; r2.y <- S

#line 148
    frc r3.x, |r3.x|  // r3.x <- H

#line 151
    mad r15.xyz, r3.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 152
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 184
    mad r3.x, r2.x, l(2.000000), l(-1.000000)
    add r3.x, -|r3.x|, l(1.000000)
    mul r2.y, r2.y, r3.x  // r2.y <- C

#line 185
    add r15.xyz, r15.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r13.yzw, r15.xxyz, r2.yyyy, r2.xxxx  // r13.y <- <HSLtoRGB_id10 return value>.x; r13.z <- <HSLtoRGB_id10 return value>.y; r13.w <- <HSLtoRGB_id10 return value>.z

#line 498
    break 

#line 499
    case l(36)

#line 156
    lt r2.x, r12.y, r12.z
    mov r8.xy, r12.zyzz
    mov r9.xy, r8.yxyy
    movc r15.xyzw, r2.xxxx, r8.xyzw, r9.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 157
    lt r2.x, r12.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r12.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r2.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 158
    min r2.x, r15.y, r15.w
    add r2.x, -r2.x, r15.x  // r2.x <- C; r2.x <- C

#line 159
    add r2.y, -r15.y, r15.w
    mad r3.x, r2.x, l(6.000000), l(0.000000)
    div r2.y, r2.y, r3.x
    add r2.y, r15.z, r2.y

#line 190
    mad r3.x, -r2.x, l(0.500000), r15.x  // r3.x <- L

#line 191
    mad r3.x, r3.x, l(2.000000), l(-1.000000)
    add r3.x, -|r3.x|, l(1.000000)
    div r2.x, r2.x, r3.x  // r2.x <- S

#line 156
    lt r3.x, r14.y, r14.z
    movc r15.xy, r3.xxxx, r14.zyzz, r14.yzyy  // r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y

#line 157
    lt r3.x, r14.x, r15.x
    mov r15.z, r14.x
    movc r15.xyz, r3.xxxx, r15.xyzx, r15.zyxz  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w

#line 158
    min r3.x, r15.y, r15.z
    add r3.x, -r3.x, r15.x  // r3.x <- C; r3.x <- C

#line 190
    mad r3.x, -r3.x, l(0.500000), r15.x  // r3.x <- L

#line 148
    frc r2.y, |r2.y|  // r2.y <- H

#line 151
    mad r15.xyz, r2.yyyy, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 152
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 184
    mad r2.y, r3.x, l(2.000000), l(-1.000000)
    add r2.y, -|r2.y|, l(1.000000)
    mul r2.x, r2.x, r2.y  // r2.x <- C

#line 185
    add r15.xyz, r15.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r13.yzw, r15.xxyz, r2.xxxx, r3.xxxx  // r13.y <- <HSLtoRGB_id10 return value>.x; r13.z <- <HSLtoRGB_id10 return value>.y; r13.w <- <HSLtoRGB_id10 return value>.z

#line 501
    break 

#line 502
    case l(37)

#line 156
    lt r2.x, r12.y, r12.z
    mov r10.xy, r12.zyzz
    mov r11.xy, r10.yxyy
    movc r15.xyzw, r2.xxxx, r10.xyzw, r11.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 157
    lt r2.x, r12.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r12.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r2.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 158
    min r2.x, r15.y, r15.w
    add r2.x, -r2.x, r15.x  // r2.x <- C

#line 159
    add r2.y, -r15.y, r15.w
    mad r3.x, r2.x, l(6.000000), l(0.000000)
    div r2.y, r2.y, r3.x
    add r2.y, r15.z, r2.y

#line 178
    add r3.x, r15.x, l(0.000000)
    div r2.x, r2.x, r3.x  // r2.x <- S

#line 156
    max r3.x, r14.z, r14.y  // r3.x <- P.x

#line 157
    max r3.x, r3.x, r14.x  // r3.x <- Q.x

#line 148
    frc r2.y, |r2.y|  // r2.y <- H

#line 151
    mad r15.xyz, r2.yyyy, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 152
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 173
    add r15.xyz, r15.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mad r15.xyz, r15.xyzx, r2.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r13.yzw, r3.xxxx, r15.xxyz  // r13.y <- <HSVtoRGB_id9 return value>.x; r13.z <- <HSVtoRGB_id9 return value>.y; r13.w <- <HSVtoRGB_id9 return value>.z

#line 504
    break 

#line 505
    case l(38)

#line 507
    mov r13.y, r14.x  // r13.y <- col.x
    mov r13.zw, r12.yyyz  // r13.z <- col.y; r13.w <- col.z
    break 

#line 508
    case l(39)

#line 510
    mov r13.yw, r12.xxxz  // r13.y <- col.x; r13.w <- col.z
    mov r13.z, r14.y  // r13.z <- col.y
    break 

#line 511
    case l(40)

#line 513
    mov r13.yz, r12.xxyx  // r13.y <- col.x; r13.z <- col.y
    mov r13.w, r14.z  // r13.w <- col.z
    break 

#line 514
    default 
    break 
  endswitch   // r13.y <- col.x; r13.z <- col.y; r13.w <- col.z

#line 220
  add r2.x, -r12.w, l(1.000000)
  mad r15.w, r14.w, r2.x, r12.w  // r15.w <- alpha

#line 168
  div r2.x, r12.w, r15.w
  add r2.y, -r2.x, l(1.000000)
  add r3.x, -r14.w, l(1.000000)
  mul r2.x, r2.x, r3.x
  mul r16.xyz, r12.xyzx, r2.xxxx
  mad r14.xyz, r2.yyyy, r14.xyzx, r16.xyzx
  mad r15.xyz, r14.wwww, r13.yzwy, r14.xyzx  // r15.x <- <ColorCompositing_id29 return value>.x; r15.y <- <ColorCompositing_id29 return value>.y; r15.z <- <ColorCompositing_id29 return value>.z

#line 559
  iadd r13.x, r13.x, l(1)
  mov r12.xyzw, r15.xyzw
endloop 

#line 569
add r1.xyzw, -r0.xyzw, r12.xyzw
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 578
ret 
// Approximately 417 instruction slots used
***************************
*************************/
static const float Pi_id79 = 3.1415926535897932384626433832795;
static const float Epsilon_id83 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id94;
    float2 InputValue_id95;
    float InputValue_id96;
    float InputValue_id97;
    float2 InputValue_id98;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    int Count_id88 = 1;
    int type_id93;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id8(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 RGBtoHCV_id11(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id83) + Q.z);
    return float3(H, C, Q.x);
}
float4 Reflect_id47(float4 c0, float4 c1)
{
    return (c1 == 1.0) ? c1 : min(c0 * c0 / (1.0 - c1), 1.0);
}
float3 ColorCompositing_id29(float as, float ab, float ar, float3 Cs, float3 Cb, float3 Bbs)
{
    return (1 - (as / ar)) * Cb + (as / ar) * (1 - ab) * Cs + ab * Bbs;
}
float3 HSVtoRGB_id9(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id8(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 RGBtoHSV_id12(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id83);
    return float3(HCV.x, S, HCV.z);
}
float3 HSLtoRGB_id10(in float3 HSL)
{
    float3 RGB = HUEtoRGB_id8(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
float3 RGBtoHSL_id13(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon_id83);
    return float3(HCV.x, S, L);
}
float4 Glow_id43(float4 c0, float4 c1)
{
    return Reflect_id47(c1, c0);
}
float4 ColorDodge_id46(float4 c0, float4 c1)
{
    return c0 / (1.0 - c1);
}
float4 ColorBurn_id36(float4 c0, float4 c1)
{
    return (c1 == 0.0) ? c1 : max((1.0 - (1.0 - c0) / c1), 0.0);
}
float4 Lighten_id39(float4 c0, float4 c1)
{
    return max(c0, c1);
}
float4 Darken_id34(float4 c0, float4 c1)
{
    return min(c0, c1);
}
float CyclesToRadians_id73(float angle)
{
    return (Pi_id79 / 180) * angle;
}
float4 ComputeAlpha_id30(float4 c0, float4 c1, float4 composite)
{
    float alpha = (c1.a + c0.a * (1.0 - c1.a));
    float3 color = ColorCompositing_id29(c1.a, c0.a, alpha, c1.rgb, c0.rgb, composite.rgb);
    return float4(color, alpha);
}
float4 Blue_id71(float4 c0, float4 c1)
{
    return float4(c0.r, c0.g, c1.b, 1.0);
}
float4 Green_id70(float4 c0, float4 c1)
{
    return float4(c0.r, c1.g, c0.b, 1.0);
}
float4 Red_id69(float4 c0, float4 c1)
{
    return float4(c1.r, c0.g, c0.b, 1.0);
}
float4 Value_id68(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSV_id12(c0.rgb);
    float3 hsv1 = RGBtoHSV_id12(c1.rgb);
    float3 col = HSVtoRGB_id9(float3(hsv0.x, hsv0.y, hsv1.z));
    return float4(col, c1.a);
}
float4 Lightness_id67(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv0.x, hsv0.y, hsv1.z));
    return float4(col, c1.a);
}
float4 Color_id66(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv1.x, hsv1.y, hsv0.z));
    return float4(col, c1.a);
}
float4 Saturation_id65(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSV_id12(c0.rgb);
    float3 hsv1 = RGBtoHSV_id12(c1.rgb);
    float3 col = HSVtoRGB_id9(float3(hsv0.x, hsv1.y, hsv0.z));
    return float4(col, c1.a);
}
float4 Hue_id64(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv1.x, hsv0.y, hsv0.z));
    return float4(col, c1.a);
}
float4 GrainMerge_id63(float4 c0, float4 c1)
{
    return (c0 - c1) - 0.5;
}
float4 GrainExtract_id62(float4 c0, float4 c1)
{
    return (c0 - c1) + 0.5;
}
float4 Phoenix_id61(float4 c0, float4 c1)
{
    return min(c0, c1) - max(c0, c1) + 1.0;
}
float4 Heat_id60(float4 c0, float4 c1)
{
    return 1.0 - Glow_id43(c0, c1);
}
float4 AdditiveSubstractive_id59(float4 c0, float4 c1)
{
    return c1 - sqrt(c0);
}
float4 Negation_id58(float4 c0, float4 c1)
{
    return 1.0 - abs(1.0 - c0 - c1);
}
float4 Divide_id57(float4 c0, float4 c1)
{
    return c0 / c1;
}
float4 Subtract_id56(float4 c0, float4 c1)
{
    return c0 - c1;
}
float4 Exclusion_id55(float4 c0, float4 c1)
{
    return c0 + c1 - 2.0 * c0 * c1;
}
float4 Difference_id54(float4 c0, float4 c1)
{
    return abs(c0 - c1);
}
float4 LinearLight_id53(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? max(c0 + 2.0 * c1 - 1.0, 0.0) : min(c0 + 2.0 * (c1 - 0.5), 1.0);
}
float4 VividLight_id52(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? ColorBurn_id36(c0, 2.0 * c1) : ColorDodge_id46(c0, (2.0 * (c1 - 0.5)));
}
float4 Hardlight_id51(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? (2.0 * c0 * c1) : 1.0 - 2.0 * (1.0 - c0) * (1.0 - c1);
}
float4 Pinlight_id50(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? Darken_id34(c0, (2.0 * c1)) : Lighten_id39(c0, (2.0 * (c1 - 0.5)));
}
float4 Freeze_id49(float4 c0, float4 c1)
{
    return (c1 == 0.0) ? 0.0 : 1.0 - pow(1.0 - c0, 2.0) / c1;
}
float4 HardMix_id48(float4 c0, float4 c1)
{
    return floor(c0 + c1);
}
float4 Softlight_id45(float4 c0, float4 c1)
{
    return 2.0 * c0 * c1 + c0 * c0 - 2.0 * c0 * c0 * c1;
}
float4 Overlay_id44(float4 c0, float4 c1)
{
    return (c0 < 0.5) ? (2.0 * c0 * c1) : 1.0 - 2.0 * (1 - c0) * (1.0 - c1);
}
float4 LighterColor_id42(float4 c0, float4 c1)
{
    return (c0.r + c0.g + c0.b > c1.r + c1.g + c1.b) ? c0 : c1;
}
float4 Add_id41(float4 c0, float4 c1)
{
    return c0 + c1;
}
float4 Screen_id40(float4 c0, float4 c1)
{
    return 1.0 - ((1.0 - c0) * (1.0 - c1));
}
float4 DarkerColor_id38(float4 c0, float4 c1)
{
    return (c0.r + c0.g + c0.b < c1.r + c1.g + c1.b) ? c0 : c1;
}
float4 LinearBurn_id37(float4 c0, float4 c1)
{
    return (c0 + c1) - 1.0;
}
float4 Multiply_id35(float4 c0, float4 c1)
{
    return c0 * c1;
}
float4 GeometricMean_id33(float4 c0, float4 c1)
{
    return sqrt(c0 * c1);
}
float4 Average_id32(float4 c0, float4 c1)
{
    return (c0 + c1) * 0.5;
}
float4 Normal_id31(float4 c0, float4 c1)
{
    return c1;
}
float2 FromPolar_id74(float angle, float radius)
{
    float rad = CyclesToRadians_id73(angle);
    return float2(cos(angle), sin(angle)) * radius;
}
float4 Blend_id72(float4 c0, float4 c1, float fader, bool computeAlpha, int type)
{
    float4 col;
    c1.a *= saturate(fader);
    switch (type)

    {
        case 0:
            col = Normal_id31(c0, c1);
            break;
        case 1:
            col = Average_id32(c0, c1);
            break;
        case 2:
            col = GeometricMean_id33(c0, c1);
            break;
        case 3:
            col = Darken_id34(c0, c1);
            break;
        case 4:
            col = Multiply_id35(c0, c1);
            break;
        case 5:
            col = ColorBurn_id36(c0, c1);
            break;
        case 6:
            col = LinearBurn_id37(c0, c1);
            break;
        case 7:
            col = DarkerColor_id38(c0, c1);
            break;
        case 8:
            col = Lighten_id39(c0, c1);
            break;
        case 9:
            col = Screen_id40(c0, c1);
            break;
        case 10:
            col = Add_id41(c0, c1);
            break;
        case 11:
            col = LighterColor_id42(c0, c1);
            break;
        case 12:
            col = Glow_id43(c0, c1);
            break;
        case 13:
            col = Overlay_id44(c0, c1);
            break;
        case 14:
            col = Softlight_id45(c0, c1);
            break;
        case 15:
            col = ColorDodge_id46(c0, c1);
            break;
        case 16:
            col = Reflect_id47(c0, c1);
            break;
        case 17:
            col = HardMix_id48(c0, c1);
            break;
        case 18:
            col = Freeze_id49(c0, c1);
            break;
        case 19:
            col = Pinlight_id50(c0, c1);
            break;
        case 20:
            col = Hardlight_id51(c0, c1);
            break;
        case 21:
            col = VividLight_id52(c0, c1);
            break;
        case 22:
            col = LinearLight_id53(c0, c1);
            break;
        case 23:
            col = Difference_id54(c0, c1);
            break;
        case 24:
            col = Exclusion_id55(c0, c1);
            break;
        case 25:
            col = Subtract_id56(c0, c1);
            break;
        case 26:
            col = Divide_id57(c0, c1);
            break;
        case 27:
            col = Negation_id58(c0, c1);
            break;
        case 28:
            col = AdditiveSubstractive_id59(c0, c1);
            break;
        case 29:
            col = Heat_id60(c0, c1);
            break;
        case 30:
            col = Phoenix_id61(c0, c1);
            break;
        case 31:
            col = GrainExtract_id62(c0, c1);
            break;
        case 32:
            col = GrainMerge_id63(c0, c1);
            break;
        case 33:
            col = Hue_id64(c0, c1);
            break;
        case 34:
            col = Saturation_id65(c0, c1);
            break;
        case 35:
            col = Color_id66(c0, c1);
            break;
        case 36:
            col = Lightness_id67(c0, c1);
            break;
        case 37:
            col = Value_id68(c0, c1);
            break;
        case 38:
            col = Red_id69(c0, c1);
            break;
        case 39:
            col = Green_id70(c0, c1);
            break;
        case 40:
            col = Blue_id71(c0, c1);
            break;
    }
    return (computeAlpha) ? ComputeAlpha_id30(c1, c0, col) : col;
}
float2 CreateCircle_id75(float2 center, float2 size, float factor, float phase, float index, float count)
{
    float angle = (index / count) * factor * 6.28319 + phase * 6.28319;
    float2 pos = FromPolar_id74(angle, 1.0);
    pos *= size * 0.5;
    pos += center;
    return pos;
}
float2 Compute_id81()
{
    return InputValue_id95;
}
float2 Compute_id80()
{
    return InputValue_id98;
}
float Compute_id79()
{
    return InputValue_id97;
}
float Compute_id78()
{
    return InputValue_id96;
}
float4 Compute_id77()
{
    return InputValue_id94;
}
float4 Filter_id76(inout PS_STREAMS streams, float4 tex0col)
{
    float2 uv = streams.TexCoord_id62;
    float factor = Compute_id78();
    float phase = Compute_id79();
    float2 size = Compute_id80();
    float2 center = Compute_id81();
    float4 c = 0;
    float2 shift = 0;

    for (int i = 0; i < Count_id88; i++)
    {
        shift = CreateCircle_id75(center, size, factor, phase, i, Count_id88);
        c = Blend_id72(c, Texture0_id14.SampleLevel(LinearRepeatSampler_id50, streams.TexCoord_id62 + shift, 0), 1.0, true, type_id93);
    }
    return c;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id76(streams, col), Compute_id77());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
