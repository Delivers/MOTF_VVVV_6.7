/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin Metallica_Internal_TextureFX [{Angle = InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>}, {Brightness = InputFloat2<ShaderFX.InputValueFloat2.i3,PerUpdate>}, {BumpAmount = InputFloat2<ShaderFX.InputValueFloat2.i1,PerUpdate>}, {BumpGamma = InputFloat2<ShaderFX.InputValueFloat2.i2,PerUpdate>}, {ColorA = InputFloat4<ShaderFX.InputValueFloat4_Color,PerUpdate>}, {ColorB = InputFloat4<ShaderFX.InputValueFloat4_Color.i1,PerUpdate>}, {Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {Emboss = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}, {MaxRadius = InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>}, {Shape = InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>}]
@P ColorA: InputFloat4<ShaderFX.InputValueFloat4_Color,PerUpdate>
@P ColorB: InputFloat4<ShaderFX.InputValueFloat4_Color.i1,PerUpdate>
@P Angle: InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>
@P BumpAmount: InputFloat2<ShaderFX.InputValueFloat2.i1,PerUpdate>
@P BumpGamma: InputFloat2<ShaderFX.InputValueFloat2.i2,PerUpdate>
@P Brightness: InputFloat2<ShaderFX.InputValueFloat2.i3,PerUpdate>
@P Emboss: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P Shape: InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>
@P MaxRadius: InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 96]
@C    InputValue_id97 => ShaderFX.InputValueFloat4
@C    InputValue_id98 => ShaderFX.InputValueFloat2
@C    InputValue_id99 => ShaderFX.InputValueFloat2.i3
@C    InputValue_id100 => ShaderFX.InputValueFloat2.i1
@C    InputValue_id101 => ShaderFX.InputValueFloat2.i2
@C    InputValue_id102 => ShaderFX.InputValueFloat4_Color
@C    InputValue_id103 => ShaderFX.InputValueFloat4_Color.i1
@C    InputValue_id104 => ShaderFX.InputValueFloat
@C    InputValue_id105 => ShaderFX.InputValueFloat.i2
@C    InputValue_id106 => ShaderFX.InputValueFloat.i1
cbuffer PerView [Size: 32]
@C    NearClipPlane_id74 => Camera.NearClipPlane
@C    FarClipPlane_id75 => Camera.FarClipPlane
@C    ZProjection_id76 => Camera.ZProjection
@C    ViewSize_id77 => Camera.ViewSize
@C    AspectRatio_id78 => Camera.AspectRatio
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    PerView => PerView [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    Metallica_Internal_TextureFX => c3d601d676ffc4674373786d2420a05e
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    ComputeFloat2 => 4826dbf2e774b7283c93b6121c851c5d
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat2 => d6238a7d677592382c8158617d803399
@S    DeclFloat2 => d5fe6f879293db53179d13cf4b1d1f3d
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 254 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_393fa111eb484384c3f9be74ab3467c4.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 258
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 2d5aa5026e491cbefd01228829189733
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id97;            // Offset:    0 Size:    16
//   float2 InputValue_id98;            // Offset:   16 Size:     8
//   float2 InputValue_id99;            // Offset:   24 Size:     8
//   float2 InputValue_id100;           // Offset:   32 Size:     8
//   float2 InputValue_id101;           // Offset:   40 Size:     8
//   float4 InputValue_id102;           // Offset:   48 Size:    16
//   float4 InputValue_id103;           // Offset:   64 Size:    16
//   float InputValue_id104;            // Offset:   80 Size:     4
//   float InputValue_id105;            // Offset:   84 Size:     4
//   float InputValue_id106;            // Offset:   88 Size:     4
//
// }
//
// cbuffer PerView
// {
//
//   float NearClipPlane_id74;          // Offset:    0 Size:     4 [unused]
//      = 0x3f800000 
//   float FarClipPlane_id75;           // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   float2 ZProjection_id76;           // Offset:    8 Size:     8 [unused]
//   float2 ViewSize_id77;              // Offset:   16 Size:     8
//   float AspectRatio_id78;            // Offset:   24 Size:     4 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Sampler0_id52                     sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[6], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 8
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 233 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_393fa111eb484384c3f9be74ab3467c4.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 201
max r1.x, cb1[1].y, cb1[1].x
log r1.y, r1.x  // r1.y <- lod

#line 205
mad r1.z, -cb0[5].y, r1.y, l(1.000000)
add r1.z, -r1.z, r1.y
min r1.z, r1.z, l(14.000000)

#line 212
div r2.xy, cb1[1].xxxx, cb1[1].xyxx
sqrt r2.xy, r2.xyxx

#line 205
mov r2.zw, l(0,0,0,0)  // r2.z <- col.x; r2.w <- col.y
mov r1.w, l(0)  // r1.w <- col.z
mov r3.xy, l(0,0,0,0)  // r3.x <- kk; r3.y <- i
loop 
  ge r3.z, r3.y, r1.z
  breakc_nz r3.z

#line 207
  exp r3.z, r3.y
  div r3.z, r3.z, r1.x  // r3.z <- off.x

#line 209
  mad r3.w, r3.y, cb0[5].z, -r1.y
  exp r3.w, r3.w
  div r3.w, l(1.000000, 1.000000, 1.000000, 1.000000), r3.w
  mad_sat r4.x, cb0[5].y, r1.y, -r3.y
  mul r4.y, r3.w, r4.x  // r4.y <- k

#line 211
  mad r5.xyzw, -r3.zzzz, l(0.500000, 0.000000, 0.000000, 0.500000), v1.xyxy

#line 210
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r5.xyxx, t0.xyzw, s0, r3.y

#line 182
  max r4.z, r6.z, r6.y
  max r4.z, r4.z, r6.x  // r4.z <- <mx_id29 return value>

#line 211
  mad r6.xyzw, r3.zzzz, l(0.500000, 0.000000, 0.000000, 0.500000), v1.xyxy

#line 210
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r6.xyxx, t0.xyzw, s0, r3.y

#line 182
  max r3.z, r7.z, r7.y
  max r3.z, r3.z, r7.x  // r3.z <- <mx_id29 return value>

#line 210
  add r5.x, -r3.z, r4.z  // r5.x <- dx

#line 211
  sample_l_indexable(texture2d)(float,float,float,float) r7.xyz, r5.zwzz, t0.xyzw, s0, r3.y

#line 182
  max r3.z, r7.z, r7.y
  max r3.z, r3.z, r7.x  // r3.z <- <mx_id29 return value>

#line 211
  sample_l_indexable(texture2d)(float,float,float,float) r6.xyz, r6.zwzz, t0.xyzw, s0, r3.y

#line 182
  max r4.z, r6.z, r6.y
  max r4.z, r4.z, r6.x  // r4.z <- <mx_id29 return value>

#line 211
  add r5.y, r3.z, -r4.z  // r5.y <- dy

#line 212
  mul r4.zw, r2.xxxy, r5.xxxy
  mad r2.zw, r4.zzzw, r4.yyyy, r2.zzzw

#line 213
  mul r4.yz, r4.yyyy, r5.xxyx
  dp2 r3.z, r4.yzyy, r4.yzyy
  sqrt r3.z, r3.z
  add r1.w, r1.w, r3.z

#line 214
  mad r3.x, r3.w, r4.x, r3.x

#line 215
  add r3.y, r3.y, l(1.000000)
endloop 

#line 216
mul r1.x, |r1.w|, l(0.100000)
log r1.x, r1.x
mul r1.x, r1.x, l(0.300000)
exp r1.x, r1.x
mad r1.x, r1.x, l(10.000000), l(0.000000)
div r1.xy, r2.zwzz, r1.xxxx  // r1.x <- col.x; r1.y <- col.y

#line 217
log r1.z, |r3.x|
mul r1.z, r1.z, l(0.700000)
exp r1.z, r1.z
div r1.z, cb0[5].x, r1.z
mul r1.z, r1.z, l(8.000000)  // r1.z <- dd

#line 219
mul r1.xy, r1.zzzz, r1.xyxx

#line 222
lt r1.zw, l(0.000000, 0.000000, 0.000000, 0.000000), r1.xxxy
lt r2.xy, r1.xyxx, l(0.000000, 0.000000, 0.000000, 0.000000)
iadd r1.zw, -r1.zzzw, r2.xxxy
itof r1.zw, r1.zzzw
min r2.xy, |r1.xyxx|, l(1.000000, 1.000000, 0.000000, 0.000000)
mad r2.zw, r2.xxxy, l(0.000000, 0.000000, -2.000000, -2.000000), l(0.000000, 0.000000, 3.000000, 3.000000)
mul r2.xy, r2.xyxx, r2.xyxx
mul r2.xy, r2.xyxx, r2.zwzz
sqrt r2.xy, r2.xyxx
mul r2.xy, r2.xyxx, cb0[2].zwzz
exp r2.xy, r2.xyxx
log r1.xy, |r1.xyxx|
mul r1.xy, r1.xyxx, r2.xyxx
exp r1.xy, r1.xyxx
mul r1.xy, r1.xyxx, r1.zwzz
mul r1.xy, r1.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r1.x <- dir.x; r1.y <- dir.y

#line 227
exp r1.zw, cb0[1].zzzw

#line 226
mul r2.xyz, r1.zzzz, cb0[3].xyzx

#line 153
mul r1.z, cb0[1].x, l(6.283185)  // r1.z <- a

#line 154
sincos r3.x, r4.x, r1.z
mul r1.z, r1.y, r3.x
mad r1.z, r4.x, r1.x, r1.z  // r1.z <- <r2d_id30 return value>.x

#line 226
mad r2.w, r1.z, cb0[2].x, l(0.500000)
mad r2.xyz, r2.wwww, -r2.xyzx, r2.xyzx  // r2.x <- col.x; r2.y <- col.y; r2.z <- col.z

#line 227
mul r3.xyz, r1.wwww, cb0[4].xyzx
add r1.w, cb0[1].y, l(0.250000)

#line 153
mul r1.w, r1.w, l(6.283185)

#line 154
sincos r4.x, r5.x, r1.w
mul r1.y, r1.y, r4.x
mad r1.x, r5.x, r1.x, r1.y  // r1.x <- <r2d_id30 return value>.x

#line 227
mad r1.x, r1.x, cb0[2].y, l(0.500000)
mad r1.xyw, r1.xxxx, -r3.xyxz, r3.xyxz
add r1.z, -|r1.z|, l(1.000000)
mad r1.xyz, r1.xywx, r1.zzzz, r2.xyzx  // r1.x <- col.x; r1.y <- col.y; r1.z <- col.z

#line 238
add r1.xyz, -r0.xyzx, r1.xyzx
mov r1.w, l(0)
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 247
ret 
// Approximately 96 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id97;
    float2 InputValue_id98;
    float2 InputValue_id99;
    float2 InputValue_id100;
    float2 InputValue_id101;
    float4 InputValue_id102;
    float4 InputValue_id103;
    float InputValue_id104;
    float InputValue_id105;
    float InputValue_id106;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float4 Compute_id34()
{
    return InputValue_id103;
}
float2 r2d_id30(float2 x, float a)
{
    a *= acos(-1) * 2;
    return float2(cos(a) * x.x + sin(a) * x.y, cos(a) * x.y - sin(a) * x.x);
}
float4 Compute_id33()
{
    return InputValue_id102;
}
float2 Compute_id41()
{
    return InputValue_id99;
}
float2 Compute_id40()
{
    return InputValue_id100;
}
float2 Compute_id39()
{
    return InputValue_id98;
}
float2 Compute_id38()
{
    return InputValue_id101;
}
float Compute_id37()
{
    return InputValue_id104;
}
float mx_id29(float3 p)
{
    return max(p.x, max(p.y, p.z));
}
float Compute_id36()
{
    return InputValue_id106;
}
float Compute_id35()
{
    return InputValue_id105;
}
float4 Compute_id32()
{
    return InputValue_id97;
}
float4 Filter_id31(inout PS_STREAMS streams, float4 tex0col)
{
    float2 uv = streams.TexCoord_id62;
    float2 R = ViewSize_id77;
    float4 col = 0;
    float lod = log2(max(R.x, R.y));
    float kk = 0;
    float maxRadius = Compute_id35();

    for (float i = 0; i < min(lod - (1.0 - maxRadius * lod), 14); i++)
    {
        float2 off = pow(2, i) / max(R.x, R.y);
        off *= 0.5;
        float k = 1. / pow(2, i * Compute_id36() - lod) * saturate(maxRadius * lod - i);
        float dx = (mx_id29(Texture0_id14.SampleLevel(Sampler0_id52, uv - off * float2(1, 0), i).xyz) - mx_id29(Texture0_id14.SampleLevel(Sampler0_id52, uv + off * float2(1, 0), i).xyz));
        float dy = (mx_id29(Texture0_id14.SampleLevel(Sampler0_id52, uv - off * float2(0, 1), i).xyz) - mx_id29(Texture0_id14.SampleLevel(Sampler0_id52, uv + off * float2(0, 1), i).xyz));
        col.xy += float2(dx, dy) * sqrt(R.x / R) * k;
        col.z += length(float2(dx, dy) * k);
        kk += k;
    }
    col.xy /= pow(abs(col.z) * .1, .3) / .1 + .00000001;
    float dd = Compute_id37() / pow(abs(kk), .7) * 8;
    col.z = pow(saturate(1 - dd * length(col.xy)), .5);
    col.xy = col.xy * dd;
    float2 dir = col.xy;
    col = 0;
    dir = sign(dir) * pow(abs(dir), (pow(2, Compute_id38() * sqrt(smoothstep(0, 1, 1 * abs(dir)))))) / 2;
    float2 angle = Compute_id39();
    float2 bumpAmount = Compute_id40();
    float2 brightness = Compute_id41();
    col += lerp(Compute_id33() * pow(2, brightness.x), 0, r2d_id30(dir, angle.x).x * bumpAmount.x + .5);
    col += lerp(Compute_id34() * pow(2, brightness.y), 0, r2d_id30(dir, angle.y + .25).x * bumpAmount.y + .5) * (1 - abs(r2d_id30(dir, angle.x).x));
    col.a = Texture0_id14.SampleLevel(Sampler0_id52, uv, 0).a;
    return col;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id31(streams, col), Compute_id32());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
