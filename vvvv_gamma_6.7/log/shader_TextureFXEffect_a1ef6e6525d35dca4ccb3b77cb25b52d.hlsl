/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin SiftHSV_Internal_TextureFX [{Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {HueTol = InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>}, {NONMatch = InputFloat<ShaderFX.InputValueFloat.i3,PerUpdate>}, {RefCol = InputFloat4<ShaderFX.InputValueFloat4_Color,PerUpdate>}, {ReferenceColor = InputFloat4<ShaderFX.InputValueFloat4_Color.i3,PerUpdate>}, {ReplaceMatchRefColor = InputFloat4<ShaderFX.InputValueFloat4_Color.i1,PerUpdate>}, {ReplaceNONmatchRefColor = InputFloat4<ShaderFX.InputValueFloat4_Color.i2,PerUpdate>}, {SatTol = InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>}, {ValTol = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}]
@P ValTol: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P SatTol: InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>
@P HueTol: InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>
@P NONMatch: InputFloat<ShaderFX.InputValueFloat.i3,PerUpdate>
@P RefCol: InputFloat4<ShaderFX.InputValueFloat4_Color,PerUpdate>
@P ReplaceMatchRefColor: InputFloat4<ShaderFX.InputValueFloat4_Color.i1,PerUpdate>
@P ReplaceNONmatchRefColor: InputFloat4<ShaderFX.InputValueFloat4_Color.i2,PerUpdate>
@P ReferenceColor: InputFloat4<ShaderFX.InputValueFloat4_Color.i3,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 112]
@C    InputValue_id98 => ShaderFX.InputValueFloat4
@C    InputValue_id99 => ShaderFX.InputValueFloat.i2
@C    InputValue_id100 => ShaderFX.InputValueFloat.i3
@C    InputValue_id101 => ShaderFX.InputValueFloat4_Color
@C    InputValue_id102 => ShaderFX.InputValueFloat4_Color.i3
@C    InputValue_id103 => ShaderFX.InputValueFloat4_Color.i1
@C    InputValue_id104 => ShaderFX.InputValueFloat4_Color.i2
@C    InputValue_id105 => ShaderFX.InputValueFloat.i1
@C    InputValue_id106 => ShaderFX.InputValueFloat
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    SwitchMatchColTex_id96 => SiftHSV_Internal_TextureFX.SwitchMatchColTex
@C    SwitchNONmatchColTex_id97 => SiftHSV_Internal_TextureFX.SwitchNONmatchColTex
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    Texture2_id18 => Texturing.Texture2 [Stage: Pixel, Slot: (2-2)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    SiftHSV_Internal_TextureFX => 27b10f16f333f0cd82a794f2d1bfa0bb
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 250 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_a1ef6e6525d35dca4ccb3b77cb25b52d.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 254
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => b275b3769a485e245bde29cc6ed88e96
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id98;            // Offset:    0 Size:    16
//   float InputValue_id99;             // Offset:   16 Size:     4
//   float InputValue_id100;            // Offset:   20 Size:     4 [unused]
//   float4 InputValue_id101;           // Offset:   32 Size:    16
//   float4 InputValue_id102;           // Offset:   48 Size:    16
//   float4 InputValue_id103;           // Offset:   64 Size:    16
//   float4 InputValue_id104;           // Offset:   80 Size:    16
//   float InputValue_id105;            // Offset:   96 Size:     4
//   float InputValue_id106;            // Offset:  100 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   bool SwitchMatchColTex_id96;       // Offset:   80 Size:     4
//   bool SwitchNONmatchColTex_id97;    // Offset:   84 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// Sampler0_id52                     sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// Texture2_id18                     texture  float4          2d             t2      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[7], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 151 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_a1ef6e6525d35dca4ccb3b77cb25b52d.hlsl"
lt r0.x, cb0[3].y, cb0[3].z
mov r1.xy, cb0[3].zyzz
mov r1.zw, l(0,0,-1.000000,0.666667)
mov r2.xy, cb0[3].yzyy
mov r2.zw, l(0,0,0,-0.333333)
movc r0.xyzw, r0.xxxx, r1.xywz, r2.xywz  // r0.x <- P.x; r0.y <- P.y; r0.z <- P.w; r0.w <- P.z

#line 152
lt r1.x, cb0[3].x, r0.x
mov r2.z, r0.w
mov r0.w, cb0[3].x
mov r2.xyw, r0.wywx
movc r0.xyzw, r1.xxxx, r0.xyzw, r2.xyzw  // r0.x <- Q.x; r0.y <- Q.y; r0.z <- Q.z; r0.w <- Q.w

#line 153
min r1.x, r0.y, r0.w
add r1.x, r0.x, -r1.x  // r1.x <- C

#line 154
mad r1.y, r1.x, l(6.000000), l(0.000000)
add r0.y, -r0.y, r0.w
div r0.y, r0.y, r1.y
add r0.y, r0.z, r0.y

#line 160
add r0.x, r0.x, l(0.000000)
div r0.x, r1.x, r0.x  // r0.x <- S

#line 151
mov r1.zw, l(0,0,-1.000000,0.666667)
mov r2.zw, l(0,0,0,-0.333333)

#line 221
sample_l_indexable(texture2d)(float,float,float,float) r3.xyz, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r3.x <- Result.x; r3.y <- Result.y; r3.z <- Result.z

#line 151
mov r1.xy, r3.zyzz
mov r2.xy, r1.yxyy
lt r0.z, r1.y, r3.z
movc r2.xyzw, r0.zzzz, r1.xyzw, r2.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 152
lt r0.z, r3.x, r2.x
mov r4.xyz, r2.xywx
mov r4.w, r3.x
mov r2.xyw, r4.wywx
movc r2.xyzw, r0.zzzz, r4.xyzw, r2.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 153
min r0.z, r2.y, r2.w
add r0.z, -r0.z, r2.x  // r0.z <- C

#line 154
mad r0.w, r0.z, l(6.000000), l(0.000000)
add r1.x, -r2.y, r2.w
div r0.w, r1.x, r0.w
add r0.w, r2.z, r0.w

#line 160
add r1.x, r2.x, l(0.000000)
div r0.z, r0.z, r1.x  // r0.z <- S

#line 185
add r0.y, -|r0.y|, |r0.w|
add r0.y, |r0.y|, -cb0[1].x
div r1.x, l(1.000000, 1.000000, 1.000000, 1.000000), -cb0[1].x
mul_sat r0.y, r0.y, r1.x
mad r1.z, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r1.z  // r0.y <- SWITCH.x

#line 186
add r0.x, -r0.x, r0.z
add r0.x, |r0.x|, -cb0[6].x

#line 187
div r1.zw, l(1.000000, 1.000000, 1.000000, 1.000000), -cb0[6].xxxy

#line 186
mul_sat r0.x, r0.x, r1.z
mad r2.x, r0.x, l(-2.000000), l(3.000000)
mul r0.x, r0.x, r0.x
mul r0.x, r0.x, r2.x
mul r0.x, r0.x, r0.y  // r0.x <- SWITCH.x

#line 151
max r0.y, r3.z, r1.y  // r0.y <- P.x

#line 152
max r0.y, r0.y, r3.x  // r0.y <- Q.x

#line 151
max r1.y, cb0[3].z, cb0[3].y  // r1.y <- P.x

#line 152
max r1.y, r1.y, cb0[3].x  // r1.y <- Q.x

#line 187
add r1.y, r0.y, -r1.y
add r1.y, |r1.y|, -cb0[6].y
mul_sat r1.y, r1.w, r1.y
mad r2.x, r1.y, l(-2.000000), l(3.000000)
mul r1.y, r1.y, r1.y
mul r1.y, r1.y, r2.x
mul r0.x, r0.x, r1.y

#line 151
lt r1.y, cb0[2].y, cb0[2].z
mov r2.xy, cb0[2].zyzz
mov r2.zw, l(0,0,-1.000000,0.666667)
mov r3.xy, cb0[2].yzyy
mov r3.zw, l(0,0,0,-0.333333)
movc r2.xyzw, r1.yyyy, r2.xywz, r3.xywz  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.w; r2.w <- P.z

#line 152
lt r1.y, cb0[2].x, r2.x
mov r3.z, r2.w
mov r2.w, cb0[2].x
mov r3.xyw, r2.wywx
movc r2.xyzw, r1.yyyy, r2.xyzw, r3.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 153
min r1.y, r2.y, r2.w
add r1.y, -r1.y, r2.x  // r1.y <- C

#line 154
mad r3.x, r1.y, l(6.000000), l(0.000000)
add r2.y, -r2.y, r2.w
div r2.y, r2.y, r3.x
add r2.y, r2.z, r2.y

#line 160
add r2.x, r2.x, l(0.000000)
div r1.y, r1.y, r2.x  // r1.y <- S

#line 186
add r0.z, r0.z, -r1.y
add r0.z, |r0.z|, -cb0[6].x

#line 185
add r0.w, |r0.w|, -|r2.y|
add r0.w, |r0.w|, -cb0[1].x

#line 186
mul_sat r0.zw, r1.zzzx, r0.zzzw

#line 185
mad r1.x, r0.w, l(-2.000000), l(3.000000)
mul r0.w, r0.w, r0.w
mul r0.w, r0.w, r1.x  // r0.w <- SWITCH.x

#line 186
mad r1.x, r0.z, l(-2.000000), l(3.000000)
mul r0.z, r0.z, r0.z
mul r0.z, r0.z, r1.x
mul r0.z, r0.z, r0.w  // r0.z <- SWITCH.x

#line 151
max r0.w, cb0[2].z, cb0[2].y  // r0.w <- P.x

#line 152
max r0.w, r0.w, cb0[2].x  // r0.w <- Q.x

#line 187
add r0.y, -r0.w, r0.y
add r0.y, |r0.y|, -cb0[6].y
mul_sat r0.y, r1.w, r0.y
mad r0.w, r0.y, l(-2.000000), l(3.000000)
mul r0.y, r0.y, r0.y
mul r0.y, r0.y, r0.w

#line 224
mad r0.y, -r0.z, r0.y, l(1.000000)

#line 223
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t2.xyzw, s0, l(0.000000)
add r1.xyzw, r1.xyzw, -cb0[5].xyzw
movc r0.zw, cb1[5].xxxy, l(0,0,1.000000,1.000000), l(0,0,0,0)
mad r1.xyzw, r0.wwww, r1.xyzw, cb0[5].xyzw  // r1.x <- NONmatch.x; r1.y <- NONmatch.y; r1.z <- NONmatch.z; r1.w <- NONmatch.w

#line 224
mul r1.xyzw, r0.yyyy, r1.xyzw

#line 222
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t1.xyzw, s0, l(0.000000)
add r2.xyzw, r2.xyzw, -cb0[4].xyzw
mad r2.xyzw, r0.zzzz, r2.xyzw, cb0[4].xyzw  // r2.x <- Match.x; r2.y <- Match.y; r2.z <- Match.z; r2.w <- Match.w

#line 224
mad r0.xyzw, r2.xyzw, r0.xxxx, r1.xyzw  // r0.x <- Result.x; r0.y <- Result.y; r0.z <- Result.z; r0.w <- Result.w

#line 229
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s1, l(0.000000)  // r1.x <- <InTex0_id26 return value>.x; r1.y <- <InTex0_id26 return value>.y; r1.z <- <InTex0_id26 return value>.z; r1.w <- <InTex0_id26 return value>.w

#line 234
add r0.xyzw, r0.xyzw, -r1.xyzw
mad o0.xyzw, cb0[0].xyzw, r0.xyzw, r1.xyzw

#line 243
ret 
// Approximately 118 instruction slots used
***************************
*************************/
static const float Epsilon_id83 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id98;
    float InputValue_id99;
    float InputValue_id100;
    float4 InputValue_id101;
    float4 InputValue_id102;
    float4 InputValue_id103;
    float4 InputValue_id104;
    float InputValue_id105;
    float InputValue_id106;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    bool SwitchMatchColTex_id96;
    bool SwitchNONmatchColTex_id97;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 RGBtoHCV_id11(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id83) + Q.z);
    return float3(H, C, Q.x);
}
float3 RGBtoHSV_id12(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id83);
    return float3(HCV.x, S, HCV.z);
}
float4 Compute_id35()
{
    return InputValue_id101;
}
float4 SiftHSV_id29(float4 InputColor, float4 ReferenceColor, float HueRange, float SatRange, float ValRange)
{
    float InputHue = RGBtoHSV_id12(InputColor.rgb).x;
    float InputSat = RGBtoHSV_id12(InputColor.rgb).y;
    float InputVal = RGBtoHSV_id12(InputColor.rgb).z;
    float ReferenceHue = RGBtoHSV_id12(ReferenceColor.rgb).x;
    float ReferenceSat = RGBtoHSV_id12(ReferenceColor.rgb).y;
    float ReferenceVal = RGBtoHSV_id12(ReferenceColor.rgb).z;
    float4 Result;
    float4 SWITCH = float4(1.0f, 1.0f, 1.0f, 1.0f);
    if (((InputHue - ReferenceHue + 2) % 1 - 0.5f) <= (HueRange - 0.5f) && (abs(InputSat - ReferenceSat) < SatRange) && (abs(InputVal - ReferenceVal) < ValRange))
    {
        SWITCH.rgb = 1.0f;
    }
    else
    {
        SWITCH.rgb = 0.0f;
    }
    SWITCH = smoothstep(HueRange, 0, abs(InputHue - ReferenceHue));
    SWITCH *= smoothstep(SatRange, 0, abs(InputSat - ReferenceSat));
    SWITCH *= smoothstep(ValRange, 0, abs(InputVal - ReferenceVal));
    return SWITCH;
}
float Compute_id38()
{
    return InputValue_id106;
}
float Compute_id37()
{
    return InputValue_id105;
}
float Compute_id36()
{
    return InputValue_id99;
}
float4 Compute_id34()
{
    return InputValue_id102;
}
float4 Compute_id33()
{
    return InputValue_id104;
}
float4 Compute_id32()
{
    return InputValue_id103;
}
float4 Compute_id31()
{
    return InputValue_id98;
}
float4 Filter_id30(inout PS_STREAMS streams, float4 tex0col)
{
    float2 uv = streams.TexCoord_id62;
    float4 Result = Texture0_id14.SampleLevel(LinearSampler_id44, uv, 0);
    float4 Match = lerp(Compute_id32(), Texture1_id16.SampleLevel(LinearSampler_id44, uv, 0), SwitchMatchColTex_id96);
    float4 NONmatch = lerp(Compute_id33(), Texture2_id18.SampleLevel(LinearSampler_id44, uv, 0), SwitchNONmatchColTex_id97);
    Result = Match * SiftHSV_id29(Result, Compute_id34(), Compute_id36(), Compute_id37(), Compute_id38()) + NONmatch * (1 - SiftHSV_id29(Result, Compute_id35(), Compute_id36(), Compute_id37(), Compute_id38()));
    return Result;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id30(streams, col), Compute_id31());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
