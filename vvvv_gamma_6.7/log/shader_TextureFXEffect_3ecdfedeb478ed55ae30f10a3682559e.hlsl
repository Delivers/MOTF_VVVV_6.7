/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin Blend_Internal_TextureFX [{Fader = InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>}]
@P Fader: InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 16]
@C    InputValue_id90 => ShaderFX.InputValueFloat.i2
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Type_id88 => Blend_Internal_TextureFX.Type
@C    ComputeAlpha_id89 => Blend_Internal_TextureFX.ComputeAlpha
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (0-0)]
@R    Sampler1_id53 => Texturing.Sampler1 [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    Blend_Internal_TextureFX => 6d8cdcd0decc680051d04d94e05a3305
@S    MixerBase => 88c195f9d4dd280a04f669465fefa4c1
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    BlendOperations => 63b352c733fb868f9162fdac1eacd48b
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 541 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_3ecdfedeb478ed55ae30f10a3682559e.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 545
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => f7358785a6f867c54b6dc444716e26d7
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float InputValue_id90;             // Offset:    0 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   int Type_id88;                     // Offset:   80 Size:     4
//   bool ComputeAlpha_id89;            // Offset:   84 Size:     4
//      = 0xffffffff 
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Sampler0_id52                     sampler      NA          NA             s0      1 
// Sampler1_id53                     sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[1], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 519 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_3ecdfedeb478ed55ae30f10a3682559e.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 515
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s1, l(0.000000)  // r1.x <- <InTex1_id27 return value>.x; r1.y <- <InTex1_id27 return value>.y; r1.z <- <InTex1_id27 return value>.z; r1.w <- <InTex1_id27 return value>.w

#line 373
mov_sat r2.x, cb0[0].x
mul r3.w, r1.w, r2.x  // r3.w <- c1.w

#line 374
switch cb1[5].x

#line 377
  case l(0)

#line 379
  mov r3.xyz, r1.xyzx
  mov r4.xyzw, r3.xyzw  // r4.x <- col.x; r4.y <- col.y; r4.z <- col.z; r4.w <- col.w
  break 

#line 380
  case l(1)

#line 364
  mov r3.xyz, r1.xyzx
  add r5.xyzw, r0.xyzw, r3.xyzw
  mul r4.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // r4.x <- <Average_id32 return value>.x; r4.y <- <Average_id32 return value>.y; r4.z <- <Average_id32 return value>.z; r4.w <- <Average_id32 return value>.w

#line 382
  break 

#line 383
  case l(2)

#line 360
  mov r3.xyz, r1.xyzx
  mul r5.xyzw, r0.xyzw, r3.xyzw
  sqrt r4.xyzw, r5.xyzw  // r4.x <- <GeometricMean_id33 return value>.x; r4.y <- <GeometricMean_id33 return value>.y; r4.z <- <GeometricMean_id33 return value>.z; r4.w <- <GeometricMean_id33 return value>.w

#line 385
  break 

#line 386
  case l(3)

#line 207
  mov r3.xyz, r1.xyzx
  min r4.xyzw, r0.xyzw, r3.xyzw  // r4.x <- <Darken_id34 return value>.x; r4.y <- <Darken_id34 return value>.y; r4.z <- <Darken_id34 return value>.z; r4.w <- <Darken_id34 return value>.w

#line 388
  break 

#line 389
  case l(4)

#line 356
  mov r3.xyz, r1.xyzx
  mul r4.xyzw, r0.xyzw, r3.xyzw  // r4.x <- <Multiply_id35 return value>.x; r4.y <- <Multiply_id35 return value>.y; r4.z <- <Multiply_id35 return value>.z; r4.w <- <Multiply_id35 return value>.w

#line 391
  break 

#line 392
  case l(5)

#line 199
  mov r5.xyz, r1.xyzx
  mov r5.w, r3.w
  eq r6.xyzw, r5.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r7.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r7.xyzw, r7.xyzw, r5.xyzw
  add r7.xyzw, -r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  max r7.xyzw, r7.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  mov r5.x, l(0)
  movc r4.xyzw, r6.xyzw, r5.xxxw, r7.xyzw  // r4.x <- <ColorBurn_id36 return value>.x; r4.y <- <ColorBurn_id36 return value>.y; r4.z <- <ColorBurn_id36 return value>.z; r4.w <- <ColorBurn_id36 return value>.w

#line 394
  break 

#line 395
  case l(6)

#line 352
  mov r3.xyz, r1.xyzx
  add r5.xyzw, r0.xyzw, r3.xyzw
  add r4.xyzw, r5.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)  // r4.x <- <LinearBurn_id37 return value>.x; r4.y <- <LinearBurn_id37 return value>.y; r4.z <- <LinearBurn_id37 return value>.z; r4.w <- <LinearBurn_id37 return value>.w

#line 397
  break 

#line 398
  case l(7)

#line 348
  add r2.y, r0.y, r0.x
  add r2.y, r0.z, r2.y
  add r2.z, r1.y, r1.x
  add r2.z, r1.z, r2.z
  lt r2.y, r2.y, r2.z
  mov r3.xyz, r1.xyzx
  movc r4.xyzw, r2.yyyy, r0.xyzw, r3.xyzw  // r4.x <- <DarkerColor_id38 return value>.x; r4.y <- <DarkerColor_id38 return value>.y; r4.z <- <DarkerColor_id38 return value>.z; r4.w <- <DarkerColor_id38 return value>.w

#line 400
  break 

#line 401
  case l(8)

#line 203
  mov r3.xyz, r1.xyzx
  max r4.xyzw, r0.xyzw, r3.xyzw  // r4.x <- <Lighten_id39 return value>.x; r4.y <- <Lighten_id39 return value>.y; r4.z <- <Lighten_id39 return value>.z; r4.w <- <Lighten_id39 return value>.w

#line 403
  break 

#line 404
  case l(9)

#line 344
  add r5.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mov r3.xyz, r1.xyzx
  add r6.xyzw, -r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mad r4.xyzw, -r5.xyzw, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r4.x <- <Screen_id40 return value>.x; r4.y <- <Screen_id40 return value>.y; r4.z <- <Screen_id40 return value>.z; r4.w <- <Screen_id40 return value>.w

#line 406
  break 

#line 407
  case l(10)

#line 340
  mov r3.xyz, r1.xyzx
  add r4.xyzw, r0.xyzw, r3.xyzw  // r4.x <- <Add_id41 return value>.x; r4.y <- <Add_id41 return value>.y; r4.z <- <Add_id41 return value>.z; r4.w <- <Add_id41 return value>.w

#line 409
  break 

#line 410
  case l(11)

#line 336
  add r2.y, r0.y, r0.x
  add r2.y, r0.z, r2.y
  add r2.z, r1.y, r1.x
  add r2.z, r1.z, r2.z
  lt r2.y, r2.z, r2.y
  mov r3.xyz, r1.xyzx
  movc r4.xyzw, r2.yyyy, r0.xyzw, r3.xyzw  // r4.x <- <LighterColor_id42 return value>.x; r4.y <- <LighterColor_id42 return value>.y; r4.z <- <LighterColor_id42 return value>.z; r4.w <- <LighterColor_id42 return value>.w

#line 412
  break 

#line 413
  case l(12)

#line 159
  eq r5.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mov r3.xyz, r1.xyzx
  mul r6.xyzw, r3.xyzw, r3.xyzw
  add r7.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r6.xyzw, r6.xyzw, r7.xyzw
  min r6.xyzw, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r4.xyzw, r5.xyzw, l(1.000000,1.000000,1.000000,1.000000), r6.xyzw  // r4.x <- <Reflect_id47 return value>.x; r4.y <- <Reflect_id47 return value>.y; r4.z <- <Reflect_id47 return value>.z; r4.w <- <Reflect_id47 return value>.w

#line 415
  break 

#line 416
  case l(13)

#line 332
  lt r5.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  mov r3.xyz, r1.xyzx
  mul r6.xyzw, r0.xyzw, r3.xyzw
  add r6.xyzw, r6.xyzw, r6.xyzw
  add r7.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r7.xyzw, r7.xyzw, r7.xyzw
  add r8.xyzw, -r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mad r7.xyzw, -r7.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r4.xyzw, r5.xyzw, r6.xyzw, r7.xyzw  // r4.x <- <Overlay_id44 return value>.x; r4.y <- <Overlay_id44 return value>.y; r4.z <- <Overlay_id44 return value>.z; r4.w <- <Overlay_id44 return value>.w

#line 418
  break 

#line 419
  case l(14)

#line 328
  add r5.xyzw, r0.xyzw, r0.xyzw
  mov r3.xyz, r1.xyzx
  mul r6.xyzw, r0.xyzw, r0.xyzw
  mad r6.xyzw, r5.xyzw, r3.xyzw, r6.xyzw
  mul r5.xyzw, r0.xyzw, r5.xyzw
  mad r4.xyzw, -r5.xyzw, r3.xyzw, r6.xyzw  // r4.x <- <Softlight_id45 return value>.x; r4.y <- <Softlight_id45 return value>.y; r4.z <- <Softlight_id45 return value>.z; r4.w <- <Softlight_id45 return value>.w

#line 421
  break 

#line 422
  case l(15)

#line 195
  mov r3.xyz, r1.xyzx
  add r5.xyzw, -r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r4.xyzw, r0.xyzw, r5.xyzw  // r4.x <- <ColorDodge_id46 return value>.x; r4.y <- <ColorDodge_id46 return value>.y; r4.z <- <ColorDodge_id46 return value>.z; r4.w <- <ColorDodge_id46 return value>.w

#line 424
  break 

#line 425
  case l(16)

#line 159
  mov r5.xyz, r1.xyzx
  mov r5.w, r3.w
  eq r6.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r7.xyzw, r0.xyzw, r0.xyzw
  add r8.xyzw, -r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r7.xyzw, r7.xyzw, r8.xyzw
  min r7.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mov r5.x, l(1.000000)
  movc r4.xyzw, r6.xyzw, r5.xxxw, r7.xyzw  // r4.x <- <Reflect_id47 return value>.x; r4.y <- <Reflect_id47 return value>.y; r4.z <- <Reflect_id47 return value>.z; r4.w <- <Reflect_id47 return value>.w

#line 427
  break 

#line 428
  case l(17)

#line 324
  mov r3.xyz, r1.xyzx
  add r5.xyzw, r0.xyzw, r3.xyzw
  round_ni r4.xyzw, r5.xyzw  // r4.x <- <HardMix_id48 return value>.x; r4.y <- <HardMix_id48 return value>.y; r4.z <- <HardMix_id48 return value>.z; r4.w <- <HardMix_id48 return value>.w

#line 430
  break 

#line 431
  case l(18)

#line 320
  mov r3.xyz, r1.xyzx
  eq r5.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r6.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r6.xyzw, r6.xyzw, r6.xyzw
  div r6.xyzw, r6.xyzw, r3.xyzw
  add r6.xyzw, -r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r4.xyzw, r5.xyzw, l(0,0,0,0), r6.xyzw  // r4.x <- <Freeze_id49 return value>.x; r4.y <- <Freeze_id49 return value>.y; r4.z <- <Freeze_id49 return value>.z; r4.w <- <Freeze_id49 return value>.w

#line 433
  break 

#line 434
  case l(19)

#line 316
  mov r3.xyz, r1.xyzx
  lt r5.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  add r6.xyzw, r3.xyzw, r3.xyzw

#line 207
  min r6.xyzw, r0.xyzw, r6.xyzw  // r6.x <- <Darken_id34 return value>.x; r6.y <- <Darken_id34 return value>.y; r6.z <- <Darken_id34 return value>.z; r6.w <- <Darken_id34 return value>.w

#line 316
  add r7.xyzw, r3.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
  add r7.xyzw, r7.xyzw, r7.xyzw

#line 203
  max r7.xyzw, r0.xyzw, r7.xyzw  // r7.x <- <Lighten_id39 return value>.x; r7.y <- <Lighten_id39 return value>.y; r7.z <- <Lighten_id39 return value>.z; r7.w <- <Lighten_id39 return value>.w

#line 316
  movc r4.xyzw, r5.xyzw, r6.xyzw, r7.xyzw  // r4.x <- <Pinlight_id50 return value>.x; r4.y <- <Pinlight_id50 return value>.y; r4.z <- <Pinlight_id50 return value>.z; r4.w <- <Pinlight_id50 return value>.w

#line 436
  break 

#line 437
  case l(20)

#line 312
  mov r3.xyz, r1.xyzx
  lt r5.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  mul r6.xyzw, r0.xyzw, r3.xyzw
  add r6.xyzw, r6.xyzw, r6.xyzw
  add r7.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  add r7.xyzw, r7.xyzw, r7.xyzw
  add r8.xyzw, -r3.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mad r7.xyzw, -r7.xyzw, r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r4.xyzw, r5.xyzw, r6.xyzw, r7.xyzw  // r4.x <- <Hardlight_id51 return value>.x; r4.y <- <Hardlight_id51 return value>.y; r4.z <- <Hardlight_id51 return value>.z; r4.w <- <Hardlight_id51 return value>.w

#line 439
  break 

#line 440
  case l(21)

#line 308
  mov r3.xyz, r1.xyzx
  lt r5.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  add r6.xyzw, r3.xyzw, r3.xyzw

#line 199
  eq r7.xyzw, r3.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r8.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r8.xyzw, r8.xyzw, r6.xyzw
  add r8.xyzw, -r8.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  max r8.xyzw, r8.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  mov r6.x, l(0)
  movc r6.xyzw, r7.xyzw, r6.xxxw, r8.xyzw  // r6.x <- <ColorBurn_id36 return value>.x; r6.y <- <ColorBurn_id36 return value>.y; r6.z <- <ColorBurn_id36 return value>.z; r6.w <- <ColorBurn_id36 return value>.w

#line 308
  add r7.xyzw, r3.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)

#line 195
  mad r7.xyzw, -r7.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), l(1.000000, 1.000000, 1.000000, 1.000000)
  div r7.xyzw, r0.xyzw, r7.xyzw  // r7.x <- <ColorDodge_id46 return value>.x; r7.y <- <ColorDodge_id46 return value>.y; r7.z <- <ColorDodge_id46 return value>.z; r7.w <- <ColorDodge_id46 return value>.w

#line 308
  movc r4.xyzw, r5.xyzw, r6.xyzw, r7.xyzw  // r4.x <- <VividLight_id52 return value>.x; r4.y <- <VividLight_id52 return value>.y; r4.z <- <VividLight_id52 return value>.z; r4.w <- <VividLight_id52 return value>.w

#line 442
  break 

#line 443
  case l(22)

#line 304
  mov r3.xyz, r1.xyzx
  lt r5.xyzw, r3.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  mad r6.xyzw, r3.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), r0.xyzw
  add r6.xyzw, r6.xyzw, l(-1.000000, -1.000000, -1.000000, -1.000000)
  max r6.xyzw, r6.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
  add r7.xyzw, r3.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
  mad r7.xyzw, r7.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), r0.xyzw
  min r7.xyzw, r7.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r4.xyzw, r5.xyzw, r6.xyzw, r7.xyzw  // r4.x <- <LinearLight_id53 return value>.x; r4.y <- <LinearLight_id53 return value>.y; r4.z <- <LinearLight_id53 return value>.z; r4.w <- <LinearLight_id53 return value>.w

#line 445
  break 

#line 446
  case l(23)

#line 300
  mov r3.xyz, r1.xyzx
  add r4.xyzw, r0.xyzw, -r3.xyzw

#line 448
  mov r4.xyzw, |r4.xyzw|  // r4.x <- col.x; r4.y <- col.y; r4.z <- col.z; r4.w <- col.w
  break 

#line 449
  case l(24)

#line 296
  mov r3.xyz, r1.xyzx
  add r5.xyzw, r0.xyzw, r3.xyzw
  mul r6.xyzw, r0.xyzw, r3.xyzw
  mad r4.xyzw, -r6.xyzw, l(2.000000, 2.000000, 2.000000, 2.000000), r5.xyzw  // r4.x <- <Exclusion_id55 return value>.x; r4.y <- <Exclusion_id55 return value>.y; r4.z <- <Exclusion_id55 return value>.z; r4.w <- <Exclusion_id55 return value>.w

#line 451
  break 

#line 452
  case l(25)

#line 292
  mov r3.xyz, r1.xyzx
  add r4.xyzw, r0.xyzw, -r3.xyzw  // r4.x <- <Subtract_id56 return value>.x; r4.y <- <Subtract_id56 return value>.y; r4.z <- <Subtract_id56 return value>.z; r4.w <- <Subtract_id56 return value>.w

#line 454
  break 

#line 455
  case l(26)

#line 288
  mov r3.xyz, r1.xyzx
  div r4.xyzw, r0.xyzw, r3.xyzw  // r4.x <- <Divide_id57 return value>.x; r4.y <- <Divide_id57 return value>.y; r4.z <- <Divide_id57 return value>.z; r4.w <- <Divide_id57 return value>.w

#line 457
  break 

#line 458
  case l(27)

#line 284
  add r5.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mov r3.xyz, r1.xyzx
  add r5.xyzw, -r3.xyzw, r5.xyzw
  add r4.xyzw, -|r5.xyzw|, l(1.000000, 1.000000, 1.000000, 1.000000)  // r4.x <- <Negation_id58 return value>.x; r4.y <- <Negation_id58 return value>.y; r4.z <- <Negation_id58 return value>.z; r4.w <- <Negation_id58 return value>.w

#line 460
  break 

#line 461
  case l(28)

#line 280
  sqrt r5.xyzw, r0.xyzw
  mov r3.xyz, r1.xyzx
  add r4.xyzw, -r5.xyzw, r3.xyzw  // r4.x <- <AdditiveSubstractive_id59 return value>.x; r4.y <- <AdditiveSubstractive_id59 return value>.y; r4.z <- <AdditiveSubstractive_id59 return value>.z; r4.w <- <AdditiveSubstractive_id59 return value>.w

#line 463
  break 

#line 464
  case l(29)

#line 159
  eq r5.xyzw, r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mov r3.xyz, r1.xyzx
  mul r6.xyzw, r3.xyzw, r3.xyzw
  add r7.xyzw, -r0.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r6.xyzw, r6.xyzw, r7.xyzw
  min r6.xyzw, r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)

#line 276
  add r6.xyzw, -r6.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  movc r4.xyzw, r5.xyzw, l(0,0,0,0), r6.xyzw  // r4.x <- <Heat_id60 return value>.x; r4.y <- <Heat_id60 return value>.y; r4.z <- <Heat_id60 return value>.z; r4.w <- <Heat_id60 return value>.w

#line 466
  break 

#line 467
  case l(30)

#line 272
  mov r3.xyz, r1.xyzx
  min r5.xyzw, r0.xyzw, r3.xyzw
  max r6.xyzw, r0.xyzw, r3.xyzw
  add r5.xyzw, r5.xyzw, -r6.xyzw
  add r4.xyzw, r5.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)  // r4.x <- <Phoenix_id61 return value>.x; r4.y <- <Phoenix_id61 return value>.y; r4.z <- <Phoenix_id61 return value>.z; r4.w <- <Phoenix_id61 return value>.w

#line 469
  break 

#line 470
  case l(31)

#line 268
  mov r3.xyz, r1.xyzx
  add r5.xyzw, r0.xyzw, -r3.xyzw
  add r4.xyzw, r5.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)  // r4.x <- <GrainExtract_id62 return value>.x; r4.y <- <GrainExtract_id62 return value>.y; r4.z <- <GrainExtract_id62 return value>.z; r4.w <- <GrainExtract_id62 return value>.w

#line 472
  break 

#line 473
  case l(32)

#line 264
  mov r3.xyz, r1.xyzx
  add r5.xyzw, r0.xyzw, -r3.xyzw
  add r4.xyzw, r5.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)  // r4.x <- <GrainMerge_id63 return value>.x; r4.y <- <GrainMerge_id63 return value>.y; r4.z <- <GrainMerge_id63 return value>.z; r4.w <- <GrainMerge_id63 return value>.w

#line 475
  break 

#line 476
  case l(33)

#line 151
  lt r2.y, r0.y, r0.z
  movc r3.xy, r2.yyyy, r0.zyzz, r0.yzyy  // r3.x <- P.x; r3.y <- P.y

#line 152
  lt r2.y, r0.x, r3.x
  mov r3.z, r0.x
  movc r2.yzw, r2.yyyy, r3.xxyz, r3.zzyx  // r2.y <- Q.x; r2.z <- Q.y; r2.w <- Q.w

#line 153
  min r2.z, r2.z, r2.w
  add r2.z, -r2.z, r2.y  // r2.z <- C

#line 185
  mad r2.y, -r2.z, l(0.500000), r2.y  // r2.y <- L

#line 151
  lt r2.w, r1.y, r1.z
  mov r5.xy, r1.zyzz
  mov r5.zw, l(0,0,-1.000000,0.666667)
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,0,-0.333333)
  movc r5.xyzw, r2.wwww, r5.xyzw, r6.xyzw  // r5.x <- P.x; r5.y <- P.y; r5.z <- P.z; r5.w <- P.w

#line 152
  lt r2.w, r1.x, r5.x
  mov r6.xyz, r5.xywx
  mov r6.w, r1.x
  mov r5.xyw, r6.wywx
  movc r5.xyzw, r2.wwww, r6.xyzw, r5.xyzw  // r5.x <- Q.x; r5.y <- Q.y; r5.z <- Q.z; r5.w <- Q.w

#line 153
  min r2.w, r5.y, r5.w
  add r2.w, -r2.w, r5.x  // r2.w <- C

#line 154
  add r3.x, -r5.y, r5.w
  mad r2.w, r2.w, l(6.000000), l(0.000000)
  div r2.w, r3.x, r2.w
  add r2.w, r5.z, r2.w

#line 143
  frc r2.w, |r2.w|  // r2.w <- H

#line 146
  mad r3.xyz, r2.wwww, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 147
  mad_sat r3.xyz, |r3.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r3.x <- <HUEtoRGB_id8 return value>.x; r3.y <- <HUEtoRGB_id8 return value>.y; r3.z <- <HUEtoRGB_id8 return value>.z

#line 180
  add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mad r4.xyz, r3.xyzx, r2.zzzz, r2.yyyy  // r4.x <- <HSLtoRGB_id10 return value>.x; r4.y <- <HSLtoRGB_id10 return value>.y; r4.z <- <HSLtoRGB_id10 return value>.z

#line 478
  mov r4.w, r3.w
  break 

#line 479
  case l(34)

#line 151
  lt r2.y, r0.y, r0.z
  mov r5.xy, r0.zyzz
  mov r5.zw, l(0,0,-1.000000,0.666667)
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,0,-0.333333)
  movc r5.xyzw, r2.yyyy, r5.xyzw, r6.xyzw  // r5.x <- P.x; r5.y <- P.y; r5.z <- P.z; r5.w <- P.w

#line 152
  lt r2.y, r0.x, r5.x
  mov r6.xyz, r5.xywx
  mov r6.w, r0.x
  mov r5.xyw, r6.wywx
  movc r5.xyzw, r2.yyyy, r6.xyzw, r5.xyzw  // r5.x <- Q.x; r5.y <- Q.y; r5.z <- Q.z; r5.w <- Q.w

#line 153
  min r2.y, r5.y, r5.w
  add r2.y, -r2.y, r5.x  // r2.y <- C

#line 154
  add r2.z, -r5.y, r5.w
  mad r2.y, r2.y, l(6.000000), l(0.000000)
  div r2.y, r2.z, r2.y
  add r2.y, r5.z, r2.y

#line 151
  lt r2.z, r1.y, r1.z
  movc r3.xy, r2.zzzz, r1.zyzz, r1.yzyy  // r3.x <- P.x; r3.y <- P.y

#line 152
  lt r2.z, r1.x, r3.x
  mov r3.z, r1.x
  movc r3.xyz, r2.zzzz, r3.xyzx, r3.zyxz  // r3.x <- Q.x; r3.y <- Q.y; r3.z <- Q.w

#line 153
  min r2.z, r3.y, r3.z
  add r2.z, -r2.z, r3.x  // r2.z <- C

#line 173
  add r2.w, r3.x, l(0.000000)
  div r2.z, r2.z, r2.w  // r2.z <- S

#line 143
  frc r2.y, |r2.y|  // r2.y <- H

#line 146
  mad r3.xyz, r2.yyyy, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 147
  mad_sat r3.xyz, |r3.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r3.x <- <HUEtoRGB_id8 return value>.x; r3.y <- <HUEtoRGB_id8 return value>.y; r3.z <- <HUEtoRGB_id8 return value>.z

#line 168
  add r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r2.yzw, r3.xxyz, r2.zzzz, l(0.000000, 1.000000, 1.000000, 1.000000)
  mul r4.xyz, r5.xxxx, r2.yzwy  // r4.x <- <HSVtoRGB_id9 return value>.x; r4.y <- <HSVtoRGB_id9 return value>.y; r4.z <- <HSVtoRGB_id9 return value>.z

#line 481
  mov r4.w, r3.w
  break 

#line 482
  case l(35)

#line 151
  lt r2.y, r0.y, r0.z
  movc r3.xy, r2.yyyy, r0.zyzz, r0.yzyy  // r3.x <- P.x; r3.y <- P.y

#line 152
  lt r2.y, r0.x, r3.x
  mov r3.z, r0.x
  movc r2.yzw, r2.yyyy, r3.xxyz, r3.zzyx  // r2.y <- Q.x; r2.z <- Q.y; r2.w <- Q.w

#line 153
  min r2.z, r2.z, r2.w
  add r2.z, -r2.z, r2.y  // r2.z <- C

#line 185
  mad r2.y, -r2.z, l(0.500000), r2.y  // r2.y <- L

#line 151
  lt r2.z, r1.y, r1.z
  mov r5.xy, r1.zyzz
  mov r5.zw, l(0,0,-1.000000,0.666667)
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,0,-0.333333)
  movc r5.xyzw, r2.zzzz, r5.xyzw, r6.xyzw  // r5.x <- P.x; r5.y <- P.y; r5.z <- P.z; r5.w <- P.w

#line 152
  lt r2.z, r1.x, r5.x
  mov r6.xyz, r5.xywx
  mov r6.w, r1.x
  mov r5.xyw, r6.wywx
  movc r5.xyzw, r2.zzzz, r6.xyzw, r5.xyzw  // r5.x <- Q.x; r5.y <- Q.y; r5.z <- Q.z; r5.w <- Q.w

#line 153
  min r2.z, r5.y, r5.w
  add r2.z, -r2.z, r5.x  // r2.z <- C

#line 154
  add r2.w, -r5.y, r5.w
  mad r3.x, r2.z, l(6.000000), l(0.000000)
  div r2.w, r2.w, r3.x
  add r2.w, r5.z, r2.w

#line 185
  mad r3.x, -r2.z, l(0.500000), r5.x  // r3.x <- L

#line 186
  mad r3.x, r3.x, l(2.000000), l(-1.000000)
  add r3.x, -|r3.x|, l(1.000000)
  div r2.z, r2.z, r3.x  // r2.z <- S

#line 143
  frc r2.w, |r2.w|  // r2.w <- H

#line 146
  mad r3.xyz, r2.wwww, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 147
  mad_sat r3.xyz, |r3.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r3.x <- <HUEtoRGB_id8 return value>.x; r3.y <- <HUEtoRGB_id8 return value>.y; r3.z <- <HUEtoRGB_id8 return value>.z

#line 179
  mad r2.w, r2.y, l(2.000000), l(-1.000000)
  add r2.w, -|r2.w|, l(1.000000)
  mul r2.z, r2.z, r2.w  // r2.z <- C

#line 180
  add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mad r4.xyz, r3.xyzx, r2.zzzz, r2.yyyy  // r4.x <- <HSLtoRGB_id10 return value>.x; r4.y <- <HSLtoRGB_id10 return value>.y; r4.z <- <HSLtoRGB_id10 return value>.z

#line 484
  mov r4.w, r3.w
  break 

#line 485
  case l(36)

#line 151
  lt r2.y, r0.y, r0.z
  mov r5.xy, r0.zyzz
  mov r5.zw, l(0,0,-1.000000,0.666667)
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,0,-0.333333)
  movc r5.xyzw, r2.yyyy, r5.xyzw, r6.xyzw  // r5.x <- P.x; r5.y <- P.y; r5.z <- P.z; r5.w <- P.w

#line 152
  lt r2.y, r0.x, r5.x
  mov r6.xyz, r5.xywx
  mov r6.w, r0.x
  mov r5.xyw, r6.wywx
  movc r5.xyzw, r2.yyyy, r6.xyzw, r5.xyzw  // r5.x <- Q.x; r5.y <- Q.y; r5.z <- Q.z; r5.w <- Q.w

#line 153
  min r2.y, r5.y, r5.w
  add r2.y, -r2.y, r5.x  // r2.y <- C

#line 154
  add r2.z, -r5.y, r5.w
  mad r2.w, r2.y, l(6.000000), l(0.000000)
  div r2.z, r2.z, r2.w
  add r2.z, r5.z, r2.z

#line 185
  mad r2.w, -r2.y, l(0.500000), r5.x  // r2.w <- L

#line 186
  mad r2.w, r2.w, l(2.000000), l(-1.000000)
  add r2.w, -|r2.w|, l(1.000000)
  div r2.y, r2.y, r2.w  // r2.y <- S

#line 151
  lt r2.w, r1.y, r1.z
  movc r3.xy, r2.wwww, r1.zyzz, r1.yzyy  // r3.x <- P.x; r3.y <- P.y

#line 152
  lt r2.w, r1.x, r3.x
  mov r3.z, r1.x
  movc r3.xyz, r2.wwww, r3.xyzx, r3.zyxz  // r3.x <- Q.x; r3.y <- Q.y; r3.z <- Q.w

#line 153
  min r2.w, r3.y, r3.z
  add r2.w, -r2.w, r3.x  // r2.w <- C

#line 185
  mad r2.w, -r2.w, l(0.500000), r3.x  // r2.w <- L

#line 143
  frc r2.z, |r2.z|  // r2.z <- H

#line 146
  mad r3.xyz, r2.zzzz, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 147
  mad_sat r3.xyz, |r3.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r3.x <- <HUEtoRGB_id8 return value>.x; r3.y <- <HUEtoRGB_id8 return value>.y; r3.z <- <HUEtoRGB_id8 return value>.z

#line 179
  mad r2.z, r2.w, l(2.000000), l(-1.000000)
  add r2.z, -|r2.z|, l(1.000000)
  mul r2.y, r2.y, r2.z  // r2.y <- C

#line 180
  add r3.xyz, r3.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
  mad r4.xyz, r3.xyzx, r2.yyyy, r2.wwww  // r4.x <- <HSLtoRGB_id10 return value>.x; r4.y <- <HSLtoRGB_id10 return value>.y; r4.z <- <HSLtoRGB_id10 return value>.z

#line 487
  mov r4.w, r3.w
  break 

#line 488
  case l(37)

#line 151
  lt r2.y, r0.y, r0.z
  mov r5.xy, r0.zyzz
  mov r5.zw, l(0,0,-1.000000,0.666667)
  mov r6.xy, r5.yxyy
  mov r6.zw, l(0,0,0,-0.333333)
  movc r5.xyzw, r2.yyyy, r5.xyzw, r6.xyzw  // r5.x <- P.x; r5.y <- P.y; r5.z <- P.z; r5.w <- P.w

#line 152
  lt r2.y, r0.x, r5.x
  mov r6.xyz, r5.xywx
  mov r6.w, r0.x
  mov r5.xyw, r6.wywx
  movc r5.xyzw, r2.yyyy, r6.xyzw, r5.xyzw  // r5.x <- Q.x; r5.y <- Q.y; r5.z <- Q.z; r5.w <- Q.w

#line 153
  min r2.y, r5.y, r5.w
  add r2.y, -r2.y, r5.x  // r2.y <- C

#line 154
  add r2.z, -r5.y, r5.w
  mad r2.w, r2.y, l(6.000000), l(0.000000)
  div r2.z, r2.z, r2.w
  add r2.z, r5.z, r2.z

#line 173
  add r2.w, r5.x, l(0.000000)
  div r2.y, r2.y, r2.w  // r2.y <- S

#line 151
  max r2.w, r1.z, r1.y  // r2.w <- P.x

#line 152
  max r2.w, r1.x, r2.w  // r2.w <- Q.x

#line 143
  frc r2.z, |r2.z|  // r2.z <- H

#line 146
  mad r3.xyz, r2.zzzz, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 147
  mad_sat r3.xyz, |r3.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r3.x <- <HUEtoRGB_id8 return value>.x; r3.y <- <HUEtoRGB_id8 return value>.y; r3.z <- <HUEtoRGB_id8 return value>.z

#line 168
  add r3.xyz, r3.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
  mad r3.xyz, r3.xyzx, r2.yyyy, l(1.000000, 1.000000, 1.000000, 0.000000)
  mul r4.xyz, r2.wwww, r3.xyzx  // r4.x <- <HSVtoRGB_id9 return value>.x; r4.y <- <HSVtoRGB_id9 return value>.y; r4.z <- <HSVtoRGB_id9 return value>.z

#line 490
  mov r4.w, r3.w
  break 

#line 491
  case l(38)

#line 493
  mov r4.x, r1.x
  mov r4.yz, r0.yyzy
  mov r4.w, l(1.000000)
  break 

#line 494
  case l(39)

#line 496
  mov r4.xz, r0.xxzx
  mov r4.y, r1.y
  mov r4.w, l(1.000000)
  break 

#line 497
  case l(40)

#line 499
  mov r4.xy, r0.xyxx
  mov r4.z, r1.z
  mov r4.w, l(1.000000)
  break 

#line 500
  default 
  break 
endswitch   // r4.x <- col.x; r4.y <- col.y; r4.z <- col.z; r4.w <- col.w

#line 211
add r2.y, -r0.w, l(1.000000)
mad r5.w, r3.w, r2.y, r0.w  // r5.w <- alpha

#line 163
div r0.w, r0.w, r5.w
add r2.y, -r0.w, l(1.000000)
mad r1.w, -r1.w, r2.x, l(1.000000)
mul r0.w, r0.w, r1.w
mul r0.xyz, r0.xyzx, r0.wwww
mad r0.xyz, r2.yyyy, r1.xyzx, r0.xyzx
mad r5.xyz, r3.wwww, r4.xyzx, r0.xyzx  // r5.x <- <ColorCompositing_id29 return value>.x; r5.y <- <ColorCompositing_id29 return value>.y; r5.z <- <ColorCompositing_id29 return value>.z

#line 501
movc o0.xyzw, cb1[5].yyyy, r5.xyzw, r4.xyzw

#line 534
ret 
// Approximately 445 instruction slots used
***************************
*************************/
static const float Epsilon_id83 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float InputValue_id90;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    int Type_id88;
    bool ComputeAlpha_id89 = true;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id8(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 RGBtoHCV_id11(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id83) + Q.z);
    return float3(H, C, Q.x);
}
float4 Reflect_id47(float4 c0, float4 c1)
{
    return (c1 == 1.0) ? c1 : min(c0 * c0 / (1.0 - c1), 1.0);
}
float3 ColorCompositing_id29(float as, float ab, float ar, float3 Cs, float3 Cb, float3 Bbs)
{
    return (1 - (as / ar)) * Cb + (as / ar) * (1 - ab) * Cs + ab * Bbs;
}
float3 HSVtoRGB_id9(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id8(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 RGBtoHSV_id12(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id83);
    return float3(HCV.x, S, HCV.z);
}
float3 HSLtoRGB_id10(in float3 HSL)
{
    float3 RGB = HUEtoRGB_id8(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
float3 RGBtoHSL_id13(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon_id83);
    return float3(HCV.x, S, L);
}
float4 Glow_id43(float4 c0, float4 c1)
{
    return Reflect_id47(c1, c0);
}
float4 ColorDodge_id46(float4 c0, float4 c1)
{
    return c0 / (1.0 - c1);
}
float4 ColorBurn_id36(float4 c0, float4 c1)
{
    return (c1 == 0.0) ? c1 : max((1.0 - (1.0 - c0) / c1), 0.0);
}
float4 Lighten_id39(float4 c0, float4 c1)
{
    return max(c0, c1);
}
float4 Darken_id34(float4 c0, float4 c1)
{
    return min(c0, c1);
}
float4 ComputeAlpha_id30(float4 c0, float4 c1, float4 composite)
{
    float alpha = (c1.a + c0.a * (1.0 - c1.a));
    float3 color = ColorCompositing_id29(c1.a, c0.a, alpha, c1.rgb, c0.rgb, composite.rgb);
    return float4(color, alpha);
}
float4 Blue_id71(float4 c0, float4 c1)
{
    return float4(c0.r, c0.g, c1.b, 1.0);
}
float4 Green_id70(float4 c0, float4 c1)
{
    return float4(c0.r, c1.g, c0.b, 1.0);
}
float4 Red_id69(float4 c0, float4 c1)
{
    return float4(c1.r, c0.g, c0.b, 1.0);
}
float4 Value_id68(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSV_id12(c0.rgb);
    float3 hsv1 = RGBtoHSV_id12(c1.rgb);
    float3 col = HSVtoRGB_id9(float3(hsv0.x, hsv0.y, hsv1.z));
    return float4(col, c1.a);
}
float4 Lightness_id67(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv0.x, hsv0.y, hsv1.z));
    return float4(col, c1.a);
}
float4 Color_id66(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv1.x, hsv1.y, hsv0.z));
    return float4(col, c1.a);
}
float4 Saturation_id65(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSV_id12(c0.rgb);
    float3 hsv1 = RGBtoHSV_id12(c1.rgb);
    float3 col = HSVtoRGB_id9(float3(hsv0.x, hsv1.y, hsv0.z));
    return float4(col, c1.a);
}
float4 Hue_id64(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv1.x, hsv0.y, hsv0.z));
    return float4(col, c1.a);
}
float4 GrainMerge_id63(float4 c0, float4 c1)
{
    return (c0 - c1) - 0.5;
}
float4 GrainExtract_id62(float4 c0, float4 c1)
{
    return (c0 - c1) + 0.5;
}
float4 Phoenix_id61(float4 c0, float4 c1)
{
    return min(c0, c1) - max(c0, c1) + 1.0;
}
float4 Heat_id60(float4 c0, float4 c1)
{
    return 1.0 - Glow_id43(c0, c1);
}
float4 AdditiveSubstractive_id59(float4 c0, float4 c1)
{
    return c1 - sqrt(c0);
}
float4 Negation_id58(float4 c0, float4 c1)
{
    return 1.0 - abs(1.0 - c0 - c1);
}
float4 Divide_id57(float4 c0, float4 c1)
{
    return c0 / c1;
}
float4 Subtract_id56(float4 c0, float4 c1)
{
    return c0 - c1;
}
float4 Exclusion_id55(float4 c0, float4 c1)
{
    return c0 + c1 - 2.0 * c0 * c1;
}
float4 Difference_id54(float4 c0, float4 c1)
{
    return abs(c0 - c1);
}
float4 LinearLight_id53(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? max(c0 + 2.0 * c1 - 1.0, 0.0) : min(c0 + 2.0 * (c1 - 0.5), 1.0);
}
float4 VividLight_id52(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? ColorBurn_id36(c0, 2.0 * c1) : ColorDodge_id46(c0, (2.0 * (c1 - 0.5)));
}
float4 Hardlight_id51(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? (2.0 * c0 * c1) : 1.0 - 2.0 * (1.0 - c0) * (1.0 - c1);
}
float4 Pinlight_id50(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? Darken_id34(c0, (2.0 * c1)) : Lighten_id39(c0, (2.0 * (c1 - 0.5)));
}
float4 Freeze_id49(float4 c0, float4 c1)
{
    return (c1 == 0.0) ? 0.0 : 1.0 - pow(1.0 - c0, 2.0) / c1;
}
float4 HardMix_id48(float4 c0, float4 c1)
{
    return floor(c0 + c1);
}
float4 Softlight_id45(float4 c0, float4 c1)
{
    return 2.0 * c0 * c1 + c0 * c0 - 2.0 * c0 * c0 * c1;
}
float4 Overlay_id44(float4 c0, float4 c1)
{
    return (c0 < 0.5) ? (2.0 * c0 * c1) : 1.0 - 2.0 * (1 - c0) * (1.0 - c1);
}
float4 LighterColor_id42(float4 c0, float4 c1)
{
    return (c0.r + c0.g + c0.b > c1.r + c1.g + c1.b) ? c0 : c1;
}
float4 Add_id41(float4 c0, float4 c1)
{
    return c0 + c1;
}
float4 Screen_id40(float4 c0, float4 c1)
{
    return 1.0 - ((1.0 - c0) * (1.0 - c1));
}
float4 DarkerColor_id38(float4 c0, float4 c1)
{
    return (c0.r + c0.g + c0.b < c1.r + c1.g + c1.b) ? c0 : c1;
}
float4 LinearBurn_id37(float4 c0, float4 c1)
{
    return (c0 + c1) - 1.0;
}
float4 Multiply_id35(float4 c0, float4 c1)
{
    return c0 * c1;
}
float4 GeometricMean_id33(float4 c0, float4 c1)
{
    return sqrt(c0 * c1);
}
float4 Average_id32(float4 c0, float4 c1)
{
    return (c0 + c1) * 0.5;
}
float4 Normal_id31(float4 c0, float4 c1)
{
    return c1;
}
float4 Blend_id72(float4 c0, float4 c1, float fader, bool computeAlpha, int type)
{
    float4 col;
    c1.a *= saturate(fader);
    switch (type)

    {
        case 0:
            col = Normal_id31(c0, c1);
            break;
        case 1:
            col = Average_id32(c0, c1);
            break;
        case 2:
            col = GeometricMean_id33(c0, c1);
            break;
        case 3:
            col = Darken_id34(c0, c1);
            break;
        case 4:
            col = Multiply_id35(c0, c1);
            break;
        case 5:
            col = ColorBurn_id36(c0, c1);
            break;
        case 6:
            col = LinearBurn_id37(c0, c1);
            break;
        case 7:
            col = DarkerColor_id38(c0, c1);
            break;
        case 8:
            col = Lighten_id39(c0, c1);
            break;
        case 9:
            col = Screen_id40(c0, c1);
            break;
        case 10:
            col = Add_id41(c0, c1);
            break;
        case 11:
            col = LighterColor_id42(c0, c1);
            break;
        case 12:
            col = Glow_id43(c0, c1);
            break;
        case 13:
            col = Overlay_id44(c0, c1);
            break;
        case 14:
            col = Softlight_id45(c0, c1);
            break;
        case 15:
            col = ColorDodge_id46(c0, c1);
            break;
        case 16:
            col = Reflect_id47(c0, c1);
            break;
        case 17:
            col = HardMix_id48(c0, c1);
            break;
        case 18:
            col = Freeze_id49(c0, c1);
            break;
        case 19:
            col = Pinlight_id50(c0, c1);
            break;
        case 20:
            col = Hardlight_id51(c0, c1);
            break;
        case 21:
            col = VividLight_id52(c0, c1);
            break;
        case 22:
            col = LinearLight_id53(c0, c1);
            break;
        case 23:
            col = Difference_id54(c0, c1);
            break;
        case 24:
            col = Exclusion_id55(c0, c1);
            break;
        case 25:
            col = Subtract_id56(c0, c1);
            break;
        case 26:
            col = Divide_id57(c0, c1);
            break;
        case 27:
            col = Negation_id58(c0, c1);
            break;
        case 28:
            col = AdditiveSubstractive_id59(c0, c1);
            break;
        case 29:
            col = Heat_id60(c0, c1);
            break;
        case 30:
            col = Phoenix_id61(c0, c1);
            break;
        case 31:
            col = GrainExtract_id62(c0, c1);
            break;
        case 32:
            col = GrainMerge_id63(c0, c1);
            break;
        case 33:
            col = Hue_id64(c0, c1);
            break;
        case 34:
            col = Saturation_id65(c0, c1);
            break;
        case 35:
            col = Color_id66(c0, c1);
            break;
        case 36:
            col = Lightness_id67(c0, c1);
            break;
        case 37:
            col = Value_id68(c0, c1);
            break;
        case 38:
            col = Red_id69(c0, c1);
            break;
        case 39:
            col = Green_id70(c0, c1);
            break;
        case 40:
            col = Blue_id71(c0, c1);
            break;
    }
    return (computeAlpha) ? ComputeAlpha_id30(c1, c0, col) : col;
}
float4 Mix_id73(float4 tex0col, float4 tex1col, float fader)
{
    float4 c0 = tex0col;
    float4 c1 = tex1col;
    return Blend_id72(c0, c1, fader, ComputeAlpha_id89, Type_id88);
}
float Compute_id74()
{
    return InputValue_id90;
}
float4 InTex1_id27(inout PS_STREAMS streams)
{
    return Texture1_id16.SampleLevel(Sampler1_id53, streams.TexCoord_id62, 0);
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col0 = InTex0_id26(streams);
    float4 col1 = InTex1_id27(streams);
    return Mix_id73(col0, col1, Compute_id74());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
