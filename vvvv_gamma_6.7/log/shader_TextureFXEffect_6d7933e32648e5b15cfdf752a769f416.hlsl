/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin RandomSpreadSampling_Internal_TextureFX [{Center = InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>}, {Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {Width = InputFloat2<ShaderFX.InputValueFloat2.i1,PerUpdate>}]
@P Center: InputFloat2<ShaderFX.InputValueFloat2,PerUpdate>
@P Width: InputFloat2<ShaderFX.InputValueFloat2.i1,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 32]
@C    InputValue_id99 => ShaderFX.InputValueFloat4
@C    InputValue_id100 => ShaderFX.InputValueFloat2
@C    InputValue_id101 => ShaderFX.InputValueFloat2.i1
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Count_id94 => RandomSpreadSampling_Internal_TextureFX.Count
@C    type_id97 => RandomSpreadSampling_Internal_TextureFX.type
@C    Seed_id98 => RandomSpreadSampling_Internal_TextureFX.Seed
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    RandomSpreadSampling_Internal_TextureFX => 21d4239bfd7d1a7f888557339fcc3ed8
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    AddonShaderUtils => 0d3496ddd24bfcbde4abd1deae724f64
@S    HappyNoise => d86fc81a4658d834c4469475a2fd4a22
@S    HappyCalc => be0c19fec328227d547efda089b00cc5
@S    BlendOperations => 63b352c733fb868f9162fdac1eacd48b
@S    ComputeFloat2 => 4826dbf2e774b7283c93b6121c851c5d
@S    InputFloat2 => d6238a7d677592382c8158617d803399
@S    DeclFloat2 => d5fe6f879293db53179d13cf4b1d1f3d
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 565 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_6d7933e32648e5b15cfdf752a769f416.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 569
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 296c09c010e90d84d54b95ca43c79bed
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id99;            // Offset:    0 Size:    16
//   float2 InputValue_id100;           // Offset:   16 Size:     8
//   float2 InputValue_id101;           // Offset:   24 Size:     8
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   int Count_id94;                    // Offset:   80 Size:     4
//      = 0x00000001 
//   int type_id97;                     // Offset:   84 Size:     4
//   int Seed_id98;                     // Offset:   88 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// Sampler0_id52                     sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 19
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 544 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_6d7933e32648e5b15cfdf752a769f416.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s1, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 154
mov r1.zw, l(0,0,-1.000000,0.666667)
mov r2.zw, l(0,0,0,-0.333333)
mov r3.zw, l(0,0,-1.000000,0.666667)
mov r4.zw, l(0,0,0,-0.333333)
mov r5.zw, l(0,0,-1.000000,0.666667)
mov r6.zw, l(0,0,0,-0.333333)
mov r7.zw, l(0,0,-1.000000,0.666667)
mov r8.zw, l(0,0,0,-0.333333)
mov r9.zw, l(0,0,-1.000000,0.666667)
mov r10.zw, l(0,0,0,-0.333333)

#line 536
mov r11.xyzw, l(0,0,0,0)  // r11.x <- c.x; r11.y <- c.y; r11.z <- c.z; r11.w <- c.w
mov r12.x, l(0)  // r12.x <- i
loop 
  ige r12.y, r12.x, cb1[5].x
  breakc_nz r12.y

#line 538
  iadd r12.y, r12.x, l(1)
  imad r12.z, cb1[5].z, r12.y, r12.x
  itof r12.z, r12.z

#line 512
  mul r13.xyz, r12.zzzz, l(0.103100, 0.103000, 0.097300, 0.000000)
  frc r13.xyz, r13.xyzx  // r13.x <- p3.x; r13.y <- p3.y; r13.z <- p3.z

#line 513
  add r14.xyz, r13.yzxy, l(19.190001, 19.190001, 19.190001, 0.000000)
  dp3 r12.z, r13.xyzx, r14.xyzx
  add r13.xyz, r12.zzzz, r13.xyzx

#line 514
  add r12.zw, r13.yyyz, r13.xxxx
  mul r12.zw, r13.zzzy, r12.zzzw
  frc r12.zw, r12.zzzw  // r12.z <- <hash21_id80 return value>.x; r12.w <- <hash21_id80 return value>.y

#line 508
  mad r12.zw, r12.zzzw, l(0.000000, 0.000000, 2.000000, 2.000000), l(0.000000, 0.000000, -1.000000, -1.000000)  // r12.z <- <Map_id62 return value>.x; r12.w <- <Map_id62 return value>.y

#line 538
  mad r12.zw, r12.zzzw, cb0[1].zzzw, v1.xxxy
  add r12.zw, r12.zzzw, cb0[1].xxxy
  sample_l_indexable(texture2d)(float,float,float,float) r13.xyzw, r12.zwzz, t0.xyzw, s0, l(0.000000)  // r13.x <- c1.x; r13.y <- c1.y; r13.z <- c1.z; r13.w <- c1.w

#line 377
  switch cb1[5].y

#line 380
    case l(0)

#line 382
    mov r14.xyz, r13.xyzx  // r14.x <- col.x; r14.y <- col.y; r14.z <- col.z
    break 

#line 383
    case l(1)

#line 367
    add r15.xyz, r11.xyzx, r13.xyzx
    mul r14.xyz, r15.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r14.x <- <Average_id143 return value>.x; r14.y <- <Average_id143 return value>.y; r14.z <- <Average_id143 return value>.z

#line 385
    break 

#line 386
    case l(2)

#line 363
    mul r15.xyz, r11.xyzx, r13.xyzx
    sqrt r14.xyz, r15.xyzx  // r14.x <- <GeometricMean_id144 return value>.x; r14.y <- <GeometricMean_id144 return value>.y; r14.z <- <GeometricMean_id144 return value>.z

#line 388
    break 

#line 389
    case l(3)

#line 210
    min r14.xyz, r11.xyzx, r13.xyzx  // r14.x <- <Darken_id145 return value>.x; r14.y <- <Darken_id145 return value>.y; r14.z <- <Darken_id145 return value>.z

#line 391
    break 

#line 392
    case l(4)

#line 359
    mul r14.xyz, r11.xyzx, r13.xyzx  // r14.x <- <Multiply_id146 return value>.x; r14.y <- <Multiply_id146 return value>.y; r14.z <- <Multiply_id146 return value>.z

#line 394
    break 

#line 395
    case l(5)

#line 202
    eq r15.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r16.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r13.xyzx
    add r16.xyz, -r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r14.xyz, r15.xyzx, l(0,0,0,0), r16.xyzx  // r14.x <- <ColorBurn_id147 return value>.x; r14.y <- <ColorBurn_id147 return value>.y; r14.z <- <ColorBurn_id147 return value>.z

#line 397
    break 

#line 398
    case l(6)

#line 355
    add r15.xyz, r11.xyzx, r13.xyzx
    add r14.xyz, r15.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)  // r14.x <- <LinearBurn_id148 return value>.x; r14.y <- <LinearBurn_id148 return value>.y; r14.z <- <LinearBurn_id148 return value>.z

#line 400
    break 

#line 401
    case l(7)

#line 351
    add r12.z, r11.y, r11.x
    add r12.z, r11.z, r12.z
    add r12.w, r13.y, r13.x
    add r12.w, r13.z, r12.w
    lt r12.z, r12.z, r12.w
    movc r14.xyz, r12.zzzz, r11.xyzx, r13.xyzx  // r14.x <- <DarkerColor_id149 return value>.x; r14.y <- <DarkerColor_id149 return value>.y; r14.z <- <DarkerColor_id149 return value>.z

#line 403
    break 

#line 404
    case l(8)

#line 206
    max r14.xyz, r11.xyzx, r13.xyzx  // r14.x <- <Lighten_id150 return value>.x; r14.y <- <Lighten_id150 return value>.y; r14.z <- <Lighten_id150 return value>.z

#line 406
    break 

#line 407
    case l(9)

#line 347
    add r15.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r16.xyz, -r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r14.xyz, -r15.xyzx, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r14.x <- <Screen_id151 return value>.x; r14.y <- <Screen_id151 return value>.y; r14.z <- <Screen_id151 return value>.z

#line 409
    break 

#line 410
    case l(10)

#line 343
    add r14.xyz, r11.xyzx, r13.xyzx  // r14.x <- <Add_id152 return value>.x; r14.y <- <Add_id152 return value>.y; r14.z <- <Add_id152 return value>.z

#line 412
    break 

#line 413
    case l(11)

#line 339
    add r12.z, r11.y, r11.x
    add r12.z, r11.z, r12.z
    add r12.w, r13.y, r13.x
    add r12.w, r13.z, r12.w
    lt r12.z, r12.w, r12.z
    movc r14.xyz, r12.zzzz, r11.xyzx, r13.xyzx  // r14.x <- <LighterColor_id153 return value>.x; r14.y <- <LighterColor_id153 return value>.y; r14.z <- <LighterColor_id153 return value>.z

#line 415
    break 

#line 416
    case l(12)

#line 162
    eq r15.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r13.xyzx, r13.xyzx
    add r17.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r17.xyzx
    min r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r14.xyz, r15.xyzx, r11.xyzx, r16.xyzx  // r14.x <- <Reflect_id158 return value>.x; r14.y <- <Reflect_id158 return value>.y; r14.z <- <Reflect_id158 return value>.z

#line 418
    break 

#line 419
    case l(13)

#line 335
    lt r15.xyz, r11.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r16.xyz, r11.xyzx, r13.xyzx
    add r16.xyz, r16.xyzx, r16.xyzx
    add r17.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r17.xyz, r17.xyzx, r17.xyzx
    add r18.xyz, -r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r17.xyz, -r17.xyzx, r18.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r14.xyz, r15.xyzx, r16.xyzx, r17.xyzx  // r14.x <- <Overlay_id155 return value>.x; r14.y <- <Overlay_id155 return value>.y; r14.z <- <Overlay_id155 return value>.z

#line 421
    break 

#line 422
    case l(14)

#line 331
    add r15.xyz, r11.xyzx, r11.xyzx
    mul r16.xyz, r11.xyzx, r11.xyzx
    mad r16.xyz, r15.xyzx, r13.xyzx, r16.xyzx
    mul r15.xyz, r11.xyzx, r15.xyzx
    mad r14.xyz, -r15.xyzx, r13.xyzx, r16.xyzx  // r14.x <- <Softlight_id156 return value>.x; r14.y <- <Softlight_id156 return value>.y; r14.z <- <Softlight_id156 return value>.z

#line 424
    break 

#line 425
    case l(15)

#line 198
    add r15.xyz, -r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r14.xyz, r11.xyzx, r15.xyzx  // r14.x <- <ColorDodge_id157 return value>.x; r14.y <- <ColorDodge_id157 return value>.y; r14.z <- <ColorDodge_id157 return value>.z

#line 427
    break 

#line 428
    case l(16)

#line 162
    eq r15.xyz, r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r11.xyzx, r11.xyzx
    add r17.xyz, -r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r17.xyzx
    min r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r14.xyz, r15.xyzx, l(1.000000,1.000000,1.000000,0), r16.xyzx  // r14.x <- <Reflect_id158 return value>.x; r14.y <- <Reflect_id158 return value>.y; r14.z <- <Reflect_id158 return value>.z

#line 430
    break 

#line 431
    case l(17)

#line 327
    add r15.xyz, r11.xyzx, r13.xyzx
    round_ni r14.xyz, r15.xyzx  // r14.x <- <HardMix_id159 return value>.x; r14.y <- <HardMix_id159 return value>.y; r14.z <- <HardMix_id159 return value>.z

#line 433
    break 

#line 434
    case l(18)

#line 323
    eq r15.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r16.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r16.xyzx, r16.xyzx
    div r16.xyz, r16.xyzx, r13.xyzx
    add r16.xyz, -r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r14.xyz, r15.xyzx, l(0,0,0,0), r16.xyzx  // r14.x <- <Freeze_id160 return value>.x; r14.y <- <Freeze_id160 return value>.y; r14.z <- <Freeze_id160 return value>.z

#line 436
    break 

#line 437
    case l(19)

#line 319
    lt r15.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    add r16.xyz, r13.xyzx, r13.xyzx

#line 210
    min r16.xyz, r11.xyzx, r16.xyzx  // r16.x <- <Darken_id145 return value>.x; r16.y <- <Darken_id145 return value>.y; r16.z <- <Darken_id145 return value>.z

#line 319
    add r17.xyz, r13.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    add r17.xyz, r17.xyzx, r17.xyzx

#line 206
    max r17.xyz, r11.xyzx, r17.xyzx  // r17.x <- <Lighten_id150 return value>.x; r17.y <- <Lighten_id150 return value>.y; r17.z <- <Lighten_id150 return value>.z

#line 319
    movc r14.xyz, r15.xyzx, r16.xyzx, r17.xyzx  // r14.x <- <Pinlight_id161 return value>.x; r14.y <- <Pinlight_id161 return value>.y; r14.z <- <Pinlight_id161 return value>.z

#line 439
    break 

#line 440
    case l(20)

#line 315
    lt r15.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mul r16.xyz, r11.xyzx, r13.xyzx
    add r16.xyz, r16.xyzx, r16.xyzx
    add r17.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r17.xyz, r17.xyzx, r17.xyzx
    add r18.xyz, -r13.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mad r17.xyz, -r17.xyzx, r18.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r14.xyz, r15.xyzx, r16.xyzx, r17.xyzx  // r14.x <- <Hardlight_id162 return value>.x; r14.y <- <Hardlight_id162 return value>.y; r14.z <- <Hardlight_id162 return value>.z

#line 442
    break 

#line 443
    case l(21)

#line 311
    lt r15.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    add r16.xyz, r13.xyzx, r13.xyzx

#line 202
    eq r17.xyz, r13.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r18.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r18.xyzx, r16.xyzx
    add r16.xyz, -r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    movc r16.xyz, r17.xyzx, l(0,0,0,0), r16.xyzx  // r16.x <- <ColorBurn_id147 return value>.x; r16.y <- <ColorBurn_id147 return value>.y; r16.z <- <ColorBurn_id147 return value>.z

#line 311
    add r17.xyz, r13.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)

#line 198
    mad r17.xyz, -r17.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(1.000000, 1.000000, 1.000000, 0.000000)
    div r17.xyz, r11.xyzx, r17.xyzx  // r17.x <- <ColorDodge_id157 return value>.x; r17.y <- <ColorDodge_id157 return value>.y; r17.z <- <ColorDodge_id157 return value>.z

#line 311
    movc r14.xyz, r15.xyzx, r16.xyzx, r17.xyzx  // r14.x <- <VividLight_id163 return value>.x; r14.y <- <VividLight_id163 return value>.y; r14.z <- <VividLight_id163 return value>.z

#line 445
    break 

#line 446
    case l(22)

#line 307
    lt r15.xyz, r13.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
    mad r16.xyz, r13.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r11.xyzx
    add r16.xyz, r16.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    max r16.xyz, r16.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r17.xyz, r13.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r17.xyz, r17.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r11.xyzx
    min r17.xyz, r17.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r14.xyz, r15.xyzx, r16.xyzx, r17.xyzx  // r14.x <- <LinearLight_id164 return value>.x; r14.y <- <LinearLight_id164 return value>.y; r14.z <- <LinearLight_id164 return value>.z

#line 448
    break 

#line 449
    case l(23)

#line 303
    add r14.xyz, r11.xyzx, -r13.xyzx

#line 451
    mov r14.xyz, |r14.xyzx|  // r14.x <- col.x; r14.y <- col.y; r14.z <- col.z
    break 

#line 452
    case l(24)

#line 299
    add r15.xyz, r11.xyzx, r13.xyzx
    mul r16.xyz, r11.xyzx, r13.xyzx
    mad r14.xyz, -r16.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), r15.xyzx  // r14.x <- <Exclusion_id166 return value>.x; r14.y <- <Exclusion_id166 return value>.y; r14.z <- <Exclusion_id166 return value>.z

#line 454
    break 

#line 455
    case l(25)

#line 295
    add r14.xyz, r11.xyzx, -r13.xyzx  // r14.x <- <Subtract_id167 return value>.x; r14.y <- <Subtract_id167 return value>.y; r14.z <- <Subtract_id167 return value>.z

#line 457
    break 

#line 458
    case l(26)

#line 291
    div r14.xyz, r11.xyzx, r13.xyzx  // r14.x <- <Divide_id168 return value>.x; r14.y <- <Divide_id168 return value>.y; r14.z <- <Divide_id168 return value>.z

#line 460
    break 

#line 461
    case l(27)

#line 287
    add r15.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    add r15.xyz, -r13.xyzx, r15.xyzx
    add r14.xyz, -|r15.xyzx|, l(1.000000, 1.000000, 1.000000, 0.000000)  // r14.x <- <Negation_id169 return value>.x; r14.y <- <Negation_id169 return value>.y; r14.z <- <Negation_id169 return value>.z

#line 463
    break 

#line 464
    case l(28)

#line 283
    sqrt r15.xyz, r11.xyzx
    add r14.xyz, r13.xyzx, -r15.xyzx  // r14.x <- <AdditiveSubstractive_id170 return value>.x; r14.y <- <AdditiveSubstractive_id170 return value>.y; r14.z <- <AdditiveSubstractive_id170 return value>.z

#line 466
    break 

#line 467
    case l(29)

#line 162
    eq r15.xyz, r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r16.xyz, r13.xyzx, r13.xyzx
    add r17.xyz, -r11.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    div r16.xyz, r16.xyzx, r17.xyzx
    min r16.xyz, r16.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
    movc r15.xyz, r15.xyzx, r11.xyzx, r16.xyzx  // r15.x <- <Reflect_id158 return value>.x; r15.y <- <Reflect_id158 return value>.y; r15.z <- <Reflect_id158 return value>.z

#line 279
    add r14.xyz, -r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r14.x <- <Heat_id171 return value>.x; r14.y <- <Heat_id171 return value>.y; r14.z <- <Heat_id171 return value>.z

#line 469
    break 

#line 470
    case l(30)

#line 275
    min r15.xyz, r11.xyzx, r13.xyzx
    max r16.xyz, r11.xyzx, r13.xyzx
    add r15.xyz, r15.xyzx, -r16.xyzx
    add r14.xyz, r15.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)  // r14.x <- <Phoenix_id172 return value>.x; r14.y <- <Phoenix_id172 return value>.y; r14.z <- <Phoenix_id172 return value>.z

#line 472
    break 

#line 473
    case l(31)

#line 271
    add r15.xyz, r11.xyzx, -r13.xyzx
    add r14.xyz, r15.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)  // r14.x <- <GrainExtract_id173 return value>.x; r14.y <- <GrainExtract_id173 return value>.y; r14.z <- <GrainExtract_id173 return value>.z

#line 475
    break 

#line 476
    case l(32)

#line 267
    add r15.xyz, r11.xyzx, -r13.xyzx
    add r14.xyz, r15.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)  // r14.x <- <GrainMerge_id174 return value>.x; r14.y <- <GrainMerge_id174 return value>.y; r14.z <- <GrainMerge_id174 return value>.z

#line 478
    break 

#line 479
    case l(33)

#line 154
    lt r12.z, r11.y, r11.z
    movc r15.xy, r12.zzzz, r11.zyzz, r11.yzyy  // r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y

#line 155
    lt r12.z, r11.x, r15.x
    mov r15.z, r11.x
    movc r15.xyz, r12.zzzz, r15.xyzx, r15.zyxz  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w

#line 156
    min r12.z, r15.y, r15.z
    add r12.z, -r12.z, r15.x  // r12.z <- C; r12.z <- C; r12.z <- C; r12.z <- C; r12.z <- C; r12.z <- C

#line 188
    mad r12.w, -r12.z, l(0.500000), r15.x  // r12.w <- L; r12.w <- L; r12.w <- L; r12.w <- L

#line 154
    lt r14.w, r13.y, r13.z
    mov r1.xy, r13.zyzz
    mov r2.xy, r1.yxyy
    movc r15.xyzw, r14.wwww, r1.xyzw, r2.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 155
    lt r1.x, r13.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r13.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r1.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 156
    min r1.x, r15.y, r15.w
    add r1.x, -r1.x, r15.x  // r1.x <- C; r1.x <- C; r1.x <- C; r1.x <- C; r1.x <- C

#line 157
    add r1.y, -r15.y, r15.w
    mad r1.x, r1.x, l(6.000000), l(0.000000)
    div r1.x, r1.y, r1.x
    add r1.x, r15.z, r1.x

#line 146
    frc r1.x, |r1.x|  // r1.x <- H

#line 149
    mad r15.xyz, r1.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 150
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 183
    add r15.xyz, r15.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r14.xyz, r15.xyzx, r12.zzzz, r12.wwww  // r14.x <- <HSLtoRGB_id10 return value>.x; r14.y <- <HSLtoRGB_id10 return value>.y; r14.z <- <HSLtoRGB_id10 return value>.z

#line 481
    break 

#line 482
    case l(34)

#line 154
    lt r1.x, r11.y, r11.z
    mov r3.xy, r11.zyzz
    mov r4.xy, r3.yxyy
    movc r15.xyzw, r1.xxxx, r3.xyzw, r4.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 155
    lt r1.x, r11.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r11.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r1.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 156
    min r1.x, r15.y, r15.w
    add r1.x, -r1.x, r15.x  // r1.x <- C; r1.x <- C; r1.x <- C; r1.x <- C

#line 157
    add r1.y, -r15.y, r15.w
    mad r1.x, r1.x, l(6.000000), l(0.000000)
    div r1.x, r1.y, r1.x
    add r1.x, r15.z, r1.x

#line 154
    lt r1.y, r13.y, r13.z
    movc r16.xy, r1.yyyy, r13.zyzz, r13.yzyy  // r16.x <- P.x; r16.y <- P.y; r16.x <- P.x; r16.y <- P.y; r16.x <- P.x; r16.y <- P.y; r16.x <- P.x; r16.y <- P.y

#line 155
    lt r1.y, r13.x, r16.x
    mov r16.z, r13.x
    movc r15.yzw, r1.yyyy, r16.xxyz, r16.zzyx  // r15.y <- Q.x; r15.z <- Q.y; r15.y <- Q.x; r15.z <- Q.y; r15.y <- Q.x; r15.z <- Q.y; r15.y <- Q.x; r15.z <- Q.y

#line 156
    min r1.y, r15.z, r15.w
    add r1.y, -r1.y, r15.y  // r1.y <- C; r1.y <- C; r1.y <- C; r1.y <- C

#line 176
    add r2.x, r15.y, l(0.000000)
    div r1.y, r1.y, r2.x  // r1.y <- S; r1.y <- S

#line 146
    frc r1.x, |r1.x|  // r1.x <- H

#line 149
    mad r15.yzw, r1.xxxx, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 150
    mad_sat r15.yzw, |r15.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r15.y <- <HUEtoRGB_id8 return value>.x; r15.z <- <HUEtoRGB_id8 return value>.y; r15.w <- <HUEtoRGB_id8 return value>.z

#line 171
    add r15.yzw, r15.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
    mad r15.yzw, r15.yyzw, r1.yyyy, l(0.000000, 1.000000, 1.000000, 1.000000)
    mul r14.xyz, r15.xxxx, r15.yzwy  // r14.x <- <HSVtoRGB_id9 return value>.x; r14.y <- <HSVtoRGB_id9 return value>.y; r14.z <- <HSVtoRGB_id9 return value>.z

#line 484
    break 

#line 485
    case l(35)

#line 154
    lt r1.x, r11.y, r11.z
    movc r15.xy, r1.xxxx, r11.zyzz, r11.yzyy  // r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y

#line 155
    lt r1.x, r11.x, r15.x
    mov r15.z, r11.x
    movc r15.xyz, r1.xxxx, r15.xyzx, r15.zyxz  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w

#line 156
    min r1.x, r15.y, r15.z
    add r1.x, -r1.x, r15.x  // r1.x <- C; r1.x <- C; r1.x <- C; r1.x <- C

#line 188
    mad r1.x, -r1.x, l(0.500000), r15.x  // r1.x <- L; r1.x <- L; r1.x <- L

#line 154
    lt r1.y, r13.y, r13.z
    mov r5.xy, r13.zyzz
    mov r6.xy, r5.yxyy
    movc r15.xyzw, r1.yyyy, r5.xyzw, r6.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 155
    lt r1.y, r13.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r13.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r1.yyyy, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 156
    min r1.y, r15.y, r15.w
    add r1.y, -r1.y, r15.x  // r1.y <- C; r1.y <- C; r1.y <- C

#line 157
    add r2.x, -r15.y, r15.w
    mad r2.y, r1.y, l(6.000000), l(0.000000)
    div r2.x, r2.x, r2.y
    add r2.x, r15.z, r2.x

#line 188
    mad r2.y, -r1.y, l(0.500000), r15.x  // r2.y <- L; r2.y <- L

#line 189
    mad r2.y, r2.y, l(2.000000), l(-1.000000)
    add r2.y, -|r2.y|, l(1.000000)
    div r1.y, r1.y, r2.y  // r1.y <- S; r1.y <- S

#line 146
    frc r2.x, |r2.x|  // r2.x <- H

#line 149
    mad r15.xyz, r2.xxxx, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 150
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 182
    mad r2.x, r1.x, l(2.000000), l(-1.000000)
    add r2.x, -|r2.x|, l(1.000000)
    mul r1.y, r1.y, r2.x  // r1.y <- C

#line 183
    add r15.xyz, r15.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r14.xyz, r15.xyzx, r1.yyyy, r1.xxxx  // r14.x <- <HSLtoRGB_id10 return value>.x; r14.y <- <HSLtoRGB_id10 return value>.y; r14.z <- <HSLtoRGB_id10 return value>.z

#line 487
    break 

#line 488
    case l(36)

#line 154
    lt r1.x, r11.y, r11.z
    mov r7.xy, r11.zyzz
    mov r8.xy, r7.yxyy
    movc r15.xyzw, r1.xxxx, r7.xyzw, r8.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w; r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 155
    lt r1.x, r11.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r11.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r1.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 156
    min r1.x, r15.y, r15.w
    add r1.x, -r1.x, r15.x  // r1.x <- C; r1.x <- C

#line 157
    add r1.y, -r15.y, r15.w
    mad r2.x, r1.x, l(6.000000), l(0.000000)
    div r1.y, r1.y, r2.x
    add r1.y, r15.z, r1.y

#line 188
    mad r2.x, -r1.x, l(0.500000), r15.x  // r2.x <- L

#line 189
    mad r2.x, r2.x, l(2.000000), l(-1.000000)
    add r2.x, -|r2.x|, l(1.000000)
    div r1.x, r1.x, r2.x  // r1.x <- S

#line 154
    lt r2.x, r13.y, r13.z
    movc r15.xy, r2.xxxx, r13.zyzz, r13.yzyy  // r15.x <- P.x; r15.y <- P.y; r15.x <- P.x; r15.y <- P.y

#line 155
    lt r2.x, r13.x, r15.x
    mov r15.z, r13.x
    movc r15.xyz, r2.xxxx, r15.xyzx, r15.zyxz  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w; r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.w

#line 156
    min r2.x, r15.y, r15.z
    add r2.x, -r2.x, r15.x  // r2.x <- C; r2.x <- C

#line 188
    mad r2.x, -r2.x, l(0.500000), r15.x  // r2.x <- L

#line 146
    frc r1.y, |r1.y|  // r1.y <- H

#line 149
    mad r15.xyz, r1.yyyy, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 150
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 182
    mad r1.y, r2.x, l(2.000000), l(-1.000000)
    add r1.y, -|r1.y|, l(1.000000)
    mul r1.x, r1.x, r1.y  // r1.x <- C

#line 183
    add r15.xyz, r15.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
    mad r14.xyz, r15.xyzx, r1.xxxx, r2.xxxx  // r14.x <- <HSLtoRGB_id10 return value>.x; r14.y <- <HSLtoRGB_id10 return value>.y; r14.z <- <HSLtoRGB_id10 return value>.z

#line 490
    break 

#line 491
    case l(37)

#line 154
    lt r1.x, r11.y, r11.z
    mov r9.xy, r11.zyzz
    mov r10.xy, r9.yxyy
    movc r15.xyzw, r1.xxxx, r9.xyzw, r10.xyzw  // r15.x <- P.x; r15.y <- P.y; r15.z <- P.z; r15.w <- P.w

#line 155
    lt r1.x, r11.x, r15.x
    mov r16.xyz, r15.xywx
    mov r16.w, r11.x
    mov r15.xyw, r16.wywx
    movc r15.xyzw, r1.xxxx, r16.xyzw, r15.xyzw  // r15.x <- Q.x; r15.y <- Q.y; r15.z <- Q.z; r15.w <- Q.w

#line 156
    min r1.x, r15.y, r15.w
    add r1.x, -r1.x, r15.x  // r1.x <- C

#line 157
    add r1.y, -r15.y, r15.w
    mad r2.x, r1.x, l(6.000000), l(0.000000)
    div r1.y, r1.y, r2.x
    add r1.y, r15.z, r1.y

#line 176
    add r2.x, r15.x, l(0.000000)
    div r1.x, r1.x, r2.x  // r1.x <- S

#line 154
    max r2.x, r13.z, r13.y  // r2.x <- P.x

#line 155
    max r2.x, r2.x, r13.x  // r2.x <- Q.x

#line 146
    frc r1.y, |r1.y|  // r1.y <- H

#line 149
    mad r15.xyz, r1.yyyy, l(6.000000, 6.000000, 6.000000, 0.000000), l(-3.000000, -2.000000, -4.000000, 0.000000)

#line 150
    mad_sat r15.xyz, |r15.xyzx|, l(1.000000, -1.000000, -1.000000, 0.000000), l(-1.000000, 2.000000, 2.000000, 0.000000)  // r15.x <- <HUEtoRGB_id8 return value>.x; r15.y <- <HUEtoRGB_id8 return value>.y; r15.z <- <HUEtoRGB_id8 return value>.z

#line 171
    add r15.xyz, r15.xyzx, l(-1.000000, -1.000000, -1.000000, 0.000000)
    mad r15.xyz, r15.xyzx, r1.xxxx, l(1.000000, 1.000000, 1.000000, 0.000000)
    mul r14.xyz, r2.xxxx, r15.xyzx  // r14.x <- <HSVtoRGB_id9 return value>.x; r14.y <- <HSVtoRGB_id9 return value>.y; r14.z <- <HSVtoRGB_id9 return value>.z

#line 493
    break 

#line 494
    case l(38)

#line 496
    mov r14.x, r13.x  // r14.x <- col.x
    mov r14.yz, r11.yyzy  // r14.y <- col.y; r14.z <- col.z
    break 

#line 497
    case l(39)

#line 499
    mov r14.xz, r11.xxzx  // r14.x <- col.x; r14.z <- col.z
    mov r14.y, r13.y  // r14.y <- col.y
    break 

#line 500
    case l(40)

#line 502
    mov r14.xy, r11.xyxx  // r14.x <- col.x; r14.y <- col.y
    mov r14.z, r13.z  // r14.z <- col.z
    break 

#line 503
    default 
    break 
  endswitch   // r14.x <- col.x; r14.y <- col.y; r14.z <- col.z

#line 214
  add r1.x, -r11.w, l(1.000000)
  mad r15.w, r13.w, r1.x, r11.w  // r15.w <- alpha

#line 166
  div r1.x, r11.w, r15.w
  add r1.y, -r1.x, l(1.000000)
  add r2.x, -r13.w, l(1.000000)
  mul r1.x, r1.x, r2.x
  mul r16.xyz, r11.xyzx, r1.xxxx
  mad r13.xyz, r1.yyyy, r13.xyzx, r16.xyzx
  mad r15.xyz, r13.wwww, r14.xyzx, r13.xyzx  // r15.x <- <ColorCompositing_id140 return value>.x; r15.y <- <ColorCompositing_id140 return value>.y; r15.z <- <ColorCompositing_id140 return value>.z

#line 539
  mov r11.xyzw, r15.xyzw
  mov r12.x, r12.y
endloop 

#line 549
add r1.xyzw, -r0.xyzw, r11.xyzw
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 558
ret 
// Approximately 420 instruction slots used
***************************
*************************/
static const float Epsilon_id83 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id99;
    float2 InputValue_id100;
    float2 InputValue_id101;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    int Count_id94 = 1;
    int type_id97;
    int Seed_id98;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id8(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 RGBtoHCV_id11(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id83) + Q.z);
    return float3(H, C, Q.x);
}
float4 Reflect_id158(float4 c0, float4 c1)
{
    return (c1 == 1.0) ? c1 : min(c0 * c0 / (1.0 - c1), 1.0);
}
float3 ColorCompositing_id140(float as, float ab, float ar, float3 Cs, float3 Cb, float3 Bbs)
{
    return (1 - (as / ar)) * Cb + (as / ar) * (1 - ab) * Cs + ab * Bbs;
}
float3 HSVtoRGB_id9(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id8(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 RGBtoHSV_id12(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id83);
    return float3(HCV.x, S, HCV.z);
}
float3 HSLtoRGB_id10(in float3 HSL)
{
    float3 RGB = HUEtoRGB_id8(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (RGB - 0.5) * C + HSL.z;
}
float3 RGBtoHSL_id13(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id11(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon_id83);
    return float3(HCV.x, S, L);
}
float4 Glow_id154(float4 c0, float4 c1)
{
    return Reflect_id158(c1, c0);
}
float4 ColorDodge_id157(float4 c0, float4 c1)
{
    return c0 / (1.0 - c1);
}
float4 ColorBurn_id147(float4 c0, float4 c1)
{
    return (c1 == 0.0) ? c1 : max((1.0 - (1.0 - c0) / c1), 0.0);
}
float4 Lighten_id150(float4 c0, float4 c1)
{
    return max(c0, c1);
}
float4 Darken_id145(float4 c0, float4 c1)
{
    return min(c0, c1);
}
float4 ComputeAlpha_id141(float4 c0, float4 c1, float4 composite)
{
    float alpha = (c1.a + c0.a * (1.0 - c1.a));
    float3 color = ColorCompositing_id140(c1.a, c0.a, alpha, c1.rgb, c0.rgb, composite.rgb);
    return float4(color, alpha);
}
float4 Blue_id182(float4 c0, float4 c1)
{
    return float4(c0.r, c0.g, c1.b, 1.0);
}
float4 Green_id181(float4 c0, float4 c1)
{
    return float4(c0.r, c1.g, c0.b, 1.0);
}
float4 Red_id180(float4 c0, float4 c1)
{
    return float4(c1.r, c0.g, c0.b, 1.0);
}
float4 Value_id179(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSV_id12(c0.rgb);
    float3 hsv1 = RGBtoHSV_id12(c1.rgb);
    float3 col = HSVtoRGB_id9(float3(hsv0.x, hsv0.y, hsv1.z));
    return float4(col, c1.a);
}
float4 Lightness_id178(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv0.x, hsv0.y, hsv1.z));
    return float4(col, c1.a);
}
float4 Color_id177(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv1.x, hsv1.y, hsv0.z));
    return float4(col, c1.a);
}
float4 Saturation_id176(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSV_id12(c0.rgb);
    float3 hsv1 = RGBtoHSV_id12(c1.rgb);
    float3 col = HSVtoRGB_id9(float3(hsv0.x, hsv1.y, hsv0.z));
    return float4(col, c1.a);
}
float4 Hue_id175(float4 c0, float4 c1)
{
    float3 hsv0 = RGBtoHSL_id13(c0.rgb);
    float3 hsv1 = RGBtoHSL_id13(c1.rgb);
    float3 col = HSLtoRGB_id10(float3(hsv1.x, hsv0.y, hsv0.z));
    return float4(col, c1.a);
}
float4 GrainMerge_id174(float4 c0, float4 c1)
{
    return (c0 - c1) - 0.5;
}
float4 GrainExtract_id173(float4 c0, float4 c1)
{
    return (c0 - c1) + 0.5;
}
float4 Phoenix_id172(float4 c0, float4 c1)
{
    return min(c0, c1) - max(c0, c1) + 1.0;
}
float4 Heat_id171(float4 c0, float4 c1)
{
    return 1.0 - Glow_id154(c0, c1);
}
float4 AdditiveSubstractive_id170(float4 c0, float4 c1)
{
    return c1 - sqrt(c0);
}
float4 Negation_id169(float4 c0, float4 c1)
{
    return 1.0 - abs(1.0 - c0 - c1);
}
float4 Divide_id168(float4 c0, float4 c1)
{
    return c0 / c1;
}
float4 Subtract_id167(float4 c0, float4 c1)
{
    return c0 - c1;
}
float4 Exclusion_id166(float4 c0, float4 c1)
{
    return c0 + c1 - 2.0 * c0 * c1;
}
float4 Difference_id165(float4 c0, float4 c1)
{
    return abs(c0 - c1);
}
float4 LinearLight_id164(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? max(c0 + 2.0 * c1 - 1.0, 0.0) : min(c0 + 2.0 * (c1 - 0.5), 1.0);
}
float4 VividLight_id163(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? ColorBurn_id147(c0, 2.0 * c1) : ColorDodge_id157(c0, (2.0 * (c1 - 0.5)));
}
float4 Hardlight_id162(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? (2.0 * c0 * c1) : 1.0 - 2.0 * (1.0 - c0) * (1.0 - c1);
}
float4 Pinlight_id161(float4 c0, float4 c1)
{
    return (c1 < 0.5) ? Darken_id145(c0, (2.0 * c1)) : Lighten_id150(c0, (2.0 * (c1 - 0.5)));
}
float4 Freeze_id160(float4 c0, float4 c1)
{
    return (c1 == 0.0) ? 0.0 : 1.0 - pow(1.0 - c0, 2.0) / c1;
}
float4 HardMix_id159(float4 c0, float4 c1)
{
    return floor(c0 + c1);
}
float4 Softlight_id156(float4 c0, float4 c1)
{
    return 2.0 * c0 * c1 + c0 * c0 - 2.0 * c0 * c0 * c1;
}
float4 Overlay_id155(float4 c0, float4 c1)
{
    return (c0 < 0.5) ? (2.0 * c0 * c1) : 1.0 - 2.0 * (1 - c0) * (1.0 - c1);
}
float4 LighterColor_id153(float4 c0, float4 c1)
{
    return (c0.r + c0.g + c0.b > c1.r + c1.g + c1.b) ? c0 : c1;
}
float4 Add_id152(float4 c0, float4 c1)
{
    return c0 + c1;
}
float4 Screen_id151(float4 c0, float4 c1)
{
    return 1.0 - ((1.0 - c0) * (1.0 - c1));
}
float4 DarkerColor_id149(float4 c0, float4 c1)
{
    return (c0.r + c0.g + c0.b < c1.r + c1.g + c1.b) ? c0 : c1;
}
float4 LinearBurn_id148(float4 c0, float4 c1)
{
    return (c0 + c1) - 1.0;
}
float4 Multiply_id146(float4 c0, float4 c1)
{
    return c0 * c1;
}
float4 GeometricMean_id144(float4 c0, float4 c1)
{
    return sqrt(c0 * c1);
}
float4 Average_id143(float4 c0, float4 c1)
{
    return (c0 + c1) * 0.5;
}
float4 Normal_id142(float4 c0, float4 c1)
{
    return c1;
}
float4 Blend_id183(float4 c0, float4 c1, float fader, bool computeAlpha, int type)
{
    float4 col;
    c1.a *= saturate(fader);
    switch (type)

    {
        case 0:
            col = Normal_id142(c0, c1);
            break;
        case 1:
            col = Average_id143(c0, c1);
            break;
        case 2:
            col = GeometricMean_id144(c0, c1);
            break;
        case 3:
            col = Darken_id145(c0, c1);
            break;
        case 4:
            col = Multiply_id146(c0, c1);
            break;
        case 5:
            col = ColorBurn_id147(c0, c1);
            break;
        case 6:
            col = LinearBurn_id148(c0, c1);
            break;
        case 7:
            col = DarkerColor_id149(c0, c1);
            break;
        case 8:
            col = Lighten_id150(c0, c1);
            break;
        case 9:
            col = Screen_id151(c0, c1);
            break;
        case 10:
            col = Add_id152(c0, c1);
            break;
        case 11:
            col = LighterColor_id153(c0, c1);
            break;
        case 12:
            col = Glow_id154(c0, c1);
            break;
        case 13:
            col = Overlay_id155(c0, c1);
            break;
        case 14:
            col = Softlight_id156(c0, c1);
            break;
        case 15:
            col = ColorDodge_id157(c0, c1);
            break;
        case 16:
            col = Reflect_id158(c0, c1);
            break;
        case 17:
            col = HardMix_id159(c0, c1);
            break;
        case 18:
            col = Freeze_id160(c0, c1);
            break;
        case 19:
            col = Pinlight_id161(c0, c1);
            break;
        case 20:
            col = Hardlight_id162(c0, c1);
            break;
        case 21:
            col = VividLight_id163(c0, c1);
            break;
        case 22:
            col = LinearLight_id164(c0, c1);
            break;
        case 23:
            col = Difference_id165(c0, c1);
            break;
        case 24:
            col = Exclusion_id166(c0, c1);
            break;
        case 25:
            col = Subtract_id167(c0, c1);
            break;
        case 26:
            col = Divide_id168(c0, c1);
            break;
        case 27:
            col = Negation_id169(c0, c1);
            break;
        case 28:
            col = AdditiveSubstractive_id170(c0, c1);
            break;
        case 29:
            col = Heat_id171(c0, c1);
            break;
        case 30:
            col = Phoenix_id172(c0, c1);
            break;
        case 31:
            col = GrainExtract_id173(c0, c1);
            break;
        case 32:
            col = GrainMerge_id174(c0, c1);
            break;
        case 33:
            col = Hue_id175(c0, c1);
            break;
        case 34:
            col = Saturation_id176(c0, c1);
            break;
        case 35:
            col = Color_id177(c0, c1);
            break;
        case 36:
            col = Lightness_id178(c0, c1);
            break;
        case 37:
            col = Value_id179(c0, c1);
            break;
        case 38:
            col = Red_id180(c0, c1);
            break;
        case 39:
            col = Green_id181(c0, c1);
            break;
        case 40:
            col = Blue_id182(c0, c1);
            break;
    }
    return (computeAlpha) ? ComputeAlpha_id141(c1, c0, col) : col;
}
float2 Map_id62(float2 value, float2 inMin, float2 inMax, float2 outMin, float2 outMax)
{
    return outMin + (outMax - outMin) * (value - inMin) / (inMax - inMin);
}
float2 hash21_id80(float p)
{
    float3 p3 = frac(float3(p.xxx) * float3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 19.19);
    return frac((p3.xx + p3.yz) * p3.zy);
}
float2 Compute_id187()
{
    return InputValue_id100;
}
float2 Compute_id186()
{
    return InputValue_id101;
}
float4 Compute_id185()
{
    return InputValue_id99;
}
float4 Filter_id184(inout PS_STREAMS streams, float4 tex0col)
{
    float2 uv = streams.TexCoord_id62;
    float2 size = Compute_id186();
    float2 center = Compute_id187();
    float4 c = 0;
    float shift = 0;

    for (int i = 0; i < Count_id94; i++)
    {
        c = Blend_id183(c, Texture0_id14.SampleLevel(LinearSampler_id44, streams.TexCoord_id62 + Map_id62(hash21_id80(i + Seed_id98 * (i + 1)), 0.0, 1.0, -1.0, 1.0) * size + center, 0), 1.0, true, type_id97);
    }
    return c;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id184(streams, col), Compute_id185());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
