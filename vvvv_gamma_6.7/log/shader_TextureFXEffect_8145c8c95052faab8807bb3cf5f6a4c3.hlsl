/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin GlitchMPEG_Internal_TextureFX [{Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {GlobalStrength = InputFloat<ShaderFX.InputValueFloat.i3,PerUpdate>}, {KernelSize = InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>}, {StopAmount = InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>}, {Time = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}]
@P Time: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P StopAmount: InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>
@P KernelSize: InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>
@P GlobalStrength: InputFloat<ShaderFX.InputValueFloat.i3,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 32]
@C    InputValue_id95 => ShaderFX.InputValueFloat4
@C    InputValue_id96 => ShaderFX.InputValueFloat.i3
@C    InputValue_id97 => ShaderFX.InputValueFloat.i2
@C    InputValue_id98 => ShaderFX.InputValueFloat.i1
@C    InputValue_id99 => ShaderFX.InputValueFloat
cbuffer PerView [Size: 32]
@C    NearClipPlane_id74 => Camera.NearClipPlane
@C    FarClipPlane_id75 => Camera.FarClipPlane
@C    ZProjection_id76 => Camera.ZProjection
@C    ViewSize_id77 => Camera.ViewSize
@C    AspectRatio_id78 => Camera.AspectRatio
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Greyscale_id92 => GlitchMPEG_Internal_TextureFX.Greyscale
@C    type_id93 => GlitchMPEG_Internal_TextureFX.type
@C    orientation_id94 => GlitchMPEG_Internal_TextureFX.orientation
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    LinearSampler_id44 => Texturing.LinearSampler [Stage: Pixel, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (1-1)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    Texture1_id16 => Texturing.Texture1 [Stage: Pixel, Slot: (1-1)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    PerView => PerView [Stage: Pixel, Slot: (1-1)]
@R    Globals => Globals [Stage: Pixel, Slot: (2-2)]
***************************
*****     Sources     *****
***************************
@S    GlitchMPEG_Internal_TextureFX => fb1e5839703bef54dda0df538c2eda7d
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 324 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_8145c8c95052faab8807bb3cf5f6a4c3.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 328
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 8e5414a7c505a169d743f871c59c8180
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id95;            // Offset:    0 Size:    16
//   float InputValue_id96;             // Offset:   16 Size:     4
//   float InputValue_id97;             // Offset:   20 Size:     4
//   float InputValue_id98;             // Offset:   24 Size:     4
//   float InputValue_id99;             // Offset:   28 Size:     4
//
// }
//
// cbuffer PerView
// {
//
//   float NearClipPlane_id74;          // Offset:    0 Size:     4 [unused]
//      = 0x3f800000 
//   float FarClipPlane_id75;           // Offset:    4 Size:     4 [unused]
//      = 0x42c80000 
//   float2 ZProjection_id76;           // Offset:    8 Size:     8 [unused]
//   float2 ViewSize_id77;              // Offset:   16 Size:     8
//   float AspectRatio_id78;            // Offset:   24 Size:     4 [unused]
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   bool Greyscale_id92;               // Offset:   80 Size:     4
//   int type_id93;                     // Offset:   84 Size:     4
//   int orientation_id94;              // Offset:   88 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// LinearSampler_id44                sampler      NA          NA             s0      1 
// Sampler0_id52                     sampler      NA          NA             s1      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// Texture1_id16                     texture  float4          2d             t1      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// PerView                           cbuffer      NA          NA            cb1      1 
// Globals                           cbuffer      NA          NA            cb2      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[2], immediateIndexed
dcl_constantbuffer CB2[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 303 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_8145c8c95052faab8807bb3cf5f6a4c3.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s1, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 147
dp2 r1.x, cb0[1].wwww, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r1.x, null, r1.x
mul r1.x, r1.x, l(43758.546875)
frc r1.x, r1.x  // r1.x <- <nrand_id29 return value>

#line 235
lt r1.x, cb0[1].z, r1.x
round_ni r1.y, cb0[1].w
mul r1.y, r1.y, l(0.100000)
movc r1.z, r1.x, cb0[1].w, r1.y  // r1.z <- <getNoisedTime_id37 return value>

#line 151
frc r1.w, r1.z  // r1.w <- t

#line 153
mad r2.xy, r1.wwww, l(0.070000, 0.110000, 0.000000, 0.000000), r1.zzzz

#line 147
dp2 r2.x, r2.xxxx, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r2.x, null, r2.x
mul r2.x, r2.x, l(43758.546875)
dp2 r2.y, r2.yyyy, l(12.989800, 78.233002, 0.000000, 0.000000)
sincos r2.y, null, r2.y
mul r2.y, r2.y, l(43758.546875)
frc r2.xy, r2.xyxx  // r2.y <- <nrand_id29 return value>

#line 154
add r2.x, r2.y, r2.x

#line 228
mul r2.x, r2.x, l(4.000000)
round_ni r2.x, r2.x
mad r2.x, cb0[1].y, l(6.000000), r2.x  // r2.x <- sizeOfBlocks

#line 229
exp r2.x, r2.x  // r2.x <- <getSizeofBlocks_id38 return value>

#line 262
mul r2.yz, v1.xxyx, cb1[1].xxyx
div r2.xy, r2.yzyy, r2.xxxx
round_ni r2.xy, r2.xyxx  // r2.x <- block.x; r2.y <- block.y

#line 263
mul r1.xy, r2.xyxx, l(0.003906, 0.003906, 0.000000, 0.000000)  // r1.x <- uv_noise.x; r1.y <- uv_noise.y

#line 265
switch cb2[5].z

#line 268
  case l(0)

#line 153
  mad r3.xyzw, r1.wwww, l(0.070000, 0.070000, 0.110000, 0.110000), r1.xzxz

#line 147
  dp2 r2.y, r3.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r2.y, null, r2.y
  mul r2.y, r2.y, l(43758.546875)
  dp2 r2.z, r3.zwzz, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r2.z, null, r2.z
  mul r2.z, r2.z, l(43758.546875)
  frc r2.yz, r2.yyzy  // r2.z <- <nrand_id29 return value>

#line 154
  add r2.y, r2.z, r2.y
  mul r2.x, r2.y, l(0.500000)  // r2.x <- <n2rand_id30 return value>

#line 270
  break   // r2.x <- block.x; r2.y <- block.y

#line 271
  case l(1)

#line 153
  mad r3.xyzw, r1.wwww, l(0.070000, 0.070000, 0.110000, 0.110000), r1.yzyz

#line 147
  dp2 r1.w, r3.xyxx, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r1.w, null, r1.w
  mul r1.w, r1.w, l(43758.546875)
  frc r1.w, r1.w  // r1.w <- <nrand_id29 return value>
  dp2 r2.y, r3.zwzz, l(12.989800, 78.233002, 0.000000, 0.000000)
  sincos r2.y, null, r2.y
  mul r2.y, r2.y, l(43758.546875)
  frc r2.y, r2.y  // r2.y <- <nrand_id29 return value>

#line 154
  add r1.w, r1.w, r2.y
  mul r2.x, r1.w, l(0.500000)  // r2.x <- <n2rand_id30 return value>

#line 273
  break   // r2.x <- block.x; r2.y <- block.y

#line 274
  default 
  break 
endswitch   // r2.x <- timeLocal

#line 277
mul r2.xyzw, r2.xxxx, l(1234.000000, 3543.000000, 1236.045288, 2236.045410)

#line 275
round_ni r2.xy, r2.xyxx
mad r3.xy, r2.yxyy, l(0.003906, 0.003906, 0.000000, 0.000000), r1.yxyy  // r3.y <- uv_noise.x; r3.x <- uv_noise.y

#line 277
frc r1.xy, r2.zwzz
mul r1.xw, r1.xxxy, r1.xxxy
mul r1.y, r1.w, r1.y

#line 276
mul r1.xy, r1.xyxx, l(0.100000, 0.500000, 0.000000, 0.000000)  // r1.x <- block_thresh; r1.y <- line_thresh

#line 278
switch cb2[5].y

#line 281
  case l(0)

#line 282
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].x

#line 214
  sample_l_indexable(texture2d)(float,float,float,float) r4.x, r3.yxyy, t1.xyzw, s0, l(0.000000)
  mul r4.x, r1.w, r4.x
  lt r4.x, r4.x, r1.x
  mov r3.z, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r3.z, r3.xzxx, t1.xzyw, s0, l(0.000000)
  mul r1.w, r1.w, r3.z
  lt r1.w, r1.w, r1.y
  or r1.w, r1.w, r4.x

#line 216
  frc r4.xy, r3.yxyy
  add r4.xy, r4.xyxx, l(-0.500000, -0.500000, 0.000000, 0.000000)

#line 218
  mad r5.xyzw, r4.xyxy, l(0.030000, 0.030000, 0.060000, 0.060000), v1.xyxy  // r5.x <- uv_r.x; r5.y <- uv_r.y; r5.z <- uv_g.x; r5.w <- uv_g.y

#line 219
  mad r4.zw, r4.xxxy, l(0.000000, 0.000000, 0.037500, 0.037500), v1.xxxy  // r4.z <- uv_b.x; r4.w <- uv_b.y

#line 220
  movc r5.xy, r1.wwww, r5.xyxx, v1.xyxx
  mov r4.xy, r5.zwzz
  movc r4.xyzw, r1.wwww, r4.xyzw, v1.xyxy  // r4.x <- uv_g.x; r4.y <- uv_g.y

#line 221
  sample_l_indexable(texture2d)(float,float,float,float) r2.x, r5.xyxx, t0.xzyw, s0, l(0.000000)  // r2.x <- result.x

#line 222
  sample_l_indexable(texture2d)(float,float,float,float) r2.y, r4.xyxx, t0.zyxw, s0, l(0.000000)  // r2.y <- result.y

#line 223
  sample_l_indexable(texture2d)(float,float,float,float) r2.z, r4.zwzz, t0.yxzw, s0, l(0.000000)  // r2.z <- result.z

#line 283
  break 

#line 284
  case l(1)

#line 285
  div r1.w, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].x

#line 200
  add r4.x, r1.z, v1.x
  mov r4.y, v1.y
  sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r4.xyxx, t0.xyzw, s0, l(0.000000)  // r4.x <- locColor.x; r4.y <- locColor.y; r4.z <- locColor.z

#line 201
  mov r3.w, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r3.z, r3.xwxx, t1.yzxw, s0, l(0.000000)
  mul r1.w, r1.w, r3.z
  lt r1.w, r1.w, r1.y

#line 203
  mov r5.xy, r4.xyxx
  mov r5.z, l(1.000000)
  dp3 r5.y, r4.xyzx, r5.xyzx
  mul r1.z, r1.z, v1.y
  frc r1.z, r1.z
  mov r5.xz, l(0,0,0,0)
  add r4.xyz, r4.xyzx, -r5.zyzz
  mad r4.xyz, r1.zzzz, r4.xyzx, r5.xyzx  // r4.x <- <getGlitchDiscolorLine_id33 return value>.x; r4.y <- <getGlitchDiscolorLine_id33 return value>.y; r4.z <- <getGlitchDiscolorLine_id33 return value>.z

#line 206
  movc r2.xyz, r1.wwww, r4.xzyx, r0.xzyx  // r2.x <- <getGlitchDiscolorLine_id33 return value>.x; r2.y <- <getGlitchDiscolorLine_id33 return value>.z; r2.z <- <getGlitchDiscolorLine_id33 return value>.y

#line 286
  mov r2.xyz, r2.xzyx  // r2.x <- FragColor.x; r2.y <- FragColor.y; r2.z <- FragColor.z
  break 

#line 287
  case l(2)

#line 288
  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].x

#line 185
  sample_l_indexable(texture2d)(float,float,float,float) r1.w, r3.yxyy, t1.xzwy, s0, l(0.000000)
  mul r1.w, r1.z, r1.w
  mov r3.y, l(0)
  sample_l_indexable(texture2d)(float,float,float,float) r3.z, r3.xyxx, t1.xzyw, s0, l(0.000000)
  dp2 r1.z, r3.zzzz, r1.zzzz
  lt r1.zw, r1.zzzw, r1.yyyx
  or r1.z, r1.z, r1.w

#line 187
  mul r1.w, v1.y, cb1[1].y
  mul r1.w, r1.w, l(0.111111)
  frc r1.w, r1.w  // r1.w <- lines

#line 191
  lt r3.zw, l(0.000000, 0.000000, 0.333000, 0.666000), r1.wwww

#line 190
  movc r4.xyz, r3.zzzz, l(0,3.000000,0,0), l(3.000000,0,0,0)  // r4.x <- mask.x; r4.y <- mask.y; r4.z <- mask.z

#line 192
  movc r4.xyz, r3.wwww, l(0,0,3.000000,0), r4.xyzx

#line 193
  mul r4.xyz, r0.xyzx, r4.xyzx  // r4.x <- color.x; r4.y <- color.y; r4.z <- color.z

#line 196
  movc r2.xyz, r1.zzzz, r4.xzyx, r0.xzyx  // r2.x <- <getGlitchRGBLines_id35 return value>.x; r2.y <- <getGlitchRGBLines_id35 return value>.z; r2.z <- <getGlitchRGBLines_id35 return value>.y

#line 289
  mov r2.xyz, r2.xzyx  // r2.x <- FragColor.x; r2.y <- FragColor.y; r2.z <- FragColor.z
  break   // r3.y <- uv_noise.x

#line 290
  case l(3)

#line 291
  div r1.z, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].x

#line 169
  mov r4.xz, v1.yyxy
  mov r4.yw, l(0,0,0,0)
  sample_l_indexable(texture2d)(float,float,float,float) r1.w, r4.xyxx, t1.xzwy, s0, l(0.000000)
  mul r1.w, r1.z, r1.w
  sample_l_indexable(texture2d)(float,float,float,float) r3.z, r4.zwzz, t1.xzyw, s0, l(0.000000)
  mul r1.z, r1.z, r3.z
  lt r1.yw, r1.zzzw, r1.yyyx
  or r1.y, r1.y, r1.w
  if_nz r1.y

#line 171
    mul r1.y, v1.y, cb1[1].y
    mul r1.y, r1.y, l(0.111111)
    frc r1.y, r1.y  // r1.y <- lines

#line 175
    lt r1.yz, l(0.000000, 0.333000, 0.666000, 0.000000), r1.yyyy

#line 174
    movc r4.xyz, r1.yyyy, l(0,3.000000,0,0), l(3.000000,0,0,0)  // r4.x <- mask.x; r4.y <- mask.y; r4.z <- mask.z

#line 176
    movc r1.yzw, r1.zzzz, l(0,0,0,3.000000), r4.xxyz  // r1.y <- mask.x; r1.z <- mask.y; r1.w <- mask.z

#line 177
    sample_l_indexable(texture2d)(float,float,float,float) r4.xyz, r3.yxyy, t1.xyzw, s0, l(0.000000)
    mul r1.yzw, r1.yyzw, r4.xxyz

#line 178
    mul r2.xyz, r0.xzyx, r1.ywzy  // r2.x <- <getGlitchRGBLinesVert_id36 return value>.x; r2.y <- <getGlitchRGBLinesVert_id36 return value>.z; r2.z <- <getGlitchRGBLinesVert_id36 return value>.y

#line 179
    mov r2.xyz, r2.xzyx  // r2.y <- <getGlitchRGBLinesVert_id36 return value>.y; r2.z <- <getGlitchRGBLinesVert_id36 return value>.z
  else 

#line 181
    mov r2.xyz, r0.xyzx  // r2.x <- <getGlitchRGBLinesVert_id36 return value>.x; r2.y <- <getGlitchRGBLinesVert_id36 return value>.y; r2.z <- <getGlitchRGBLinesVert_id36 return value>.z
  endif 

#line 292
  break   // r1.y <- line_thresh

#line 293
  case l(4)

#line 294
  div r1.y, l(1.000000, 1.000000, 1.000000, 1.000000), cb0[1].x

#line 162
  sample_l_indexable(texture2d)(float,float,float,float) r1.z, r3.yxyy, t1.xzyw, s0, l(0.000000)
  mul r1.y, r1.y, r1.z
  lt r1.x, r1.y, r1.x

#line 165
  movc r2.xz, r1.xxxx, r0.yyyy, r0.xxzx  // r2.x <- <getGlitchLuma_id34 return value>.x; r2.z <- <getGlitchLuma_id34 return value>.z

#line 295
  mov r2.y, r0.y
  break   // r1.x <- block_thresh; r1.y <- line_thresh

#line 296
  default 
  mov r2.xyz, r0.xyzx  // r2.x <- FragColor.x; r2.y <- FragColor.y; r2.z <- FragColor.z
  break 
endswitch   // r2.x <- FragColor.x; r2.y <- FragColor.y; r2.z <- FragColor.z

#line 298
movc r2.yz, cb2[5].xxxx, r2.xxxx, r2.zzyz  // r2.y <- FragColor.z; r2.z <- FragColor.y

#line 308
mov r2.w, r0.w
add r1.xyzw, -r0.xyzw, r2.xzyw
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 317
ret 
// Approximately 166 instruction slots used
***************************
*************************/
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id95;
    float InputValue_id96;
    float InputValue_id97;
    float InputValue_id98;
    float InputValue_id99;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    bool Greyscale_id92;
    int type_id93;
    int orientation_id94;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float nrand_id29(float2 n)
{
    return frac(sin(dot(n.xy, float2(12.9898, 78.233))) * 43758.5453);
}
float n2rand_id30(float2 n, float seed)
{
    float t = frac(seed);
    float nrnd0 = nrand_id29(n + 0.07 * t);
    float nrnd1 = nrand_id29(n + 0.11 * t);
    return (nrnd0 + nrnd1) / 2.0;
}
float Compute_id41()
{
    return InputValue_id99;
}
float3 getGlitchLuma_id34(float2 uv_noise, float3 color, float block_thresh, float amount)
{
    if (Texture1_id16.SampleLevel(LinearSampler_id44, uv_noise, 0).g * amount < block_thresh)
        return color.ggg;
    else
        return color;
}
float3 getGlitchRGBLinesVert_id36(float2 uv, float2 uv_noise, float3 color, float block_thresh, float line_thresh, float amount)
{
    if (Texture1_id16.SampleLevel(LinearSampler_id44, float2(uv.y, 0), 0).g * amount < block_thresh || Texture1_id16.SampleLevel(LinearSampler_id44, float2(uv.x, 0), 0).g * amount < line_thresh)
    {
        float lines = frac((uv * ViewSize_id77).y / 9.0);
        float3 mask = float3(3.0, 0.0, 0.0);
        if (lines > 0.333)
            mask = float3(0.0, 3.0, 0.0);
        if (lines > 0.666)
            mask = float3(0.0, 0.0, 3.0);
        mask *= Texture1_id16.SampleLevel(LinearSampler_id44, float2(uv_noise.x, uv_noise.y), 0).rgb;
        return color.xyz * mask;
    }
    else
        return color;
}
float3 getGlitchRGBLines_id35(float2 uv, float2 uv_noise, float3 color, float block_thresh, float line_thresh, float amount)
{
    if (Texture1_id16.SampleLevel(LinearSampler_id44, uv_noise, 0).g * amount < block_thresh || Texture1_id16.SampleLevel(LinearSampler_id44, float2(uv_noise.y, 0.0), 0).g * amount * 2 < line_thresh)
    {
        float lines = frac((uv * ViewSize_id77).y / 9.0);
        float3 mask = float3(3.0, 0.0, 0.0);
        if (lines > 0.333)
            mask = float3(0.0, 3.0, 0.0);
        if (lines > 0.666)
            mask = float3(0.0, 0.0, 3.0);
        return color.xyz *= mask;
    }
    else
        return color;
}
float3 getGlitchDiscolorLine_id33(float2 uv, float2 uv_noise, float noiseTime, float3 color, float line_thresh, float amount)
{
    float3 locColor = Texture0_id14.SampleLevel(LinearSampler_id44, float2(uv.x + noiseTime, uv.y), 0).rgb;
    if (Texture1_id16.SampleLevel(LinearSampler_id44, float2(uv_noise.y, 0.0), 0).r * amount < line_thresh)
    {
        return lerp(float3(0, dot(locColor, float3(locColor.r, locColor.g, 1)), 0.0), locColor, frac(noiseTime * uv.y));
    }
    else
        return color;
}
float3 getGlitchDisplace_id31(float2 uv, float2 uv_noise, float block_thresh, float line_thresh, float amount)
{
    float2 uv_r = uv;
    float2 uv_g = uv;
    float2 uv_b = uv;
    float3 result;
    if (Texture1_id16.SampleLevel(LinearSampler_id44, uv_noise, 0).r * amount < block_thresh || Texture1_id16.SampleLevel(LinearSampler_id44, float2(uv_noise.y, 0.0), 0).g * amount < line_thresh)
    {
        float2 dist = (frac(uv_noise) - 0.5) * 0.3;
        uv_r += dist * 0.1;
        uv_g += dist * 0.2;
        uv_b += dist * 0.125;
    }
    result.r = Texture0_id14.SampleLevel(LinearSampler_id44, uv_r, 0).r;
    result.g = Texture0_id14.SampleLevel(LinearSampler_id44, uv_g, 0).g;
    result.b = Texture0_id14.SampleLevel(LinearSampler_id44, uv_b, 0).b;
    return result;
}
float getSizeofBlocks_id38(float size, float noiseTime)
{
    float sizeOfBlocks = (6.0 * size) + floor(n2rand_id30(float2(noiseTime, noiseTime), noiseTime) * 8.0);
    return pow(2, sizeOfBlocks);
}
float getNoisedTime_id37(float amount)
{
    float time = Compute_id41();
    float randStop = n2rand_id30(float2(time, time), 1);
    return randStop > amount ? time : floor(time) / 10.0;
}
float Compute_id44()
{
    return InputValue_id96;
}
float Compute_id43()
{
    return InputValue_id97;
}
float Compute_id42()
{
    return InputValue_id98;
}
float4 Compute_id40()
{
    return InputValue_id95;
}
float4 Filter_id39(inout PS_STREAMS streams, float4 tex0col)
{
    float4 FragColor = tex0col;
    float stopAmount = Compute_id42();
    float kernelSize = Compute_id43();
    float globalStrength = Compute_id44();
    float2 uv = streams.TexCoord_id62;
    float noiseTime = getNoisedTime_id37(stopAmount);
    float sizeOfBlocks = getSizeofBlocks_id38(kernelSize, noiseTime);
    float2 block = floor(uv * ViewSize_id77 / float2(sizeOfBlocks, sizeOfBlocks));
    float2 uv_noise = block / float2(256.0, 256.0);
    float timeLocal;
    switch (orientation_id94)

    {
        case 0:
            timeLocal = n2rand_id30(float2(uv_noise.x, noiseTime), noiseTime);
            break;
        case 1:
            timeLocal = n2rand_id30(float2(uv_noise.y, noiseTime), noiseTime);
            break;
    }
    uv_noise += floor(float2(timeLocal, timeLocal) * float2(1234.0, 3543.0)) / float2(256, 256);
    float block_thresh = pow(frac(timeLocal * 1236.0453), 2.0) * 0.10;
    float line_thresh = pow(frac(timeLocal * 2236.0453), 3.0) * 0.5;
    switch (type_id93)

    {
        case 0:
            FragColor.rgb = getGlitchDisplace_id31(uv, uv_noise, block_thresh, line_thresh, 1 / globalStrength);
            break;
        case 1:
            FragColor.rgb = getGlitchDiscolorLine_id33(uv, uv_noise, noiseTime, FragColor.rgb, line_thresh, 1 / globalStrength);
            break;
        case 2:
            FragColor.rgb = getGlitchRGBLines_id35(uv, uv_noise, FragColor.rgb, block_thresh, line_thresh, 1 / globalStrength);
            break;
        case 3:
            FragColor.rgb = getGlitchRGBLinesVert_id36(uv, uv_noise, FragColor.rgb, block_thresh, line_thresh, 1 / globalStrength);
            break;
        case 4:
            FragColor.rgb = getGlitchLuma_id34(uv_noise, FragColor.rgb, block_thresh, 1 / globalStrength);
            break;
    }
    if (Greyscale_id92)
        FragColor.rgb = float3(FragColor.r, FragColor.r, FragColor.r);
    return FragColor;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id39(streams, col), Compute_id40());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
