/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin Pulse_Internal_TextureFX [{Center = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}, {CenterWidth = InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>}, {Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {SlopeWidth = InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>}]
@P Center: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P SlopeWidth: InputFloat<ShaderFX.InputValueFloat.i1,PerUpdate>
@P CenterWidth: InputFloat<ShaderFX.InputValueFloat.i2,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 32]
@C    InputValue_id99 => ShaderFX.InputValueFloat4
@C    InputValue_id100 => ShaderFX.InputValueFloat
@C    InputValue_id101 => ShaderFX.InputValueFloat.i2
@C    InputValue_id102 => ShaderFX.InputValueFloat.i1
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    Invert_id97 => Pulse_Internal_TextureFX.Invert
@C    ChannelType_id98 => Pulse_Internal_TextureFX.ChannelType
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    Pulse_Internal_TextureFX => 9270453c248012dc892f8f8caf113fb1
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    PulseOperations => 4ad6971b1f816272b1fe0761376cbbdb
@S    AddonShaderUtils => 0d3496ddd24bfcbde4abd1deae724f64
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 249 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_1c2ddfa8cec7df5f1658540e4287ef7c.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 253
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 40921d46ad9a6f36cdd102f5ffd45c23
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id99;            // Offset:    0 Size:    16
//   float InputValue_id100;            // Offset:   16 Size:     4
//   float InputValue_id101;            // Offset:   20 Size:     4
//   float InputValue_id102;            // Offset:   24 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   bool Invert_id97;                  // Offset:   80 Size:     4
//   int ChannelType_id98;              // Offset:   84 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Sampler0_id52                     sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[2], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 4
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 228 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_1c2ddfa8cec7df5f1658540e4287ef7c.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 168
switch cb1[5].y

#line 171
  case l(0)

#line 173
  mov r1.x, r0.x  // r1.x <- v
  break 

#line 174
  case l(1)

#line 176
  mov r1.x, r0.y  // r1.x <- v
  break 

#line 177
  case l(2)

#line 179
  mov r1.x, r0.z  // r1.x <- v
  break 

#line 180
  case l(3)

#line 146
  lt r1.y, r0.y, r0.z
  mov r2.xy, r0.zyzz
  mov r2.zw, l(0,0,-1.000000,0.666667)
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,0,-0.333333)
  movc r2.xyzw, r1.yyyy, r2.xyzw, r3.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 147
  lt r1.y, r0.x, r2.x
  mov r3.xyz, r2.xywx
  mov r3.w, r0.x
  mov r2.xyw, r3.wywx
  movc r2.xyzw, r1.yyyy, r3.xyzw, r2.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 148
  min r1.y, r2.y, r2.w
  add r1.y, -r1.y, r2.x  // r1.y <- C

#line 149
  add r1.z, -r2.y, r2.w
  mad r1.y, r1.y, l(6.000000), l(0.000000)
  div r1.y, r1.z, r1.y
  add r1.x, r2.z, r1.y

#line 182
  mov r1.x, |r1.x|  // r1.x <- v
  break 

#line 183
  case l(4)

#line 146
  lt r1.y, r0.y, r0.z
  movc r2.xy, r1.yyyy, r0.zyzz, r0.yzyy  // r2.x <- P.x; r2.y <- P.y

#line 147
  lt r1.y, r0.x, r2.x
  mov r2.z, r0.x
  movc r1.yzw, r1.yyyy, r2.xxyz, r2.zzyx  // r1.y <- Q.x; r1.z <- Q.y; r1.w <- Q.w

#line 148
  min r1.z, r1.z, r1.w
  add r1.z, -r1.z, r1.y  // r1.z <- C

#line 162
  add r1.y, r1.y, l(0.000000)
  div r1.x, r1.z, r1.y  // r1.x <- S

#line 185
  break 

#line 186
  case l(5)

#line 146
  max r1.y, r0.z, r0.y  // r1.y <- P.x

#line 147
  max r1.x, r0.x, r1.y  // r1.x <- Q.x

#line 188
  break 

#line 189
  case l(6)

#line 146
  lt r1.y, r0.y, r0.z
  movc r2.xy, r1.yyyy, r0.zyzz, r0.yzyy  // r2.x <- P.x; r2.y <- P.y

#line 147
  lt r1.y, r0.x, r2.x
  mov r2.z, r0.x
  movc r1.yzw, r1.yyyy, r2.xxyz, r2.zzyx  // r1.y <- Q.x; r1.z <- Q.y; r1.w <- Q.w

#line 148
  min r1.z, r1.z, r1.w
  add r1.z, -r1.z, r1.y  // r1.z <- C

#line 155
  mad r1.x, -r1.z, l(0.500000), r1.y  // r1.x <- L

#line 191
  break 

#line 192
  case l(7)

#line 194
  mov r1.x, r0.w  // r1.x <- v
  break 

#line 195
  default 
  mov r1.x, l(0)  // r1.x <- v
  break 
endswitch   // r1.x <- v

#line 197
add r1.x, r1.x, -cb0[1].x

#line 198
mad r1.x, -cb0[1].y, l(0.500000), |r1.x|  // r1.x <- v

#line 201
ge r1.y, cb0[1].z, r1.x
div r1.x, r1.x, cb0[1].z

#line 203
add r1.z, -r1.x, l(1.000000)  // r1.z <- <Pulse_id69 return value>.x

#line 204
movc r1.x, cb1[5].x, r1.z, r1.x  // r1.x <- <Pulse_id69 return value>.x
and r1.x, r1.x, r1.y

#line 233
add r1.xyzw, -r0.xyzw, r1.xxxx
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 242
ret 
// Approximately 73 instruction slots used
***************************
*************************/
static const float Epsilon_id92 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id99;
    float InputValue_id100;
    float InputValue_id101;
    float InputValue_id102;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    bool Invert_id97;
    int ChannelType_id98;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 RGBtoHCV_id45(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id92) + Q.z);
    return float3(H, C, Q.x);
}
float3 RGBtoHSL_id47(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id45(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon_id92);
    return float3(HCV.x, S, L);
}
float3 RGBtoHSV_id46(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id45(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id92);
    return float3(HCV.x, S, HCV.z);
}
float4 Pulse_id69(float4 color, float center, float slopeWidth, float centerWidth, bool invert, int type)
{
    float v = 0;
    switch (type)

    {
        case 0:
            v = color.r;
            break;
        case 1:
            v = color.g;
            break;
        case 2:
            v = color.b;
            break;
        case 3:
            v = RGBtoHSV_id46(color).x;
            break;
        case 4:
            v = RGBtoHSV_id46(color).y;
            break;
        case 5:
            v = RGBtoHSV_id46(color).z;
            break;
        case 6:
            v = RGBtoHSL_id47(color).z;
            break;
        case 7:
            v = color.a;
            break;
    }
    centerWidth *= 0.5;
    v = abs(v - center);
    v -= centerWidth;
    if (v > slopeWidth)
        return 0.0f;
    v /= slopeWidth;
    if (invert)
        return 1.0 - v;
    return v;
}
float Compute_id74()
{
    return InputValue_id101;
}
float Compute_id73()
{
    return InputValue_id102;
}
float Compute_id72()
{
    return InputValue_id100;
}
float4 Compute_id71()
{
    return InputValue_id99;
}
float4 Filter_id70(float4 tex0col)
{
    return Pulse_id69(tex0col, Compute_id72(), Compute_id73(), Compute_id74(), Invert_id97, ChannelType_id98);
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id70(col), Compute_id71());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
