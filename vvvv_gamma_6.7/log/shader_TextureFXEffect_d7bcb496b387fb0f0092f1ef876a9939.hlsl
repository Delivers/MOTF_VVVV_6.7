/**************************
***** Compiler Parameters *****
***************************
@P EffectName: TextureFXEffect
@P   - EffectNodeBase.EffectNodeBaseShader: mixin ColorGrading_Internal_TextureFX [{Color = InputFloat4<ShaderFX.InputValueFloat4_Color,PerUpdate>}, {Control = InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>}, {Strength = InputFloat<ShaderFX.InputValueFloat,PerUpdate>}]
@P Strength: InputFloat<ShaderFX.InputValueFloat,PerUpdate>
@P Color: InputFloat4<ShaderFX.InputValueFloat4_Color,PerUpdate>
@P Control: InputFloat4<ShaderFX.InputValueFloat4,PerUpdate>
***************************
****  ConstantBuffers  ****
***************************
cbuffer PerDraw [Size: 64]
@C    MatrixTransform_id73 => SpriteBase.MatrixTransform
cbuffer PerUpdate [Size: 48]
@C    InputValue_id98 => ShaderFX.InputValueFloat4
@C    InputValue_id99 => ShaderFX.InputValueFloat4_Color
@C    InputValue_id100 => ShaderFX.InputValueFloat
cbuffer Globals [Size: 96]
@C    Texture0TexelSize_id15 => Texturing.Texture0TexelSize
@C    Texture1TexelSize_id17 => Texturing.Texture1TexelSize
@C    Texture2TexelSize_id19 => Texturing.Texture2TexelSize
@C    Texture3TexelSize_id21 => Texturing.Texture3TexelSize
@C    Texture4TexelSize_id23 => Texturing.Texture4TexelSize
@C    Texture5TexelSize_id25 => Texturing.Texture5TexelSize
@C    Texture6TexelSize_id27 => Texturing.Texture6TexelSize
@C    Texture7TexelSize_id29 => Texturing.Texture7TexelSize
@C    Texture8TexelSize_id31 => Texturing.Texture8TexelSize
@C    Texture9TexelSize_id33 => Texturing.Texture9TexelSize
@C    GradingFunction_id96 => ColorGrading_Internal_TextureFX.GradingFunction
@C    AdjustmentWeight_id97 => ColorGrading_Internal_TextureFX.AdjustmentWeight
***************************
******  Resources    ******
***************************
@R    PerDraw => PerDraw [Stage: Vertex, Slot: (0-0)]
@R    Sampler0_id52 => Texturing.Sampler0 [Stage: Pixel, Slot: (0-0)]
@R    Texture0_id14 => Texturing.Texture0 [Stage: Pixel, Slot: (0-0)]
@R    PerUpdate => PerUpdate [Stage: Pixel, Slot: (0-0)]
@R    Globals => Globals [Stage: Pixel, Slot: (1-1)]
***************************
*****     Sources     *****
***************************
@S    ColorGrading_Internal_TextureFX => 16066369c39b31ccaf813428b0372cd2
@S    FilterBase => 5bd9cb7e7eb80aa436e148c74d845c07
@S    TextureFX => 27bb4f1f808a5eedf6dfeaa75c669c29
@S    ImageEffectShader => 8064e30cc02e5eb4052f420259dbf05e
@S    SpriteBase => 5a7aa9dfd5b5c7613053f4f66c79ca0d
@S    ShaderBase => 4ecbcd2528b64a79eebe81a863892d8c
@S    ShaderBaseStream => b705b699a7385d39c7de52a8d13f3978
@S    Texturing => 91ef3011c1071c2e5d41cd3ee0418b18
@S    Camera => f5d1a113ef7a27319900e8cc2e11ae0d
@S    ShaderUtils => 27e27e08e991883f970444d1aebe3b58
@S    ComputeFloat4 => f871947e9f604da432ea9fc3c9cb4363
@S    ComputeColor => c875a0e093379dd74cd9a5a73aca830f
@S    ColorGradingOperations => 69769999187c74146ef60707e9072065
@S    AddonShaderUtils => 0d3496ddd24bfcbde4abd1deae724f64
@S    ComputeFloat => 3607bb1fa125ec30a7afa60be79c4817
@S    InputFloat4 => f6891eacc9ea2d912dcfded49ea96a71
@S    DeclFloat4 => 03cb445d0e450d0a37ad5f24c8a93feb
@S    InputFloat => f487ac725dafb0434d14d0273ee628a8
@S    DeclFloat => 75bf7e6f5246ed3d7aa33ab3c7183aa4
***************************
*****     Stages      *****
***************************
@G    Vertex => 79eb7ff071584feaa45b858a38e87b6a
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerDraw
// {
//
//   float4x4 MatrixTransform_id73;     // Offset:    0 Size:    64
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// PerDraw                           cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[4], immediateIndexed
dcl_input v0.xyzw
dcl_input v1.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xy
//
// Initial variable locations:
//   v0.x <- __input__.Position_id72.x; v0.y <- __input__.Position_id72.y; v0.z <- __input__.Position_id72.z; v0.w <- __input__.Position_id72.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o1.x <- <VSMain return value>.TexCoord_id62.x; o1.y <- <VSMain return value>.TexCoord_id62.y; 
//   o0.x <- <VSMain return value>.ShadingPosition_id0.x; o0.y <- <VSMain return value>.ShadingPosition_id0.y; o0.z <- <VSMain return value>.ShadingPosition_id0.z; o0.w <- <VSMain return value>.ShadingPosition_id0.w
//
#line 394 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_d7bcb496b387fb0f0092f1ef876a9939.hlsl"
dp4 o0.x, v0.xyzw, cb0[0].xyzw
dp4 o0.y, v0.xyzw, cb0[1].xyzw
dp4 o0.z, v0.xyzw, cb0[2].xyzw
dp4 o0.w, v0.xyzw, cb0[3].xyzw

#line 398
mov o1.xy, v1.xyxx
ret 
// Approximately 6 instruction slots used
@G    Pixel => 0484d7e98e77a312f70d68b4988d97de
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PerUpdate
// {
//
//   float4 InputValue_id98;            // Offset:    0 Size:    16
//   float4 InputValue_id99;            // Offset:   16 Size:    16
//   float InputValue_id100;            // Offset:   32 Size:     4
//
// }
//
// cbuffer Globals
// {
//
//   float2 Texture0TexelSize_id15;     // Offset:    0 Size:     8 [unused]
//   float2 Texture1TexelSize_id17;     // Offset:    8 Size:     8 [unused]
//   float2 Texture2TexelSize_id19;     // Offset:   16 Size:     8 [unused]
//   float2 Texture3TexelSize_id21;     // Offset:   24 Size:     8 [unused]
//   float2 Texture4TexelSize_id23;     // Offset:   32 Size:     8 [unused]
//   float2 Texture5TexelSize_id25;     // Offset:   40 Size:     8 [unused]
//   float2 Texture6TexelSize_id27;     // Offset:   48 Size:     8 [unused]
//   float2 Texture7TexelSize_id29;     // Offset:   56 Size:     8 [unused]
//   float2 Texture8TexelSize_id31;     // Offset:   64 Size:     8 [unused]
//   float2 Texture9TexelSize_id33;     // Offset:   72 Size:     8 [unused]
//   int GradingFunction_id96;          // Offset:   80 Size:     4
//   int AdjustmentWeight_id97;         // Offset:   84 Size:     4
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// Sampler0_id52                     sampler      NA          NA             s0      1 
// Texture0_id14                     texture  float4          2d             t0      1 
// PerUpdate                         cbuffer      NA          NA            cb0      1 
// Globals                           cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float       
// TEXCOORD                 0   xy          1     NONE   float   xy  
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[3], immediateIndexed
dcl_constantbuffer CB1[6], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- __input__.ShadingPosition_id0.x; v0.y <- __input__.ShadingPosition_id0.y; v0.z <- __input__.ShadingPosition_id0.z; v0.w <- __input__.ShadingPosition_id0.w; 
//   v1.x <- __input__.TexCoord_id62.x; v1.y <- __input__.TexCoord_id62.y; 
//   o0.x <- <PSMain return value>.ColorTarget_id2.x; o0.y <- <PSMain return value>.ColorTarget_id2.y; o0.z <- <PSMain return value>.ColorTarget_id2.z; o0.w <- <PSMain return value>.ColorTarget_id2.w
//
#line 373 "C:\Users\sw\Documents\_projects\2024\MOTF\MOTF_VVVV_6.7\vvvv_gamma_6.7\log\shader_TextureFXEffect_d7bcb496b387fb0f0092f1ef876a9939.hlsl"
sample_l_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0, l(0.000000)  // r0.x <- <InTex0_id26 return value>.x; r0.y <- <InTex0_id26 return value>.y; r0.z <- <InTex0_id26 return value>.z; r0.w <- <InTex0_id26 return value>.w

#line 278
switch cb1[5].y

#line 281
  case l(0)

#line 283
  mov r1.x, l(1.000000)  // r1.x <- rs
  break 

#line 284
  case l(1)

#line 172
  dp3 r1.y, l(0.212656, 0.715158, 0.072186, 0.000000), r0.xyzx  // r1.y <- <GetLuminance_id34 return value>

#line 255
  mad r1.y, -r1.y, l(2.000000), l(1.000000)
  max r1.y, r1.y, l(0.000000)

#line 176
  mul r1.z, r1.y, r1.y
  mul r1.z, r1.y, r1.z
  mad r1.w, r1.y, l(6.000000), l(-15.000000)
  mad r1.y, r1.y, r1.w, l(10.000000)
  mul r1.x, r1.y, r1.z  // r1.x <- <Curve_id89 return value>

#line 286
  break 

#line 287
  case l(2)

#line 172
  dp3 r1.y, l(0.212656, 0.715158, 0.072186, 0.000000), r0.xyzx  // r1.y <- <GetLuminance_id34 return value>

#line 255
  mad r1.z, -r1.y, l(2.000000), l(1.000000)
  max r1.z, r1.z, l(0.000000)

#line 176
  mul r1.w, r1.z, r1.z
  mul r1.w, r1.z, r1.w
  mad r2.x, r1.z, l(6.000000), l(-15.000000)
  mad r1.z, r1.z, r2.x, l(10.000000)

#line 256
  add r1.y, r1.y, l(-0.500000)
  add r1.y, r1.y, r1.y
  max r1.y, r1.y, l(0.000000)

#line 176
  mul r2.x, r1.y, r1.y
  mul r2.x, r1.y, r2.x
  mad r2.y, r1.y, l(6.000000), l(-15.000000)
  mad r1.y, r1.y, r2.y, l(10.000000)

#line 257
  mad r1.z, -r1.w, r1.z, l(1.000000)
  mad_sat r1.x, -r2.x, r1.y, r1.z  // r1.x <- Weight.y

#line 289
  break 

#line 290
  case l(3)

#line 172
  dp3 r1.y, l(0.212656, 0.715158, 0.072186, 0.000000), r0.xyzx  // r1.y <- <GetLuminance_id34 return value>

#line 256
  add r1.y, r1.y, l(-0.500000)
  add r1.y, r1.y, r1.y
  max r1.y, r1.y, l(0.000000)

#line 176
  mul r1.z, r1.y, r1.y
  mul r1.z, r1.y, r1.z
  mad r1.w, r1.y, l(6.000000), l(-15.000000)
  mad r1.y, r1.y, r1.w, l(10.000000)
  mul r1.x, r1.y, r1.z  // r1.x <- <Curve_id89 return value>

#line 292
  break 

#line 293
  case l(4)

#line 295
  mov r1.x, r0.x  // r1.x <- rs
  break 

#line 296
  case l(5)

#line 298
  mov r1.x, r0.y  // r1.x <- rs
  break 

#line 299
  case l(6)

#line 301
  mov r1.x, r0.z  // r1.x <- rs
  break 

#line 302
  case l(7)

#line 153
  max r1.y, r0.z, r0.y  // r1.y <- P.x

#line 154
  max r1.x, r0.x, r1.y  // r1.x <- Q.x

#line 304
  break 

#line 305
  case l(8)

#line 153
  lt r1.y, r0.y, r0.z
  movc r2.xy, r1.yyyy, r0.zyzz, r0.yzyy  // r2.x <- P.x; r2.y <- P.y

#line 154
  lt r1.y, r0.x, r2.x
  mov r2.z, r0.x
  movc r1.yzw, r1.yyyy, r2.xxyz, r2.zzyx  // r1.y <- Q.x; r1.z <- Q.y; r1.w <- Q.w

#line 155
  min r1.z, r1.z, r1.w
  add r1.z, -r1.z, r1.y  // r1.z <- C

#line 241
  mad r1.x, -r1.z, l(0.500000), r1.y  // r1.x <- L

#line 307
  break 

#line 308
  case l(9)

#line 153
  lt r1.y, r0.y, r0.z
  movc r2.xy, r1.yyyy, r0.zyzz, r0.yzyy  // r2.x <- P.x; r2.y <- P.y

#line 154
  lt r1.y, r0.x, r2.x
  mov r2.z, r0.x
  movc r1.yzw, r1.yyyy, r2.xxyz, r2.zzyx  // r1.y <- Q.x; r1.z <- Q.y; r1.w <- Q.w

#line 155
  min r1.z, r1.z, r1.w
  add r1.z, -r1.z, r1.y  // r1.z <- C

#line 167
  add r1.y, r1.y, l(0.000000)
  div r1.x, r1.z, r1.y  // r1.x <- S

#line 310
  break 

#line 311
  case l(10)

#line 153
  lt r1.y, r0.y, r0.z
  mov r2.xy, r0.zyzz
  mov r2.zw, l(0,0,-1.000000,0.666667)
  mov r3.xy, r2.yxyy
  mov r3.zw, l(0,0,0,-0.333333)
  movc r2.xyzw, r1.yyyy, r2.xyzw, r3.xyzw  // r2.x <- P.x; r2.y <- P.y; r2.z <- P.z; r2.w <- P.w

#line 154
  lt r1.y, r0.x, r2.x
  mov r3.xyz, r2.xywx
  mov r3.w, r0.x
  mov r2.xyw, r3.wywx
  movc r2.xyzw, r1.yyyy, r3.xyzw, r2.xyzw  // r2.x <- Q.x; r2.y <- Q.y; r2.z <- Q.z; r2.w <- Q.w

#line 155
  min r1.y, r2.y, r2.w
  add r1.y, -r1.y, r2.x  // r1.y <- C

#line 156
  add r1.z, -r2.y, r2.w
  mad r1.y, r1.y, l(6.000000), l(0.000000)
  div r1.y, r1.z, r1.y
  add r1.x, r2.z, r1.y

#line 313
  mov r1.x, |r1.x|  // r1.x <- rs
  break 

#line 314
  case l(11)

#line 235
  max r1.y, r0.y, r0.x
  max r1.y, r0.z, r1.y  // r1.y <- w

#line 236
  add r1.z, -r0.x, r1.y
  div r1.y, r1.z, r1.y
  max r1.y, r1.y, l(0.000000)
  min r1.x, r1.y, l(1.000000)  // r1.x <- <RGBToCMYK_id39 return value>.x

#line 316
  break 

#line 317
  case l(12)

#line 235
  max r1.y, r0.y, r0.x
  max r1.y, r0.z, r1.y  // r1.y <- w

#line 236
  add r1.z, -r0.y, r1.y
  div r1.y, r1.z, r1.y
  max r1.y, r1.y, l(0.000000)
  min r1.x, r1.y, l(1.000000)  // r1.x <- <RGBToCMYK_id39 return value>.y

#line 319
  break 

#line 320
  case l(13)

#line 235
  max r1.y, r0.y, r0.x
  max r1.y, r0.z, r1.y  // r1.y <- w

#line 236
  add r1.z, -r0.z, r1.y
  div r1.y, r1.z, r1.y
  max r1.y, r1.y, l(0.000000)
  min r1.x, r1.y, l(1.000000)  // r1.x <- <RGBToCMYK_id39 return value>.z

#line 322
  break 

#line 323
  case l(14)

#line 235
  max r1.y, r0.y, r0.x
  max r1.y, r0.z, r1.y  // r1.y <- w

#line 236
  add r1.y, -r1.y, l(1.000000)
  max r1.y, r1.y, l(0.000000)
  min r1.x, r1.y, l(1.000000)  // r1.x <- <RGBToCMYK_id39 return value>.w

#line 325
  break 

#line 326
  case l(15)

#line 328
  mov r1.x, r0.w  // r1.x <- rs
  break 

#line 329
  case l(16)

#line 225
  dp3 r1.y, r0.xyzx, l(0.412221, 0.536333, 0.051446, 0.000000)  // r1.y <- l

#line 226
  dp3 r1.z, r0.xyzx, l(0.211903, 0.680700, 0.107397, 0.000000)  // r1.z <- m

#line 227
  dp3 r1.w, r0.xyzx, l(0.088302, 0.281719, 0.629979, 0.000000)  // r1.w <- s

#line 228
  log r1.y, r1.y
  mul r1.y, r1.y, l(0.333333)
  exp r1.y, r1.y  // r1.y <- l_

#line 229
  log r1.z, r1.z
  mul r1.z, r1.z, l(0.333333)
  exp r1.z, r1.z  // r1.z <- m_

#line 230
  log r1.w, r1.w

#line 231
  mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.793618, 0.333333)

#line 230
  exp r1.w, r1.w  // r1.w <- s_

#line 231
  mad r1.y, r1.y, l(0.210454), r1.z
  mad r1.x, -r1.w, l(0.004072), r1.y  // r1.x <- <RGBtoOKLAB_id41 return value>.x

#line 331
  break 

#line 332
  case l(17)

#line 225
  dp3 r1.y, r0.xyzx, l(0.412221, 0.536333, 0.051446, 0.000000)  // r1.y <- l

#line 226
  dp3 r1.z, r0.xyzx, l(0.211903, 0.680700, 0.107397, 0.000000)  // r1.z <- m

#line 227
  dp3 r1.w, r0.xyzx, l(0.088302, 0.281719, 0.629979, 0.000000)  // r1.w <- s

#line 228
  log r1.y, r1.y
  mul r1.y, r1.y, l(0.333333)
  exp r1.y, r1.y  // r1.y <- l_

#line 229
  log r1.z, r1.z
  mul r1.z, r1.z, l(0.333333)
  exp r1.z, r1.z  // r1.z <- m_

#line 230
  log r1.w, r1.w

#line 231
  mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 2.428592, 0.333333)

#line 230
  exp r1.w, r1.w  // r1.w <- s_

#line 231
  mad r1.y, r1.y, l(1.977998), -r1.z
  mad r1.x, r1.w, l(0.450594), r1.y  // r1.x <- <RGBtoOKLAB_id41 return value>.y

#line 334
  break 

#line 335
  case l(18)

#line 225
  dp3 r1.y, r0.xyzx, l(0.412221, 0.536333, 0.051446, 0.000000)  // r1.y <- l

#line 226
  dp3 r1.z, r0.xyzx, l(0.211903, 0.680700, 0.107397, 0.000000)  // r1.z <- m

#line 227
  dp3 r1.w, r0.xyzx, l(0.088302, 0.281719, 0.629979, 0.000000)  // r1.w <- s

#line 228
  log r1.y, r1.y
  mul r1.y, r1.y, l(0.333333)
  exp r1.y, r1.y  // r1.y <- l_

#line 229
  log r1.z, r1.z
  mul r1.z, r1.z, l(0.333333)
  exp r1.z, r1.z  // r1.z <- m_

#line 230
  log r1.w, r1.w

#line 231
  mul r1.zw, r1.zzzw, l(0.000000, 0.000000, 0.782772, 0.333333)

#line 230
  exp r1.w, r1.w  // r1.w <- s_

#line 231
  mad r1.y, r1.y, l(0.025904), r1.z
  mad r1.x, -r1.w, l(0.808676), r1.y  // r1.x <- <RGBtoOKLAB_id41 return value>.z

#line 337
  break 

#line 338
  default 
  break 
endswitch   // r1.x <- rs

#line 339
mul r2.x, r1.x, cb0[2].x  // r2.x <- strength

#line 341
switch cb1[5].x

#line 344
  case l(0)

#line 213
  mad r3.xyzw, r2.xxxx, cb0[1].xyzw, r0.xyzw  // r3.x <- <Brightness_id72 return value>.x; r3.y <- <Brightness_id72 return value>.y; r3.z <- <Brightness_id72 return value>.z; r3.w <- <Brightness_id72 return value>.w

#line 346
  break 

#line 347
  case l(1)

#line 209
  add r4.xyzw, r0.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)
  mad r1.x, cb0[2].x, r1.x, l(1.000000)
  mul r1.xyzw, r1.xxxx, r4.xyzw
  mad r3.xyzw, r1.xyzw, cb0[1].xxxx, l(0.500000, 0.500000, 0.500000, 0.500000)  // r3.x <- <Contrast_id71 return value>.x; r3.y <- <Contrast_id71 return value>.y; r3.z <- <Contrast_id71 return value>.z; r3.w <- <Contrast_id71 return value>.w

#line 349
  break   // r1.x <- rs

#line 350
  case l(2)

#line 172
  dp3 r1.x, l(0.212656, 0.715158, 0.072186, 0.000000), r0.xyzx  // r1.x <- <GetLuminance_id34 return value>

#line 201
  max r1.y, r0.z, r0.y
  max r1.y, r0.x, r1.y  // r1.y <- max_color

#line 202
  min r1.z, r0.z, r0.y
  min r1.z, r0.x, r1.z  // r1.z <- min_color

#line 203
  add r1.y, -r1.z, r1.y  // r1.y <- color_saturation

#line 204
  lt r1.z, l(0.000000), r2.x
  lt r1.w, r2.x, l(0.000000)
  iadd r1.z, -r1.z, r1.w
  itof r1.z, r1.z
  mad r1.y, -r1.z, r1.y, l(1.000000)
  mad r1.y, r2.x, r1.y, l(1.000000)
  add r4.xyz, r0.xyzx, -r1.xxxx
  mad r3.xyz, r1.yyyy, r4.xyzx, r1.xxxx  // r3.x <- c.x; r3.y <- c.y; r3.z <- c.z

#line 352
  mov r3.w, r0.w
  break   // r1.x <- rs

#line 353
  case l(3)

#line 153
  lt r1.x, r0.y, r0.z
  mov r4.xy, r0.zyzz
  mov r4.zw, l(0,0,-1.000000,0.666667)
  mov r5.xy, r4.yxyy
  mov r5.zw, l(0,0,0,-0.333333)
  movc r1.xyzw, r1.xxxx, r4.xyzw, r5.xyzw  // r1.x <- P.x; r1.y <- P.y; r1.z <- P.z; r1.w <- P.w

#line 154
  lt r2.w, r0.x, r1.x
  mov r4.xyz, r1.xywx
  mov r4.w, r0.x
  mov r1.xyw, r4.wywx
  movc r1.xyzw, r2.wwww, r4.yzxw, r1.yzxw  // r1.x <- Q.y; r1.y <- Q.z; r1.z <- Q.x; r1.w <- Q.w

#line 155
  min r2.w, r1.x, r1.w
  add r2.w, r1.z, -r2.w  // r2.w <- C

#line 156
  add r1.w, -r1.x, r1.w
  mad r4.x, r2.w, l(6.000000), l(0.000000)
  div r1.w, r1.w, r4.x
  add r1.w, r1.y, r1.w
  mov r1.x, |r1.w|  // r1.x <- H

#line 167
  add r1.w, r1.z, l(0.000000)
  div r1.y, r2.w, r1.w  // r1.y <- S

#line 195
  mov r2.yz, l(0,0,0,0)
  add r1.xyz, r1.xyzx, r2.xyzx

#line 145
  frc r1.x, r1.x  // r1.x <- H

#line 148
  mad r2.yzw, r1.xxxx, l(0.000000, 6.000000, 6.000000, 6.000000), l(0.000000, -3.000000, -2.000000, -4.000000)

#line 149
  mad_sat r2.yzw, |r2.yyzw|, l(0.000000, 1.000000, -1.000000, -1.000000), l(0.000000, -1.000000, 2.000000, 2.000000)  // r2.y <- <HUEtoRGB_id36 return value>.x; r2.z <- <HUEtoRGB_id36 return value>.y; r2.w <- <HUEtoRGB_id36 return value>.z

#line 162
  add r2.yzw, r2.yyzw, l(0.000000, -1.000000, -1.000000, -1.000000)
  mad r1.xyw, r2.yzyw, r1.yyyy, l(1.000000, 1.000000, 0.000000, 1.000000)
  mul r3.xyz, r1.zzzz, r1.xywx  // r3.x <- <HSVtoRGB_id37 return value>.x; r3.y <- <HSVtoRGB_id37 return value>.y; r3.z <- <HSVtoRGB_id37 return value>.z

#line 355
  mov r3.w, r0.w
  break   // r1.x <- rs

#line 356
  case l(4)

#line 190
  mad r1.xyzw, r2.xxxx, cb0[1].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  div r1.xyzw, l(1.000000, 1.000000, 1.000000, 1.000000), r1.xyzw
  log r4.xyzw, |r0.xyzw|
  mul r1.xyzw, r1.xyzw, r4.xyzw
  exp r3.xyzw, r1.xyzw  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z; r3.w <- color.w

#line 358
  break   // r1.x <- rs

#line 359
  case l(5)

#line 185
  mul r1.xyzw, r2.xxxx, cb0[1].xyzw
  exp r1.xyzw, r1.xyzw
  mul r3.xyzw, r0.xyzw, r1.xyzw  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z; r3.w <- color.w

#line 361
  break   // r1.x <- rs

#line 362
  case l(6)

#line 180
  mad r1.xyzw, r2.xxxx, cb0[1].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r3.xyzw, r0.xyzw, r1.xyzw  // r3.x <- color.x; r3.y <- color.y; r3.z <- color.z; r3.w <- color.w

#line 364
  break   // r1.x <- rs

#line 365
  case l(7)

#line 366
  mad r1.xyzw, r2.xxxx, cb0[1].xyzw, l(1.000000, 1.000000, 1.000000, 1.000000)
  mul r2.xyzw, r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000)
  mad r1.xyzw, -r1.xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), l(1.500000, 1.500000, 1.500000, 1.500000)
  mad r1.xyzw, r0.xyzw, r1.xyzw, r2.xyzw
  add r3.xyzw, r1.xyzw, l(-0.500000, -0.500000, -0.500000, -0.500000)  // r3.x <- c.x; r3.y <- c.y; r3.z <- c.z; r3.w <- c.w

#line 367
  break   // r1.x <- rs; r2.x <- strength

#line 368
  default 
  break 
endswitch   // r3.x <- c.x; r3.y <- c.y; r3.z <- c.z; r3.w <- c.w

#line 378
add r1.xyzw, -r0.xyzw, r3.xyzw
mad o0.xyzw, cb0[0].xyzw, r1.xyzw, r0.xyzw

#line 387
ret 
// Approximately 271 instruction slots used
***************************
*************************/
static const float Epsilon_id92 = 0.0000000596;
struct PS_STREAMS 
{
    float2 TexCoord_id62;
    float4 ColorTarget_id2;
};
struct PS_OUTPUT 
{
    float4 ColorTarget_id2 : SV_Target0;
};
struct PS_INPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_STREAMS 
{
    float4 Position_id72;
    float2 TexCoord_id62;
    float4 ShadingPosition_id0;
};
struct VS_OUTPUT 
{
    float4 ShadingPosition_id0 : SV_Position;
    float2 TexCoord_id62 : TEXCOORD0;
};
struct VS_INPUT 
{
    float4 Position_id72 : POSITION;
    float2 TexCoord_id62 : TEXCOORD0;
};
cbuffer PerDraw 
{
    float4x4 MatrixTransform_id73;
};
cbuffer PerUpdate 
{
    float4 InputValue_id98;
    float4 InputValue_id99;
    float InputValue_id100;
};
cbuffer PerView 
{
    float NearClipPlane_id74 = 1.0f;
    float FarClipPlane_id75 = 100.0f;
    float2 ZProjection_id76;
    float2 ViewSize_id77;
    float AspectRatio_id78;
};
cbuffer Globals 
{
    float2 Texture0TexelSize_id15;
    float2 Texture1TexelSize_id17;
    float2 Texture2TexelSize_id19;
    float2 Texture3TexelSize_id21;
    float2 Texture4TexelSize_id23;
    float2 Texture5TexelSize_id25;
    float2 Texture6TexelSize_id27;
    float2 Texture7TexelSize_id29;
    float2 Texture8TexelSize_id31;
    float2 Texture9TexelSize_id33;
    int GradingFunction_id96;
    int AdjustmentWeight_id97;
};
Texture2D Texture0_id14;
Texture2D Texture1_id16;
Texture2D Texture2_id18;
Texture2D Texture3_id20;
Texture2D Texture4_id22;
Texture2D Texture5_id24;
Texture2D Texture6_id26;
Texture2D Texture7_id28;
Texture2D Texture8_id30;
Texture2D Texture9_id32;
TextureCube TextureCube0_id34;
TextureCube TextureCube1_id35;
TextureCube TextureCube2_id36;
TextureCube TextureCube3_id37;
Texture3D Texture3D0_id38;
Texture3D Texture3D1_id39;
Texture3D Texture3D2_id40;
Texture3D Texture3D3_id41;
SamplerState Sampler_id42;
SamplerState PointSampler_id43 
{
    Filter = MIN_MAG_MIP_POINT;
};
SamplerState LinearSampler_id44 
{
    Filter = MIN_MAG_MIP_LINEAR;
};
SamplerState LinearBorderSampler_id45 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Border;
    AddressV = Border;
};
SamplerComparisonState LinearClampCompareLessEqualSampler_id46 
{
    Filter = COMPARISON_MIN_MAG_LINEAR_MIP_POINT;
    AddressU = Clamp;
    AddressV = Clamp;
    ComparisonFunc = LessEqual;
};
SamplerState AnisotropicSampler_id47 
{
    Filter = ANISOTROPIC;
};
SamplerState AnisotropicRepeatSampler_id48 
{
    Filter = ANISOTROPIC;
    AddressU = Wrap;
    AddressV = Wrap;
    MaxAnisotropy = 16;
};
SamplerState PointRepeatSampler_id49 
{
    Filter = MIN_MAG_MIP_POINT;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState LinearRepeatSampler_id50 
{
    Filter = MIN_MAG_MIP_LINEAR;
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState RepeatSampler_id51 
{
    AddressU = Wrap;
    AddressV = Wrap;
};
SamplerState Sampler0_id52;
SamplerState Sampler1_id53;
SamplerState Sampler2_id54;
SamplerState Sampler3_id55;
SamplerState Sampler4_id56;
SamplerState Sampler5_id57;
SamplerState Sampler6_id58;
SamplerState Sampler7_id59;
SamplerState Sampler8_id60;
SamplerState Sampler9_id61;
float3 HUEtoRGB_id36(in float H)
{
    H = frac(H);
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R, G, B));
}
float3 RGBtoHCV_id45(in float3 RGB)
{
    float4 P = (RGB.g < RGB.b) ? float4(RGB.bg, -1.0, 2.0 / 3.0) : float4(RGB.gb, 0.0, -1.0 / 3.0);
    float4 Q = (RGB.r < P.x) ? float4(P.xyw, RGB.r) : float4(RGB.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + Epsilon_id92) + Q.z);
    return float3(H, C, Q.x);
}
float3 HSVtoRGB_id37(in float3 HSV)
{
    float3 RGB = HUEtoRGB_id36(HSV.x);
    return ((RGB - 1) * HSV.y + 1) * HSV.z;
}
float3 RGBtoHSV_id46(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id45(RGB);
    float S = HCV.y / (HCV.z + Epsilon_id92);
    return float3(HCV.x, S, HCV.z);
}
float GetLuminance_id34(float3 rgb)
{
    return dot(float3(0.212656f, 0.715158f, 0.072186f), rgb);
}
float Curve_id89(float x)
{
    return x * x * x * (x * (x * 6.0f - 15.0f) + 10.0f);
}
float4 Gain_id76(float4 color, float gain, float4 gainColor)
{
    color *= gain * gainColor + 1.0;
    return color;
}
float4 Exposure_id77(float4 color, float exposure, float4 exposureColor)
{
    color *= pow(2.0, exposure * exposureColor);
    return color;
}
float4 Gamma_id75(float4 color, float gamma, float4 gammaColor)
{
    color = pow(abs(color), 1.0 / (gamma * gammaColor + 1.0));
    return color;
}
float4 Hue_id70(float4 color, float hue, float hueColor)
{
    return float4(HSVtoRGB_id37(float3(hue, 0, 0) + RGBtoHSV_id46(color)), color.a);
}
float4 Vibrance_id69(float4 color, float vibrance)
{
    float3 c = color.rgb;
    float luma = GetLuminance_id34(color.rgb);
    float max_color = max(c.r, max(c.g, c.b));
    float min_color = min(c.r, min(c.g, c.b));
    float color_saturation = max_color - min_color;
    c = lerp(luma, c, 1.0 + (vibrance * (1.0 - (sign(vibrance) * color_saturation))));
    return float4(c, color.a);
}
float4 Contrast_id71(float4 color, float contrast, float contrastColor)
{
    return (color - 0.5) * (contrast + 1.0) * contrastColor + 0.5;
}
float4 Brightness_id72(float4 color, float brightness, float4 brightnessColor)
{
    return (color - 0.5) + 0.5 + brightness * brightnessColor;
}
float4 Compute_id92()
{
    return InputValue_id99;
}
float Compute_id93()
{
    return InputValue_id100;
}
float3 RGBtoOKLAB_id41(float3 c)
{
    float l = 0.4122214708f * c.r + 0.5363325363f * c.g + 0.0514459929f * c.b;
    float m = 0.2119034982f * c.r + 0.6806995451f * c.g + 0.1073969566f * c.b;
    float s = 0.0883024619f * c.r + 0.2817188376f * c.g + 0.6299787005f * c.b;
    float l_ = pow(l, 1.0f / 3.0f);
    float m_ = pow(m, 1.0f / 3.0f);
    float s_ = pow(s, 1.0f / 3.0f);
    return float3(0.2104542553f * l_ + 0.7936177850f * m_ - 0.0040720468f * s_, 1.9779984951f * l_ - 2.4285922050f * m_ + 0.4505937099f * s_, 0.0259040371f * l_ + 0.7827717662f * m_ - 0.8086757660f * s_);
}
float4 RGBToCMYK_id39(float3 c)
{
    float w = max(max(c.r, c.g), c.b);
    return clamp(float4((w - c.rgb) / w, 1.0 - w), 0.00000001, 1.0);
}
float3 RGBtoHSL_id47(in float3 RGB)
{
    float3 HCV = RGBtoHCV_id45(RGB);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + Epsilon_id92);
    return float3(HCV.x, S, L);
}
float3 GetLuminanceWeight_id78(float4 color, int range)
{
    float3 Weight;
    float Luma = GetLuminance_id34(color.rgb);
    switch (range)

    {
        case 0:

            {
                Weight.x = Curve_id89(max(1.0f - Luma * 2.0f, 0.0f));
                Weight.z = Curve_id89(max((Luma - 0.5f) * 2.0f, 0.0f));
                Weight.y = saturate(1.0f - Weight.x - Weight.z);
            }
            break;
        case 1:

            {
                Weight.x = pow(1.0f - Luma, 4.0f);
                Weight.z = pow(Luma, 4.0f);
                Weight.y = saturate(1.0f - Weight.x - Weight.z);
            }
            break;
    }
    return Weight;
}
float4 Compute_id91()
{
    return InputValue_id98;
}
float4 Filter_id90(float4 tex0col)
{
    float rs;
    switch (AdjustmentWeight_id97)

    {
        case 0:
            rs = float4(1.0, 1.0, 1.0, 1.0);
            break;
        case 1:
            rs = GetLuminanceWeight_id78(tex0col, 0).x;
            break;
        case 2:
            rs = GetLuminanceWeight_id78(tex0col, 0).y;
            break;
        case 3:
            rs = GetLuminanceWeight_id78(tex0col, 0).z;
            break;
        case 4:
            rs = tex0col.r;
            break;
        case 5:
            rs = tex0col.g;
            break;
        case 6:
            rs = tex0col.b;
            break;
        case 7:
            rs = RGBtoHSV_id46(tex0col).z;
            break;
        case 8:
            rs = RGBtoHSL_id47(tex0col).z;
            break;
        case 9:
            rs = RGBtoHSV_id46(tex0col).y;
            break;
        case 10:
            rs = RGBtoHSV_id46(tex0col).x;
            break;
        case 11:
            rs = RGBToCMYK_id39(tex0col).x;
            break;
        case 12:
            rs = RGBToCMYK_id39(tex0col).y;
            break;
        case 13:
            rs = RGBToCMYK_id39(tex0col).z;
            break;
        case 14:
            rs = RGBToCMYK_id39(tex0col).w;
            break;
        case 15:
            rs = tex0col.a;
            break;
        case 16:
            rs = RGBtoOKLAB_id41(tex0col.xyz).x;
            break;
        case 17:
            rs = RGBtoOKLAB_id41(tex0col.xyz).y;
            break;
        case 18:
            rs = RGBtoOKLAB_id41(tex0col.xyz).z;
            break;
    }
    float strength = Compute_id93() * rs;
    float4 c;
    switch (GradingFunction_id96)

    {
        case 0:
            c = Brightness_id72(tex0col, strength, Compute_id92());
            break;
        case 1:
            c = Contrast_id71(tex0col, strength, Compute_id92());
            break;
        case 2:
            c = Vibrance_id69(tex0col, strength);
            break;
        case 3:
            c = Hue_id70(tex0col, strength, Compute_id92());
            break;
        case 4:
            c = Gamma_id75(tex0col, strength, Compute_id92());
            break;
        case 5:
            c = Exposure_id77(tex0col, strength, Compute_id92());
            break;
        case 6:
            c = Gain_id76(tex0col, strength, Compute_id92());
            break;
        case 7:
            c = tex0col * (1.5 - 0.5 * (strength * Compute_id92() + 1.0)) + 0.5 * (strength * Compute_id92() + 1.0) - 0.5;
            break;
    }
    return c;
}
float4 InTex0_id26(inout PS_STREAMS streams)
{
    return Texture0_id14.SampleLevel(Sampler0_id52, streams.TexCoord_id62, 0);
}
float4 Shading_id28(inout PS_STREAMS streams)
{
    float4 col = InTex0_id26(streams);
    return lerp(col, Filter_id90(col), Compute_id91());
}
PS_OUTPUT PSMain(PS_INPUT __input__)
{
    PS_STREAMS streams = (PS_STREAMS)0;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ColorTarget_id2 = Shading_id28(streams);
    PS_OUTPUT __output__ = (PS_OUTPUT)0;
    __output__.ColorTarget_id2 = streams.ColorTarget_id2;
    return __output__;
}
VS_OUTPUT VSMain(VS_INPUT __input__)
{
    VS_STREAMS streams = (VS_STREAMS)0;
    streams.Position_id72 = __input__.Position_id72;
    streams.TexCoord_id62 = __input__.TexCoord_id62;
    streams.ShadingPosition_id0 = mul(streams.Position_id72, MatrixTransform_id73);
    VS_OUTPUT __output__ = (VS_OUTPUT)0;
    __output__.ShadingPosition_id0 = streams.ShadingPosition_id0;
    __output__.TexCoord_id62 = streams.TexCoord_id62;
    return __output__;
}
